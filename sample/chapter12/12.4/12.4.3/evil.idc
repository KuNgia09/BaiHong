//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  //SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  //GenInfo();            // various settings
  //Segments();           // segmentation
  //Enums();              // enumerations
  Structures();         // structure types
  //Patches();            // manual patches
  //SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  //Functions();          // function definitions
  // clear 'loading idc file' mode
  //SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("ARM");
	SetCharPrm(INF_COMPILER, 6);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
	LoadTil("gnuunx");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0);
	SetSelector(0X2,0);
	SetSelector(0X3,0);
	SetSelector(0X4,0);
	SetSelector(0X5,0);
	SetSelector(0X6,0);
	SetSelector(0X7,0);
	SetSelector(0X8,0);
	SetSelector(0X9,0);
	SetSelector(0XA,0);
	SetSelector(0XB,0);
	SetSelector(0XC,0);
	SetSelector(0XD,0);
	SetSelector(0XE,0);
	;
	SegCreate(0X9C0C,0X9F68,0X1,1,5,2);
	SegRename(0X9C0C,".plt");
	SegClass (0X9C0C,"CODE");
	SegDefReg(0x9C0C,"T",0x0);
	SegDefReg(0x9C0C,"DS",0xB);
	SetSegmentType(0X9C0C,2);
	SegCreate(0X9F70,0XD490,0X2,1,3,2);
	SegRename(0X9F70,".text");
	SegClass (0X9F70,"CODE");
	SegDefReg(0x9F70,"T",0x0);
	SegDefReg(0x9F70,"DS",0xB);
	SetSegmentType(0X9F70,2);
	SegCreate(0XD490,0XD90C,0X3,1,5,2);
	SegRename(0XD490,".rodata");
	SegClass (0XD490,"CONST");
	SegDefReg(0xD490,"T",0x0);
	SegDefReg(0xD490,"DS",0xB);
	SetSegmentType(0XD490,3);
	SegCreate(0XD90C,0XD9F0,0X4,1,5,2);
	SegRename(0XD90C,".ARM.extab");
	SegClass (0XD90C,"CONST");
	SegDefReg(0xD90C,"T",0x0);
	SegDefReg(0xD90C,"DS",0xB);
	SetSegmentType(0XD90C,3);
	SegCreate(0XEB60,0XEB68,0X5,1,1,2);
	SegRename(0XEB60,".preinit_array");
	SegClass (0XEB60,"DATA");
	SegDefReg(0xEB60,"T",0x0);
	SegDefReg(0xEB60,"DS",0xB);
	SetSegmentType(0XEB60,3);
	SegCreate(0XEB68,0XEB70,0X6,1,1,2);
	SegRename(0XEB68,".init_array");
	SegClass (0XEB68,"DATA");
	SegDefReg(0xEB68,"T",0x0);
	SegDefReg(0xEB68,"DS",0xB);
	SetSegmentType(0XEB68,3);
	SegCreate(0XEB70,0XEB78,0X7,1,1,2);
	SegRename(0XEB70,".fini_array");
	SegClass (0XEB70,"DATA");
	SegDefReg(0xEB70,"T",0x0);
	SegDefReg(0xEB70,"DS",0xB);
	SetSegmentType(0XEB70,3);
	SegCreate(0XEB78,0XEB80,0X8,1,1,2);
	SegRename(0XEB78,".ctors");
	SegClass (0XEB78,"DATA");
	SegDefReg(0xEB78,"T",0x0);
	SegDefReg(0xEB78,"DS",0xB);
	SetSegmentType(0XEB78,3);
	SegCreate(0XEB80,0XEBC8,0X9,1,5,2);
	SegRename(0XEB80,".data.rel.ro");
	SegClass (0XEB80,"DATA");
	SegDefReg(0xEB80,"T",0x0);
	SegDefReg(0xEB80,"DS",0xB);
	SetSegmentType(0XEB80,3);
	SegCreate(0XECB8,0XEF2C,0XA,1,5,2);
	SegRename(0XECB8,".got");
	SegClass (0XECB8,"DATA");
	SegDefReg(0xECB8,"T",0x0);
	SegDefReg(0xECB8,"DS",0xB);
	SetSegmentType(0XECB8,3);
	SegCreate(0XEF2C,0XF468,0XB,1,5,2);
	SegRename(0XEF2C,".data");
	SegClass (0XEF2C,"DATA");
	SegDefReg(0xEF2C,"T",0x0);
	SegDefReg(0xEF2C,"DS",0xB);
	SetSegmentType(0XEF2C,3);
	SegCreate(0XF468,0XFE3C,0XC,1,5,2);
	SegRename(0XF468,".bss");
	SegClass (0XF468,"BSS");
	SegDefReg(0xF468,"T",0x0);
	SegDefReg(0xF468,"DS",0xB);
	SetSegmentType(0XF468,9);
	SegCreate(0XFE3C,0XFF68,0XD,1,3,2);
	SegRename(0XFE3C,"extern");
	SegClass (0XFE3C,"");
	SegDefReg(0xFE3C,"T",0x0);
	SegDefReg(0xFE3C,"DS",0xD);
	SetSegmentType(0XFE3C,1);
	SegCreate(0X100DC,0X10100,0XE,1,3,2);
	SegRename(0X100DC,"abs");
	SegClass (0X100DC,"");
	SegDefReg(0x100DC,"T",0x0);
	SegDefReg(0x100DC,"DS",0xE);
	SetSegmentType(0X100DC,10);
	LowVoids(0x9C0C);
	HighVoids(0x1037C);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
        EndTypeUpdating(UTP_ENUM);
}

static Structures_0(id) {
        auto mid;

	id = AddStrucEx(-1,"timespec",0);
	id = AddStrucEx(-1,"in_addr",0);
	id = AddStrucEx(-1,"dirent",0);
	id = AddStrucEx(-1,"sockaddr_in",0);
	id = AddStrucEx(-1,"passwd",0);
	id = AddStrucEx(-1,"hostent",0);
	id = AddStrucEx(-1,"sockaddr",0);
	id = AddStrucEx(-1,"stat_type",0);
	id = AddStrucEx(-1,"timeval",0);
	
	id = GetStrucIdByName("dirent");
	mid = AddStrucMember(id,"d_ino",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"d_off",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"d_reclen",	0X8,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"d_type",	0XA,	0x000400,	-1,	1);
	mid = AddStrucMember(id,"d_name",	0XB,	0x000400,	-1,	256);
	mid = AddStrucMember(id,"_padding",	0X10B,	0x000400,	-1,	1);
	
	id = GetStrucIdByName("in_addr");
	mid = AddStrucMember(id,"s_addr",	0,	0x20000400,	-1,	4);
	
	id = GetStrucIdByName("sockaddr_in");
	mid = AddStrucMember(id,"sin_family",	0,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"sin_port",	0X2,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"sin_addr",	0X4,	0x60000400,	GetStrucIdByName("in_addr"),	4);
	mid = AddStrucMember(id,"sin_zero",	0X8,	0x000400,	-1,	8);
	
	id = GetStrucIdByName("passwd");
	mid = AddStrucMember(id,"pw_name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"pw_passwd",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"pw_uid",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"pw_gid",	0XC,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"pw_gecos",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"pw_dir",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"pw_shell",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = GetStrucIdByName("hostent");
	mid = AddStrucMember(id,"h_name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"h_aliases",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"h_addrtype",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"h_length",	0XC,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"h_addr_list",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = GetStrucIdByName("sockaddr");
	mid = AddStrucMember(id,"sa_family",	0,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"sa_data",	0X2,	0x000400,	-1,	14);
	
	id = GetStrucIdByName("timespec");
	mid = AddStrucMember(id,"tv_sec",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"tv_nsec",	0X4,	0x20000400,	-1,	4);
	
	id = GetStrucIdByName("stat_type");
	mid = AddStrucMember(id,"st_dev",	0,	0x30000400,	-1,	8);
	mid = AddStrucMember(id,"st_ino",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_mode",	0XC,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_nlink",	0X10,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_uid",	0X14,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_gid",	0X18,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"dsafa",	0X1C,	0x20000400,	-1,	4);
	SetMemberComment(id,	0X1C,	"这个字节是多余的",	1);
	mid = AddStrucMember(id,"st_rdev",	0X20,	0x30000400,	-1,	8);
	mid = AddStrucMember(id,"__pad2",	0X28,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"st_size",	0X2C,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_blksize",	0X30,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_blocks",	0X34,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"st_atim",	0X38,	0x60000400,	GetStrucIdByName("timespec"),	8);
	mid = AddStrucMember(id,"st_mtim",	0X40,	0x60000400,	GetStrucIdByName("timespec"),	8);
	mid = AddStrucMember(id,"st_ctim",	0X48,	0x60000400,	GetStrucIdByName("timespec"),	8);
	mid = AddStrucMember(id,"__unused4",	0X50,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"__unused5",	0X54,	0x20000400,	-1,	4);
	
	id = GetStrucIdByName("timeval");
	mid = AddStrucMember(id,"tv_sec",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"tv_usec",	0X4,	0x20000400,	-1,	4);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X9C0C,	0,	"; File Name   : C:\\Users\\FEICONG\\Desktop\\evil.bin");
	ExtLinA		(0X9C0C,	1,	"; Format      : ELF for ARM (Executable)");
	ExtLinA		(0X9C0C,	2,	"; Imagebase   : 8000");
	ExtLinA		(0X9C0C,	3,	"; Interpreter '/system/bin/linker'");
	ExtLinA		(0X9C0C,	4,	"; Needed Library 'libc.so'");
	ExtLinA		(0X9C0C,	5,	"; Needed Library 'libstdc++.so'");
	ExtLinA		(0X9C0C,	6,	"; Needed Library 'libm.so'");
	ExtLinA		(0X9C0C,	7,	"; Needed Library 'libz.so'");
	ExtLinA		(0X9C0C,	8,	"; Needed Library 'libdl.so'");
	ExtLinA		(0X9C0C,	9,	"; ");
	ExtLinA		(0X9C0C,	10,	"; EABI version: 4");
	ExtLinA		(0X9C0C,	11,	"; ");
	MakeCode	(0X9C0C);
	MakeDword	(x=0X9C1C);
	OpOff		(x,	0,	0X9C1C);
	OpOff		(x,	128,	0X9C1C);
	MakeCode	(x=0X9C20);
	OpHex		(x,	1);
	MakeName	(0X9C20,	"strcpy");
	MakeCode	(x=0X9C24);
	OpHex		(x,	1);
	MakeCode	(x=0X9C28);
	OpOff		(x,	1,	0XEC28);
	OpOff		(x,	129,	0XEC28);
	MakeCode	(x=0X9C2C);
	OpHex		(x,	1);
	MakeName	(0X9C2C,	"ioctl");
	MakeCode	(x=0X9C30);
	OpHex		(x,	1);
	MakeCode	(x=0X9C34);
	OpOff		(x,	1,	0XEC34);
	OpOff		(x,	129,	0XEC34);
	MakeCode	(x=0X9C38);
	OpHex		(x,	1);
	MakeName	(0X9C38,	"connect");
	MakeCode	(x=0X9C3C);
	OpHex		(x,	1);
	MakeCode	(x=0X9C40);
	OpOff		(x,	1,	0XEC40);
	OpOff		(x,	129,	0XEC40);
	MakeCode	(x=0X9C44);
	OpHex		(x,	1);
	MakeName	(0X9C44,	"geteuid");
	MakeCode	(x=0X9C48);
	OpHex		(x,	1);
	MakeCode	(x=0X9C4C);
	OpOff		(x,	1,	0XEC4C);
	OpOff		(x,	129,	0XEC4C);
	MakeCode	(x=0X9C50);
	OpHex		(x,	1);
	MakeName	(0X9C50,	"memmove");
	MakeCode	(x=0X9C54);
	OpHex		(x,	1);
	MakeCode	(x=0X9C58);
	OpOff		(x,	1,	0XEC58);
	OpOff		(x,	129,	0XEC58);
	MakeCode	(x=0X9C5C);
	OpHex		(x,	1);
	MakeName	(0X9C5C,	"atol");
	MakeCode	(x=0X9C60);
	OpHex		(x,	1);
	MakeCode	(x=0X9C64);
	OpOff		(x,	1,	0XEC64);
	OpOff		(x,	129,	0XEC64);
	MakeCode	(x=0X9C68);
	OpHex		(x,	1);
	MakeName	(0X9C68,	"__errno");
	MakeCode	(x=0X9C6C);
	OpHex		(x,	1);
	MakeCode	(x=0X9C70);
	OpOff		(x,	1,	0XEC70);
	OpOff		(x,	129,	0XEC70);
	MakeCode	(x=0X9C74);
	OpHex		(x,	1);
	MakeName	(0X9C74,	"getenv");
	MakeCode	(x=0X9C78);
	OpHex		(x,	1);
	MakeCode	(x=0X9C7C);
	OpOff		(x,	1,	0XEC7C);
	OpOff		(x,	129,	0XEC7C);
	MakeCode	(x=0X9C80);
	OpHex		(x,	1);
	MakeName	(0X9C80,	"execve");
	MakeCode	(x=0X9C84);
	OpHex		(x,	1);
	MakeCode	(x=0X9C88);
	OpOff		(x,	1,	0XEC88);
	OpOff		(x,	129,	0XEC88);
	MakeCode	(x=0X9C8C);
	OpHex		(x,	1);
	MakeName	(0X9C8C,	"fgets");
	MakeCode	(x=0X9C90);
	OpHex		(x,	1);
	MakeCode	(x=0X9C94);
	OpOff		(x,	1,	0XEC94);
	OpOff		(x,	129,	0XEC94);
	MakeCode	(x=0X9C98);
	OpHex		(x,	1);
	MakeName	(0X9C98,	"memcpy");
	MakeCode	(x=0X9C9C);
	OpHex		(x,	1);
	MakeCode	(x=0X9CA0);
	OpOff		(x,	1,	0XECA0);
	OpOff		(x,	129,	0XECA0);
	MakeCode	(x=0X9CA4);
	OpHex		(x,	1);
	MakeName	(0X9CA4,	"readlink");
	MakeCode	(x=0X9CA8);
	OpHex		(x,	1);
	MakeCode	(x=0X9CAC);
	OpOff		(x,	1,	0XECAC);
	OpOff		(x,	129,	0XECAC);
	MakeCode	(x=0X9CB0);
	OpHex		(x,	1);
	MakeName	(0X9CB0,	"system");
	MakeCode	(x=0X9CB8);
	OpOff		(x,	1,	0XECB8);
	OpOff		(x,	129,	0XECB8);
	MakeCode	(x=0X9CBC);
	OpHex		(x,	1);
	MakeName	(0X9CBC,	"malloc");
	MakeCode	(x=0X9CC4);
	OpOff		(x,	1,	0XECC4);
	OpOff		(x,	129,	0XECC4);
	MakeCode	(x=0X9CC8);
	OpHex		(x,	1);
	MakeName	(0X9CC8,	"sleep");
	MakeCode	(x=0X9CD0);
	OpOff		(x,	1,	0XECD0);
	OpOff		(x,	129,	0XECD0);
	MakeCode	(x=0X9CD4);
	OpHex		(x,	1);
	MakeName	(0X9CD4,	"settimeofday");
	MakeCode	(x=0X9CDC);
	OpOff		(x,	1,	0XECDC);
	OpOff		(x,	129,	0XECDC);
	MakeCode	(x=0X9CE0);
	OpHex		(x,	1);
	MakeName	(0X9CE0,	"socket");
	MakeCode	(x=0X9CE8);
	OpOff		(x,	1,	0XECE8);
	OpOff		(x,	129,	0XECE8);
	MakeCode	(x=0X9CEC);
	OpHex		(x,	1);
	MakeName	(0X9CEC,	"readdir");
	MakeCode	(x=0X9CF4);
	OpOff		(x,	1,	0XECF4);
	OpOff		(x,	129,	0XECF4);
	MakeCode	(x=0X9CF8);
	OpHex		(x,	1);
	MakeName	(0X9CF8,	"fflush");
	MakeCode	(x=0X9D00);
	OpOff		(x,	1,	0XED00);
	OpOff		(x,	129,	0XED00);
	MakeCode	(x=0X9D04);
	OpHex		(x,	1);
	MakeName	(0X9D04,	"chown");
	MakeCode	(x=0X9D0C);
	OpOff		(x,	1,	0XED0C);
	OpOff		(x,	129,	0XED0C);
	MakeCode	(x=0X9D10);
	OpHex		(x,	1);
	MakeName	(0X9D10,	"strncasecmp");
	MakeCode	(x=0X9D14);
	OpHex		(x,	1);
	MakeCode	(x=0X9D18);
	OpOff		(x,	1,	0XDD18);
	OpOff		(x,	129,	0XDD18);
	MakeCode	(x=0X9D1C);
	OpHex		(x,	1);
	MakeName	(0X9D1C,	"__stack_chk_fail");
	MakeCode	(x=0X9D20);
	OpHex		(x,	1);
	MakeCode	(x=0X9D24);
	OpOff		(x,	1,	0XDD24);
	OpOff		(x,	129,	0XDD24);
	MakeCode	(x=0X9D28);
	OpHex		(x,	1);
	MakeName	(0X9D28,	"chmod");
	MakeCode	(x=0X9D2C);
	OpHex		(x,	1);
	MakeCode	(x=0X9D30);
	OpOff		(x,	1,	0XDD30);
	OpOff		(x,	129,	0XDD30);
	MakeCode	(x=0X9D34);
	OpHex		(x,	1);
	MakeName	(0X9D34,	"__libc_init");
	MakeCode	(x=0X9D38);
	OpHex		(x,	1);
	MakeCode	(x=0X9D3C);
	OpOff		(x,	1,	0XDD3C);
	OpOff		(x,	129,	0XDD3C);
	MakeCode	(x=0X9D40);
	OpHex		(x,	1);
	MakeName	(0X9D40,	"strrchr");
	MakeCode	(x=0X9D44);
	OpHex		(x,	1);
	MakeCode	(x=0X9D48);
	OpOff		(x,	1,	0XDD48);
	OpOff		(x,	129,	0XDD48);
	MakeCode	(x=0X9D4C);
	OpHex		(x,	1);
	MakeName	(0X9D4C,	"write");
	MakeCode	(x=0X9D50);
	OpHex		(x,	1);
	MakeCode	(x=0X9D54);
	OpOff		(x,	1,	0XDD54);
	OpOff		(x,	129,	0XDD54);
	MakeCode	(x=0X9D58);
	OpHex		(x,	1);
	MakeName	(0X9D58,	"fprintf");
	MakeCode	(x=0X9D5C);
	OpHex		(x,	1);
	MakeCode	(x=0X9D60);
	OpOff		(x,	1,	0XDD60);
	OpOff		(x,	129,	0XDD60);
	MakeCode	(x=0X9D64);
	OpHex		(x,	1);
	MakeName	(0X9D64,	"kill");
	MakeCode	(x=0X9D68);
	OpHex		(x,	1);
	MakeCode	(x=0X9D6C);
	OpOff		(x,	1,	0XDD6C);
	OpOff		(x,	129,	0XDD6C);
	MakeCode	(x=0X9D70);
	OpHex		(x,	1);
	MakeName	(0X9D70,	"strcat");
	MakeCode	(x=0X9D74);
	OpHex		(x,	1);
	MakeCode	(x=0X9D78);
	OpOff		(x,	1,	0XDD78);
	OpOff		(x,	129,	0XDD78);
	MakeCode	(x=0X9D7C);
	OpHex		(x,	1);
	MakeName	(0X9D7C,	"setsockopt");
	MakeCode	(x=0X9D80);
	OpHex		(x,	1);
	MakeCode	(x=0X9D84);
	OpOff		(x,	1,	0XDD84);
	OpOff		(x,	129,	0XDD84);
	MakeCode	(x=0X9D88);
	OpHex		(x,	1);
	MakeName	(0X9D88,	"__system_property_get");
	MakeCode	(x=0X9D8C);
	OpHex		(x,	1);
	MakeCode	(x=0X9D90);
	OpOff		(x,	1,	0XDD90);
	OpOff		(x,	129,	0XDD90);
	MakeCode	(x=0X9D94);
	OpHex		(x,	1);
	MakeName	(0X9D94,	"lstat");
	MakeCode	(x=0X9D98);
	OpHex		(x,	1);
	MakeCode	(x=0X9D9C);
	OpOff		(x,	1,	0XDD9C);
	OpOff		(x,	129,	0XDD9C);
	MakeCode	(x=0X9DA0);
	OpHex		(x,	1);
	MakeName	(0X9DA0,	"strstr");
	MakeCode	(x=0X9DA4);
	OpHex		(x,	1);
	MakeCode	(x=0X9DA8);
	OpOff		(x,	1,	0XDDA8);
	OpOff		(x,	129,	0XDDA8);
	MakeCode	(x=0X9DAC);
	OpHex		(x,	1);
	MakeName	(0X9DAC,	"read");
	MakeCode	(x=0X9DB0);
	OpHex		(x,	1);
	MakeCode	(x=0X9DB4);
	OpOff		(x,	1,	0XDDB4);
	OpOff		(x,	129,	0XDDB4);
	MakeCode	(x=0X9DB8);
	OpHex		(x,	1);
	MakeName	(0X9DB8,	"strncpy");
	MakeCode	(x=0X9DBC);
	OpHex		(x,	1);
	MakeCode	(x=0X9DC0);
	OpOff		(x,	1,	0XDDC0);
	OpOff		(x,	129,	0XDDC0);
	MakeCode	(x=0X9DC4);
	OpHex		(x,	1);
	MakeName	(0X9DC4,	"unlink");
	MakeCode	(x=0X9DC8);
	OpHex		(x,	1);
	MakeCode	(x=0X9DCC);
	OpOff		(x,	1,	0XDDCC);
	OpOff		(x,	129,	0XDDCC);
	MakeCode	(x=0X9DD0);
	OpHex		(x,	1);
	MakeName	(0X9DD0,	"sync");
	MakeCode	(x=0X9DD4);
	OpHex		(x,	1);
	MakeCode	(x=0X9DD8);
	OpOff		(x,	1,	0XDDD8);
	OpOff		(x,	129,	0XDDD8);
	MakeCode	(x=0X9DDC);
	OpHex		(x,	1);
	MakeName	(0X9DDC,	"strcasecmp");
	MakeCode	(x=0X9DE0);
	OpHex		(x,	1);
	MakeCode	(x=0X9DE4);
	OpOff		(x,	1,	0XDDE4);
	OpOff		(x,	129,	0XDDE4);
	MakeCode	(x=0X9DE8);
	OpHex		(x,	1);
	MakeName	(0X9DE8,	"strtok");
	MakeCode	(x=0X9DEC);
	OpHex		(x,	1);
	MakeCode	(x=0X9DF0);
	OpOff		(x,	1,	0XDDF0);
	OpOff		(x,	129,	0XDDF0);
	MakeCode	(x=0X9DF4);
	OpHex		(x,	1);
	MakeName	(0X9DF4,	"memcmp");
	MakeCode	(x=0X9DF8);
	OpHex		(x,	1);
	MakeCode	(x=0X9DFC);
	OpOff		(x,	1,	0XDDFC);
	OpOff		(x,	129,	0XDDFC);
	MakeCode	(x=0X9E00);
	OpHex		(x,	1);
	MakeName	(0X9E00,	"fork");
	MakeCode	(x=0X9E04);
	OpHex		(x,	1);
	MakeCode	(x=0X9E08);
	OpOff		(x,	1,	0XDE08);
	OpOff		(x,	129,	0XDE08);
	MakeCode	(x=0X9E0C);
	OpHex		(x,	1);
	MakeName	(0X9E0C,	"sscanf");
	MakeCode	(x=0X9E10);
	OpHex		(x,	1);
	MakeCode	(x=0X9E14);
	OpOff		(x,	1,	0XDE14);
	OpOff		(x,	129,	0XDE14);
	MakeCode	(x=0X9E18);
	OpHex		(x,	1);
	MakeName	(0X9E18,	"srand48");
	MakeCode	(x=0X9E1C);
	OpHex		(x,	1);
	MakeCode	(x=0X9E20);
	OpOff		(x,	1,	0XDE20);
	OpOff		(x,	129,	0XDE20);
	MakeCode	(x=0X9E24);
	OpHex		(x,	1);
	MakeName	(0X9E24,	"strdup");
	MakeCode	(x=0X9E28);
	OpHex		(x,	1);
	MakeCode	(x=0X9E2C);
	OpOff		(x,	1,	0XDE2C);
	OpOff		(x,	129,	0XDE2C);
	MakeCode	(x=0X9E30);
	OpHex		(x,	1);
	MakeName	(0X9E30,	"gettimeofday");
	MakeCode	(x=0X9E34);
	OpHex		(x,	1);
	MakeCode	(x=0X9E38);
	OpOff		(x,	1,	0XDE38);
	OpOff		(x,	129,	0XDE38);
	MakeCode	(x=0X9E3C);
	OpHex		(x,	1);
	MakeName	(0X9E3C,	"fopen");
	MakeCode	(x=0X9E40);
	OpHex		(x,	1);
	MakeCode	(x=0X9E44);
	OpOff		(x,	1,	0XDE44);
	OpOff		(x,	129,	0XDE44);
	MakeCode	(x=0X9E48);
	OpHex		(x,	1);
	MakeName	(0X9E48,	"memset");
	MakeCode	(x=0X9E4C);
	OpHex		(x,	1);
	MakeCode	(x=0X9E50);
	OpOff		(x,	1,	0XDE50);
	OpOff		(x,	129,	0XDE50);
	MakeCode	(x=0X9E54);
	OpHex		(x,	1);
	MakeName	(0X9E54,	"fclose");
	MakeCode	(x=0X9E58);
	OpHex		(x,	1);
	MakeCode	(x=0X9E5C);
	OpOff		(x,	1,	0XDE5C);
	OpOff		(x,	129,	0XDE5C);
	MakeCode	(x=0X9E60);
	OpHex		(x,	1);
	MakeName	(0X9E60,	"time");
	MakeCode	(x=0X9E64);
	OpHex		(x,	1);
	MakeCode	(x=0X9E68);
	OpOff		(x,	1,	0XDE68);
	OpOff		(x,	129,	0XDE68);
	MakeCode	(x=0X9E6C);
	OpHex		(x,	1);
	MakeName	(0X9E6C,	"opendir");
	MakeCode	(x=0X9E70);
	OpHex		(x,	1);
	MakeCode	(x=0X9E74);
	OpOff		(x,	1,	0XDE74);
	OpOff		(x,	129,	0XDE74);
	MakeCode	(x=0X9E78);
	OpHex		(x,	1);
	MakeName	(0X9E78,	"mount");
	MakeCode	(x=0X9E7C);
	OpHex		(x,	1);
	MakeCode	(x=0X9E80);
	OpOff		(x,	1,	0XDE80);
	OpOff		(x,	129,	0XDE80);
	MakeCode	(x=0X9E84);
	OpHex		(x,	1);
	MakeName	(0X9E84,	"strcmp");
	MakeCode	(x=0X9E88);
	OpHex		(x,	1);
	MakeCode	(x=0X9E8C);
	OpOff		(x,	1,	0XDE8C);
	OpOff		(x,	129,	0XDE8C);
	MakeCode	(x=0X9E90);
	OpHex		(x,	1);
	MakeName	(0X9E90,	"lrand48");
	MakeCode	(x=0X9E94);
	OpHex		(x,	1);
	MakeCode	(x=0X9E98);
	OpOff		(x,	1,	0XDE98);
	OpOff		(x,	129,	0XDE98);
	MakeCode	(x=0X9E9C);
	OpHex		(x,	1);
	MakeName	(0X9E9C,	"gethostbyname");
	MakeCode	(x=0X9EA0);
	OpHex		(x,	1);
	MakeCode	(x=0X9EA4);
	OpOff		(x,	1,	0XDEA4);
	OpOff		(x,	129,	0XDEA4);
	MakeCode	(x=0X9EA8);
	OpHex		(x,	1);
	MakeName	(0X9EA8,	"getpwnam");
	MakeCode	(x=0X9EAC);
	OpHex		(x,	1);
	MakeCode	(x=0X9EB0);
	OpOff		(x,	1,	0XDEB0);
	OpOff		(x,	129,	0XDEB0);
	MakeCode	(x=0X9EB4);
	OpHex		(x,	1);
	MakeName	(0X9EB4,	"sprintf");
	MakeCode	(x=0X9EB8);
	OpHex		(x,	1);
	MakeCode	(x=0X9EBC);
	OpOff		(x,	1,	0XDEBC);
	OpOff		(x,	129,	0XDEBC);
	MakeCode	(x=0X9EC0);
	OpHex		(x,	1);
	MakeName	(0X9EC0,	"stat");
	MakeCode	(x=0X9EC4);
	OpHex		(x,	1);
	MakeCode	(x=0X9EC8);
	OpOff		(x,	1,	0XDEC8);
	OpOff		(x,	129,	0XDEC8);
	MakeCode	(x=0X9ECC);
	OpHex		(x,	1);
	MakeName	(0X9ECC,	"fwrite");
	MakeCode	(x=0X9ED0);
	OpHex		(x,	1);
	MakeCode	(x=0X9ED4);
	OpOff		(x,	1,	0XDED4);
	OpOff		(x,	129,	0XDED4);
	MakeCode	(x=0X9ED8);
	OpHex		(x,	1);
	MakeName	(0X9ED8,	"access");
	MakeCode	(x=0X9EDC);
	OpHex		(x,	1);
	MakeCode	(x=0X9EE0);
	OpOff		(x,	1,	0XDEE0);
	OpOff		(x,	129,	0XDEE0);
	MakeCode	(x=0X9EE4);
	OpHex		(x,	1);
	MakeName	(0X9EE4,	"exit");
	MakeCode	(x=0X9EE8);
	OpHex		(x,	1);
	MakeCode	(x=0X9EEC);
	OpOff		(x,	1,	0XDEEC);
	OpOff		(x,	129,	0XDEEC);
	MakeCode	(x=0X9EF0);
	OpHex		(x,	1);
	MakeName	(0X9EF0,	"atoi");
	MakeCode	(x=0X9EF4);
	OpHex		(x,	1);
	MakeCode	(x=0X9EF8);
	OpOff		(x,	1,	0XDEF8);
	OpOff		(x,	129,	0XDEF8);
	MakeCode	(x=0X9EFC);
	OpHex		(x,	1);
	MakeName	(0X9EFC,	"strlen");
	MakeCode	(x=0X9F00);
	OpHex		(x,	1);
	MakeCode	(x=0X9F04);
	OpOff		(x,	1,	0XDF04);
	OpOff		(x,	129,	0XDF04);
	MakeCode	(x=0X9F08);
	OpHex		(x,	1);
	MakeName	(0X9F08,	"open");
	MakeCode	(x=0X9F0C);
	OpHex		(x,	1);
	MakeCode	(x=0X9F10);
	OpOff		(x,	1,	0XDF10);
	OpOff		(x,	129,	0XDF10);
	MakeCode	(x=0X9F14);
	OpHex		(x,	1);
	MakeName	(0X9F14,	"strchr");
	MakeCode	(x=0X9F18);
	OpHex		(x,	1);
	MakeCode	(x=0X9F1C);
	OpOff		(x,	1,	0XDF1C);
	OpOff		(x,	129,	0XDF1C);
	MakeCode	(x=0X9F20);
	OpHex		(x,	1);
	MakeName	(0X9F20,	"fputs");
	MakeCode	(x=0X9F24);
	OpHex		(x,	1);
	MakeCode	(x=0X9F28);
	OpOff		(x,	1,	0XDF28);
	OpOff		(x,	129,	0XDF28);
	MakeCode	(x=0X9F2C);
	OpHex		(x,	1);
	MakeName	(0X9F2C,	"setsid");
	MakeCode	(x=0X9F30);
	OpHex		(x,	1);
	MakeCode	(x=0X9F34);
	OpOff		(x,	1,	0XDF34);
	OpOff		(x,	129,	0XDF34);
	MakeCode	(x=0X9F38);
	OpHex		(x,	1);
	MakeName	(0X9F38,	"closedir");
	MakeCode	(x=0X9F3C);
	OpHex		(x,	1);
	MakeCode	(x=0X9F40);
	OpOff		(x,	1,	0XDF40);
	OpOff		(x,	129,	0XDF40);
	MakeCode	(x=0X9F44);
	OpHex		(x,	1);
	MakeName	(0X9F44,	"vasprintf");
	MakeCode	(x=0X9F48);
	OpHex		(x,	1);
	MakeCode	(x=0X9F4C);
	OpOff		(x,	1,	0XDF4C);
	OpOff		(x,	129,	0XDF4C);
	MakeCode	(x=0X9F50);
	OpHex		(x,	1);
	MakeName	(0X9F50,	"close");
	MakeCode	(x=0X9F54);
	OpHex		(x,	1);
	MakeCode	(x=0X9F58);
	OpOff		(x,	1,	0XDF58);
	OpOff		(x,	129,	0XDF58);
	MakeCode	(x=0X9F5C);
	OpHex		(x,	1);
	MakeName	(0X9F5C,	"free");
	MakeCode	(x=0X9F60);
	OpHex		(x,	1);
	MakeCode	(x=0X9F64);
	OpOff		(x,	1,	0XDF64);
	OpOff		(x,	129,	0XDF64);
	MakeCode	(0X9F70);
	MakeName	(0X9F70,	"start");
	MakeCode	(x=0X9F78);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X9F7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X9F84);
	MakeName	(0X9F84,	"j_j_main");
	MakeDword	(x=0X9F88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9F8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9F90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9F94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X9F98,	0X8);
	MakeCode	(0X9FA0);
	MakeName	(0X9FA0,	"init_predata");
	MakeDword	(x=0XA25C);
	OpOff		(x,	0,	0X9FAA);
	OpOff		(x,	128,	0X9FAA);
	MakeDword	(x=0XA260);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA264);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA268);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA26C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA270);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA274);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA278);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA27C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA280);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA284);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA288);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA28C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA290);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA294);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA298);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA29C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2A0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2A4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2A8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2AC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2B0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2B4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2B8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2BC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2C0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2C4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2C8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2CC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2D0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2D4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2D8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA2DC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XA2E0);
	MakeArray	(0XA5A2,	0X2);
	MakeDword	(x=0XA5A4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5A8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5AC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5B0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5B4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5B8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5BC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5C0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5C4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5C8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5CC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5D0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5D4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5D8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5DC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5E0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5E4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5E8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5EC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5F0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5F4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5F8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA5FC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA600);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA604);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA608);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA60C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA610);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA614);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA618);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA61C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA620);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XA624);
	MakeRptCmt	(0XA738,	"函数返回");
	MakeArray	(0XA73A,	0X2);
	MakeDword	(x=0XA73C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA740);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA744);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA748);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA74C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA750);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA754);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA758);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA75C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA760);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA764);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA768);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XA76C);
	MakeName	(0XA76C,	"getpropertyvalue");
	MakeRptCmt	(0XA772,	"保存寄存器列表R4-R9");
	MakeRptCmt	(0XA774,	"R4为GOT表的基址");
	MakeRptCmt	(0XA782,	"__stack_chk_guard函数");
	MakeRptCmt	(0XA784,	"0x7f");
	MakeRptCmt	(0XA786,	"用于堆栈检查");
	MakeCode	(x=0XA786);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XA78C,	"R6为属性的值");
	MakeRptCmt	(0XA790,	"必须小于0x7f");
	MakeComm	(0XA794,	"c");
	MakeComm	(0XA796,	"n");
	MakeComm	(0XA798,	"s");
	MakeComm	(0XA79E,	"dest");
	MakeComm	(0XA7A0,	"src");
	MakeComm	(0XA7A2,	"n");
	MakeCode	(x=0XA7AA);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XA7BC,	"函数返回");
	MakeCode	(0XA7BE);
	MakeCode	(0XA7C4);
	MakeCode	(0XA7C8);
	MakeDword	(x=0XA7CC);
	OpOff		(x,	0,	0XA77E);
	OpOff		(x,	128,	0XA77E);
	MakeDword	(x=0XA7D0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XA7D4);
	MakeName	(0XA7D4,	"setprop_s_s_s");
	MakeCode	(x=0XA7E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA7EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA7EE);
	OpStkvar	(x,	1);
	MakeComm	(0XA7F2,	"s");
	MakeComm	(0XA7FA,	"command");
	MakeCode	(x=0XA800);
	OpStkvar	(x,	1);
	MakeCode	(0XA80C);
	MakeDword	(x=0XA810);
	OpOff		(x,	0,	0XA7E2);
	OpOff		(x,	128,	0XA7E2);
	MakeDword	(x=0XA814);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA818);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XA81C);
	OpOff		(x,	0,	0XA7F8);
	OpOff		(x,	128,	0XA7F8);
	MakeCode	(0XA820);
	MakeName	(0XA820,	"remountsystem");
	MakeComm	(0XA83A,	"data");
	MakeCode	(x=0XA840);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA844);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA84E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA858);
	OpStkvar	(x,	1);
	MakeComm	(0XA86C,	"s");
	MakeComm	(0XA870,	"stream");
	MakeComm	(0XA87A,	"delim");
	MakeComm	(0XA880,	"delim");
	MakeComm	(0XA884,	"s");
	MakeComm	(0XA88A,	"delim");
	MakeComm	(0XA88E,	"s");
	MakeComm	(0XA894,	"s2");
	MakeComm	(0XA898,	"s1");
	MakeComm	(0XA8A2,	"data");
	MakeCode	(x=0XA8A2);
	OpStkvar	(x,	1);
	MakeComm	(0XA8A4,	"dir");
	MakeComm	(0XA8A6,	"special_file");
	MakeComm	(0XA8A8,	"fstype");
	MakeComm	(0XA8AA,	"rwflag");
	MakeCode	(x=0XA8AA);
	OpStkvar	(x,	1);
	MakeComm	(0XA8B0,	"stream");
	MakeCode	(x=0XA8B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA8BC);
	OpStkvar	(x,	1);
	MakeComm	(0XA8D4,	"data");
	MakeCode	(0XA8D6);
	MakeComm	(0XA8E0,	"data");
	MakeCode	(x=0XA8E0);
	OpStkvar	(x,	1);
	MakeComm	(0XA8E4,	"special_file");
	MakeComm	(0XA8E6,	"dir");
	MakeComm	(0XA8E8,	"rwflag");
	MakeCode	(x=0XA8E8);
	OpStkvar	(x,	1);
	MakeComm	(0XA8F4,	"special_file");
	MakeComm	(0XA8F6,	"dir");
	MakeComm	(0XA8FA,	"rwflag");
	MakeCode	(x=0XA8FA);
	OpStkvar	(x,	1);
	MakeComm	(0XA8FC,	"data");
	MakeCode	(x=0XA8FC);
	OpStkvar	(x,	1);
	MakeCode	(0XA904);
	MakeDword	(x=0XA908);
	OpOff		(x,	0,	0XA838);
	OpOff		(x,	128,	0XA838);
	MakeDword	(0XA90C);
	MakeDword	(0XA910);
	MakeDword	(x=0XA914);
	OpOff		(x,	0,	0XA846);
	OpOff		(x,	128,	0XA846);
	MakeDword	(x=0XA918);
	OpOff		(x,	0,	0XA856);
	OpOff		(x,	128,	0XA856);
	MakeDword	(x=0XA91C);
	OpOff		(x,	0,	0XA86A);
	OpOff		(x,	128,	0XA86A);
	MakeDword	(x=0XA920);
	OpOff		(x,	0,	0XA86C);
	OpOff		(x,	128,	0XA86C);
	MakeDword	(x=0XA924);
	OpOff		(x,	0,	0XA8E0);
	OpOff		(x,	128,	0XA8E0);
	MakeDword	(x=0XA928);
	OpOff		(x,	0,	0XA8E2);
	OpOff		(x,	128,	0XA8E2);
	MakeDword	(x=0XA92C);
	OpOff		(x,	0,	0XA8E6);
	OpOff		(x,	128,	0XA8E6);
	MakeDword	(x=0XA930);
	OpOff		(x,	0,	0XA8FC);
	OpOff		(x,	128,	0XA8FC);
	MakeCode	(0XA934);
	MakeName	(0XA934,	"writefile1tofile2");
	MakeComm	(0XA950,	"oflag");
	MakeRptCmt	(0XA956,	"打开文件1");
	MakeComm	(0XA960,	"file");
	MakeComm	(0XA962,	"oflag");
	MakeRptCmt	(0XA966,	"打开文件2");
	MakeCode	(x=0XA96A);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XA970,	"不可以写就返回");
	MakeComm	(0XA974,	"fd");
	MakeComm	(0XA976,	"buf");
	MakeRptCmt	(0XA97A,	"读第一个文件");
	MakeComm	(0XA982,	"fd");
	MakeComm	(0XA984,	"buf");
	MakeComm	(0XA986,	"n");
	MakeRptCmt	(0XA988,	"写第2个文件");
	MakeRptCmt	(0XA98E,	"循环写");
	MakeComm	(0XA990,	"fd");
	MakeRptCmt	(0XA992,	"关文件1");
	MakeComm	(0XA996,	"fd");
	MakeRptCmt	(0XA998,	"关文件2");
	MakeRptCmt	(0XA99C,	"强制刷新");
	MakeComm	(0XA9C0,	"fd");
	MakeCode	(0XA9C0);
	MakeCode	(0XA9C8);
	MakeDword	(0XA9CC);
	MakeDword	(x=0XA9D0);
	OpOff		(x,	0,	0XA94C);
	OpOff		(x,	128,	0XA94C);
	MakeDword	(0XA9D4);
	MakeDword	(x=0XA9D8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XA9DC);
	//MakeName	(0XA9DC,	"oflag");
	MakeDword	(0XA9E0);
	MakeCode	(0XA9E4);
	MakeName	(0XA9E4,	"copyandchangegid");
	MakeRptCmt	(0XA9F8,	"获取用户组ID");
	MakeCode	(x=0XA9F8);
	OpStroffEx	(x,	1,	GetStrucIdByName("passwd"),	0);
	MakeComm	(0XAA02,	"file");
	MakeComm	(0XAA04,	"mode = u755");
	MakeComm	(0XAA0A,	"group");
	MakeComm	(0XAA0C,	"file");
	MakeComm	(0XAA0E,	"owner");
	MakeArray	(0XAA16,	0X2);
	MakeDword	(x=0XAA18);
	OpOff		(x,	0,	0XA9F2);
	OpOff		(x,	128,	0XA9F2);
	MakeDword	(0XAA1C);
	MakeName	(0XAA1C,	"mode");
	MakeCode	(0XAA20);
	MakeComm	(0XAA24,	"buf");
	MakeCode	(x=0XAA30);
	OpStkvar	(x,	1);
	MakeCode	(0XAA38);
	MakeName	(0XAA38,	"getsysfilectime");
	MakeRptCmt	(0XAA3A,	"开辟栈空间");
	MakeComm	(0XAA3C,	"c");
	MakeComm	(0XAA40,	"s");
	MakeComm	(0XAA42,	"n");
	MakeComm	(0XAA4C,	"buf");
	MakeRptCmt	(0XAA52,	"获取文件属性");
	MakeRptCmt	(0XAA56,	"0表示成功，该函数只是想取任意一个系统文件的最后修改时间");
	MakeRptCmt	(0XAA5A,	"恢复堆栈");
	MakeRptCmt	(0XAA5C,	"stat.st_ctim 即文件最后一次改变时间");
	MakeRptCmt	(0XAA5E,	"返回");
	MakeCode	(0XAA60);
	MakeComm	(0XAA62,	"buf");
	MakeComm	(0XAA70,	"buf");
	MakeArray	(0XAA7A,	0X2);
	MakeDword	(x=0XAA7C);
	OpOff		(x,	0,	0XAA4E);
	OpOff		(x,	128,	0XAA4E);
	MakeDword	(x=0XAA80);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAA84);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAA88);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XAA8C);
	MakeName	(0XAA8C,	"getnlink");
	MakeComm	(0XAA90,	"buf");
	MakeCode	(x=0XAA9E);
	OpStroffEx	(x,	1,	GetStrucIdByName("stat_type"),	0);
	MakeRptCmt	(0XAABA,	"返回");
	MakeDword	(0XAABC);
	MakeDword	(0XAAC0);
	MakeCode	(0XAAC4);
	MakeName	(0XAAC4,	"releasefile");
	MakeCode	(x=0XAAE6);
	OpStkvar	(x,	1);
	MakeComm	(0XAB0E,	"dirp");
	MakeRptCmt	(0XAB1A,	"dirent.d_name");
	MakeComm	(0XAB1C,	"s1");
	MakeComm	(0XAB1E,	"s2");
	MakeRptCmt	(0XAB20,	"判断当前目录是否为.");
	MakeComm	(0XAB28,	"s1");
	MakeComm	(0XAB2A,	"s2");
	MakeRptCmt	(0XAB2C,	"判断当前目录是否为..");
	MakeComm	(0XAB36,	"c");
	MakeComm	(0XAB3A,	"s");
	MakeComm	(0XAB40,	"s");
	MakeComm	(0XAB42,	"format");
	MakeRptCmt	(0XAB4C,	"检查进程是否被占用");
	MakeComm	(0XAB5C,	"s");
	MakeComm	(0XAB5E,	"c");
	MakeCode	(x=0XAB62);
	OpStkvar	(x,	1);
	MakeComm	(0XAB6A,	"s");
	MakeCode	(x=0XAB6A);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAB70,	"构造字符串/proc/%s/exe");
	MakeComm	(0XAB74,	"name");
	MakeCode	(x=0XAB74);
	OpStkvar	(x,	1);
	MakeComm	(0XAB76,	"type");
	MakeCode	(x=0XAB86);
	OpStkvar	(x,	1);
	MakeComm	(0XAB88,	"s");
	MakeComm	(0XAB8C,	"c");
	MakeComm	(0XAB94,	"path");
	MakeCode	(x=0XAB94);
	OpStkvar	(x,	1);
	MakeComm	(0XAB96,	"buf");
	MakeCode	(x=0XAB96);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAB9A,	"读取进程完整路径");
	MakeComm	(0XABA2,	"s1");
	MakeCode	(x=0XABA2);
	OpStkvar	(x,	1);
	MakeComm	(0XABA4,	"s2");
	MakeCode	(x=0XABA4);
	OpStkvar	(x,	1);
	MakeComm	(0XABAE,	"nptr");
	MakeComm	(0XABB4,	"sig");
	MakeRptCmt	(0XABB6,	"干掉进程");
	MakeComm	(0XABBC,	"dirp");
	MakeCode	(0XABBC);
	MakeRptCmt	(0XABE2,	"函数返回");
	MakeCode	(0XABE4);
	MakeDword	(x=0XABE8);
	OpOff		(x,	0,	0XAADC);
	OpOff		(x,	128,	0XAADC);
	MakeDword	(0XABEC);
	MakeDword	(0XABF0);
	MakeDword	(0XABF4);
	MakeDword	(x=0XABF8);
	OpOff		(x,	0,	0XAAF4);
	OpOff		(x,	128,	0XAAF4);
	MakeDword	(0XABFC);
	MakeDword	(x=0XAC00);
	OpOff		(x,	0,	0XAB10);
	OpOff		(x,	128,	0XAB10);
	MakeDword	(x=0XAC04);
	OpOff		(x,	0,	0XAB0A);
	OpOff		(x,	128,	0XAB0A);
	MakeDword	(x=0XAC08);
	OpOff		(x,	0,	0XAB0C);
	OpOff		(x,	128,	0XAB0C);
	MakeDword	(x=0XAC0C);
	OpOff		(x,	0,	0XAB72);
	OpOff		(x,	128,	0XAB72);
	MakeDword	(0XAC10);
	MakeCode	(0XAC14);
	MakeName	(0XAC14,	"write_rsid_log");
	MakeComm	(0XAC20,	"modes");
	MakeComm	(0XAC2E,	"stream");
	MakeRptCmt	(0XAC34,	"往.rsid_log文件中写内容");
	MakeComm	(0XAC38,	"stream");
	MakeDword	(x=0XAC40);
	OpOff		(x,	0,	0XAC20);
	OpOff		(x,	128,	0XAC20);
	MakeDword	(x=0XAC44);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAC48);
	OpOff		(x,	0,	0XAC24);
	OpOff		(x,	128,	0XAC24);
	MakeDword	(x=0XAC4C);
	OpOff		(x,	0,	0XAC36);
	OpOff		(x,	128,	0XAC36);
	MakeCode	(0XAC50);
	MakeName	(0XAC50,	"write.rsid_log");
	MakeComm	(0XAC66,	"type");
	MakeCode	(x=0XAC6A);
	OpStkvar	(x,	1);
	MakeComm	(0XAC70,	"name");
	MakeRptCmt	(0XAC78,	"文件可访问，赶紧备份一个");
	MakeCode	(x=0XAC7E);
	OpStkvar	(x,	1);
	MakeCode	(0XAC8A);
	MakeRptCmt	(0XAC96,	"函数返回");
	MakeCode	(0XAC98);
	MakeRptCmt	(0XAC9A,	".rsid_log");
	MakeRptCmt	(0XACA0,	".rsid_log.1");
	MakeRptCmt	(0XACA4,	"写入.rsid_log到.rsid_log.1");
	MakeRptCmt	(0XACA8,	"'w'");
	MakeComm	(0XACAA,	"filename");
	MakeComm	(0XACAC,	"modes");
	MakeRptCmt	(0XACAE,	"打开.rsid_log");
	MakeComm	(0XACB6,	"filename");
	MakeRptCmt	(0XACBA,	"打开.rsid_log.1");
	MakeCode	(x=0XACCA);
	OpStkvar	(x,	1);
	MakeComm	(0XACCE,	"s");
	MakeRptCmt	(0XACD0,	"0x100");
	MakeComm	(0XACD2,	"stream");
	MakeRptCmt	(0XACD4,	"读文件");
	MakeRptCmt	(0XACE4,	"必须大于2字节");
	MakeComm	(0XACE8,	"stream");
	MakeComm	(0XACEE,	"stream");
	MakeComm	(0XACF6,	"name");
	MakeRptCmt	(0XACF8,	"删除.rsid_log.1");
	MakeCode	(0XACFE);
	MakeComm	(0XAD00,	"s 读的文件内容");
	MakeComm	(0XAD04,	"delim");
	MakeCode	(x=0XAD06);
	OpStkvar	(x,	1);
	MakeComm	(0XAD10,	"delim");
	MakeCode	(x=0XAD10);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAD12);
	OpStkvar	(x,	1);
	MakeComm	(0XAD14,	"s");
	MakeComm	(0XAD1C,	"n");
	MakeCode	(x=0XAD24);
	OpStkvar	(x,	1);
	MakeComm	(0XAD26,	"c");
	MakeComm	(0XAD28,	"s");
	MakeComm	(0XAD2E,	"src");
	MakeCode	(x=0XAD2E);
	OpStkvar	(x,	1);
	MakeComm	(0XAD30,	"dest");
	MakeComm	(0XAD36,	"s");
	MakeComm	(0XAD48,	"s");
	MakeCode	(0XAD48);
	MakeComm	(0XAD4A,	"stream");
	MakeRptCmt	(0XAD4C,	"写.rsid_log");
	MakeComm	(0XAD52,	"s");
	MakeRptCmt	(0XAD54,	"0x100");
	MakeComm	(0XAD56,	"stream");
	MakeRptCmt	(0XAD58,	"读文件");
	MakeCode	(x=0XAD60);
	OpStkvar	(x,	1);
	MakeCode	(0XAD6E);
	MakeComm	(0XAD72,	"stream");
	MakeRptCmt	(0XAD7A,	"写文件");
	MakeCode	(0XAD80);
	MakeCode	(0XAD84);
	MakeComm	(0XAD88,	"stream");
	MakeCode	(0XAD88);
	MakeDword	(x=0XAD90);
	OpOff		(x,	0,	0XAC66);
	OpOff		(x,	128,	0XAC66);
	MakeDword	(x=0XAD94);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAD98);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAD9C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XADA0);
	OpOff		(x,	0,	0XACB0);
	OpOff		(x,	128,	0XACB0);
	MakeDword	(x=0XADA4);
	OpOff		(x,	0,	0XACBC);
	OpOff		(x,	128,	0XACBC);
	MakeDword	(x=0XADA8);
	OpOff		(x,	0,	0XAD06);
	OpOff		(x,	128,	0XAD06);
	MakeDword	(x=0XADAC);
	OpOff		(x,	0,	0XAD26);
	OpOff		(x,	128,	0XAD26);
	MakeDword	(x=0XADB0);
	OpOff		(x,	0,	0XAD6E);
	OpOff		(x,	128,	0XAD6E);
	MakeDword	(x=0XADB4);
	OpOff		(x,	0,	0XAD78);
	OpOff		(x,	128,	0XAD78);
	MakeDword	(x=0XADB8);
	OpOff		(x,	0,	0XAD7A);
	OpOff		(x,	128,	0XAD7A);
	MakeCode	(0XADBC);
	MakeName	(0XADBC,	"duphttp_serverstring");
	MakeRptCmt	(0XADC6,	"R6指向GOT首地址");
	MakeRptCmt	(0XADC8,	"端口");
	MakeRptCmt	(0XADCA,	"参数1");
	MakeRptCmt	(0XADCE,	"http_port");
	MakeRptCmt	(0XADDA,	"http_server");
	MakeComm	(0XADDE,	"ptr");
	MakeRptCmt	(0XADE4,	"释放http_server字符串占用的内存");
	MakeRptCmt	(0XADEA,	"ptr = NULL");
	MakeComm	(0XADEC,	"ptr");
	MakeRptCmt	(0XADF8,	"ptr = NULL");
	MakeComm	(0XADFC,	"s2");
	MakeComm	(0XADFE,	"n");
	MakeRptCmt	(0XAE02,	"比较参数1字符串前7个字符是否为http://");
	MakeRptCmt	(0XAE08,	"不相同就嗝屁");
	MakeCode	(x=0XAE10);
	OpChr		(x,	1);
	MakeCode	(x=0XAE18);
	OpChr		(x,	1);
	MakeCode	(x=0XAE20);
	OpChr		(x,	1);
	MakeCode	(x=0XAE2E);
	OpChr		(x,	1);
	MakeComm	(0XAE32,	"s");
	MakeComm	(0XAE46,	"s");
	MakeRptCmt	(0XAE58,	"函数返回");
	MakeCode	(0XAE5A);
	MakeCode	(0XAE62);
	MakeRptCmt	(0XAE64,	"R0 = -12");
	MakeCode	(0XAE68);
	MakeComm	(0XAE70,	"s");
	MakeCode	(0XAE7E);
	MakeRptCmt	(0XAE82,	"\"content-length: %d\"");
	MakeCode	(0XAE82);
	MakeComm	(0XAE88,	"format");
	MakeComm	(0XAE8A,	"s");
	MakeCode	(0XAE9A);
	MakeCode	(x=0XAE9E);
	OpChr		(x,	1);
	MakeCode	(0XAEA8);
	MakeDword	(x=0XAEB0);
	OpOff		(x,	0,	0XADD0);
	OpOff		(x,	128,	0XADD0);
	MakeDword	(x=0XAEB4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAEB8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XAEBC);
	OpOff		(x,	0,	0XAE04);
	OpOff		(x,	128,	0XAE04);
	MakeDword	(x=0XAEC0);
	OpOff		(x,	0,	0XAE48);
	OpOff		(x,	128,	0XAE48);
	MakeDword	(x=0XAEC4);
	OpOff		(x,	0,	0XAE8C);
	OpOff		(x,	128,	0XAE8C);
	MakeCode	(0XAEC8);
	MakeName	(0XAEC8,	"readsocket");
	MakeComm	(0XAED2,	"fd");
	MakeComm	(0XAED4,	"buf");
	MakeComm	(0XAED6,	"nbytes");
	MakeCode	(0XAEFA);
	MakeArray	(0XAEFE,	0X2);
	MakeDword	(0XAF00);
	MakeCode	(0XAF04);
	MakeName	(0XAF04,	"connectCCServer");
	MakeRptCmt	(0XAF18,	"R4指向GOT首地址");
	MakeCode	(x=0XAF1A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAF1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAF22);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAF24,	"代理服务器");
	MakeCode	(x=0XAF28);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAF2C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAF30);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAF34,	"判断代理服务器是否为空");
	MakeRptCmt	(0XAF38,	"代理服务器端口");
	MakeRptCmt	(0XAF40,	"代理服务器端口是否为空");
	MakeRptCmt	(0XAF44,	"服务器端口");
	MakeRptCmt	(0XAF4A,	"R8为服务器端口");
	MakeRptCmt	(0XAF56,	"R3=-1");
	MakeRptCmt	(0XAF60,	"服务器地址");
	MakeComm	(0XAF64,	"name");
	MakeRptCmt	(0XAF6A,	"获取主机地址信息");
	MakeRptCmt	(0XAF6E,	"返回一个hostent结构体指针");
	MakeRptCmt	(0XAF74,	"R0=-1");
	MakeCode	(x=0XAF78);
	OpStkvar	(x,	1);
	MakeCode	(0XAF82);
	MakeRptCmt	(0XAF86,	"恢复SP");
	MakeRptCmt	(0XAF90,	"恢复R8-R11寄存器");
	MakeRptCmt	(0XAF92,	"恢复R4-R7寄存器并返回");
	MakeCode	(0XAF94);
	MakeCode	(0XAF9A);
	MakeRptCmt	(0XAF9C,	"R9 = 1表示使用代理来发送数据");
	MakeCode	(0XAFA0);
	MakeCode	(0XAFA6);
	MakeCode	(x=0XAFAE);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAFB0,	"初始化sockaddr结构体");
	MakeCode	(x=0XAFB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAFB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAFB4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAFB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XAFB8);
	OpStroffEx	(x,	1,	GetStrucIdByName("hostent"),	0);
	MakeComm	(0XAFBA,	"n");
	MakeCode	(x=0XAFBA);
	OpStroffEx	(x,	1,	GetStrucIdByName("hostent"),	0);
	MakeComm	(0XAFBC,	"dest");
	MakeCode	(x=0XAFBC);
	OpStkvar	(x,	1);
	MakeComm	(0XAFBE,	"src");
	MakeRptCmt	(0XAFC0,	"拷贝的内存为IP地址列表");
	MakeCode	(x=0XAFC4);
	OpStroffEx	(x,	1,	GetStrucIdByName("hostent"),	0);
	MakeCode	(x=0XAFC6);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAFCE,	"R8为服务器端口");
	MakeCode	(x=0XAFD0);
	OpDecimal	(x,	1);
	MakeRptCmt	(0XAFD2,	"R2 = ((R2 << 16) >> 8)");
	MakeRptCmt	(0XAFD4,	"R3 = ((R2 << 16) >> 24)");
	MakeCode	(x=0XAFD4);
	OpDecimal	(x,	1);
	MakeRptCmt	(0XAFD6,	"更改端口的网络字符序");
	MakeCode	(x=0XAFD8);
	OpDecimal	(x,	1);
	MakeComm	(0XAFDC,	"protocol");
	MakeRptCmt	(0XAFDE,	"注意了！！建立Socket准备连接C&C服务器了");
	MakeRptCmt	(0XAFE2,	"R6为socket句柄");
	MakeComm	(0XAFE6,	"optval");
	MakeComm	(0XAFE8,	"level");
	MakeComm	(0XAFEA,	"optname");
	MakeComm	(0XAFEC,	"fd");
	MakeComm	(0XAFEE,	"optlen");
	MakeCode	(x=0XAFEE);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XAFF0,	"设置Socket选项");
	MakeComm	(0XAFF4,	"fd");
	MakeComm	(0XAFF6,	"addr");
	MakeCode	(x=0XAFF6);
	OpStkvar	(x,	1);
	MakeComm	(0XAFF8,	"len");
	MakeRptCmt	(0XAFFA,	"开始连接了！！");
	MakeRptCmt	(0XB000,	"连接失败了");
	MakeRptCmt	(0XB006,	"R6为socket句柄");
	MakeRptCmt	(0XB008,	"R9表示是否使用代理来发送数据");
	MakeRptCmt	(0XB00C,	"不需要代理");
	MakeCode	(x=0XB018);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB020);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB024);
	OpStkvar	(x,	1);
	MakeComm	(0XB028,	"s");
	MakeCode	(x=0XB02E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB032);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB034);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB036,	"构造要发送的数据，注意：字符串中有指定代理服务器");
	MakeComm	(0XB03A,	"s");
	MakeRptCmt	(0XB03C,	"要发送的字符串长度");
	MakeComm	(0XB042,	"buf");
	MakeComm	(0XB044,	"fd");
	MakeComm	(0XB046,	"n");
	MakeRptCmt	(0XB048,	"发送出去了！！");
	MakeRptCmt	(0XB04C,	"发送的字节数不对");
	MakeCode	(x=0XB054);
	OpStkvar	(x,	1);
	MakeComm	(0XB056,	"fd");
	MakeCode	(x=0XB05C);
	OpStkvar	(x,	1);
	MakeCode	(0XB060);
	MakeRptCmt	(0XB062,	"R3=-3");
	MakeCode	(x=0XB064);
	OpStkvar	(x,	1);
	MakeCode	(0XB068);
	MakeRptCmt	(0XB06A,	"R0=-2");
	MakeCode	(0XB06E);
	MakeCode	(x=0XB072);
	OpStkvar	(x,	1);
	MakeComm	(0XB07A,	"s");
	MakeCode	(x=0XB07C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB080);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB082);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB086,	"构造要发送的数据");
	MakeRptCmt	(0XB08A,	"发送数据");
	MakeComm	(0XB08C,	"n");
	MakeCode	(x=0XB08C);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB092,	"函数参数指定的要发送的数据");
	MakeCode	(x=0XB092);
	OpStkvar	(x,	1);
	MakeComm	(0XB098,	"fd");
	MakeComm	(0XB09A,	"buf");
	MakeRptCmt	(0XB09C,	"发送数据");
	MakeCode	(x=0XB0A0);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB0A2,	"发送的字节数对不对");
	MakeRptCmt	(0XB0A8,	"R3=-5");
	MakeCode	(x=0XB0AA);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB0AC,	"送闭socket");
	MakeCode	(0XB0AE);
	MakeCode	(x=0XB0B6);
	OpStkvar	(x,	1);
	MakeComm	(0XB0BE,	"s");
	MakeCode	(x=0XB0C0);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB0C4,	"格式化返回的数据");
	MakeRptCmt	(0XB0CE,	"R3=-7");
	MakeCode	(x=0XB0D0);
	OpStkvar	(x,	1);
	MakeCode	(0XB0D4);
	MakeRptCmt	(0XB0D6,	"R3=-6");
	MakeCode	(x=0XB0D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB0DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB0E2);
	OpStkvar	(x,	1);
	MakeCode	(0XB0E6);
	MakeArray	(0XB0EA,	0X2);
	MakeDword	(0XB0EC);
	MakeDword	(x=0XB0F0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB0F4);
	OpOff		(x,	0,	0XAF22);
	OpOff		(x,	128,	0XAF22);
	MakeDword	(x=0XB0F8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB0FC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB100);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB104);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB108);
	OpOff		(x,	0,	0XAFA6);
	OpOff		(x,	128,	0XAFA6);
	MakeDword	(x=0XB10C);
	OpOff		(x,	0,	0XB022);
	OpOff		(x,	128,	0XB022);
	MakeDword	(x=0XB110);
	OpOff		(x,	0,	0XB02E);
	OpOff		(x,	128,	0XB02E);
	MakeDword	(x=0XB114);
	OpOff		(x,	0,	0XB078);
	OpOff		(x,	128,	0XB078);
	MakeDword	(x=0XB118);
	OpOff		(x,	0,	0XB07C);
	OpOff		(x,	128,	0XB07C);
	MakeDword	(x=0XB11C);
	OpOff		(x,	0,	0XB0C6);
	OpOff		(x,	128,	0XB0C6);
	MakeCode	(0XB120);
	MakeName	(0XB120,	"CCCommand");
	MakeCode	(x=0XB13C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB142);
	OpStkvar	(x,	1);
	MakeCode	(0XB152);
	MakeRptCmt	(0XB154,	"R3 = -1");
	MakeCode	(x=0XB156);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB15E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB174);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB176);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB178);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB17A);
	OpStkvar	(x,	1);
	MakeComm	(0XB17E,	"int");
	MakeComm	(0XB182,	"n");
	MakeRptCmt	(0XB186,	"连接C&C服务器");
	MakeCode	(x=0XB18A);
	OpDecimal	(x,	1);
	MakeCode	(x=0XB194);
	OpDecimal	(x,	1);
	MakeRptCmt	(0XB196,	"200");
	MakeComm	(0XB19C,	"fd");
	MakeCode	(x=0XB19C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB1A2);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB1B0,	"检查堆栈");
	MakeCode	(0XB1B6);
	MakeRptCmt	(0XB1C4,	"函数返回");
	MakeCode	(0XB1C6);
	MakeCode	(x=0XB1C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB1CC);
	OpStkvar	(x,	1);
	MakeComm	(0XB1D8,	"s1");
	MakeComm	(0XB1DA,	"s2");
	MakeComm	(0XB1DC,	"n");
	MakeRptCmt	(0XB1DE,	"判断是否为字符串“Location”");
	MakeCode	(x=0XB1E6);
	OpStkvar	(x,	1);
	MakeComm	(0XB1EA,	"c");
	MakeCode	(x=0XB1EE);
	OpStkvar	(x,	1);
	MakeComm	(0XB1F2,	"s");
	MakeComm	(0XB1F8,	"s");
	MakeComm	(0XB202,	"n");
	MakeComm	(0XB204,	"src");
	MakeComm	(0XB206,	"dest");
	MakeComm	(0XB20C,	"fd");
	MakeCode	(x=0XB20C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB214);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB226);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB228);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB22A);
	OpStkvar	(x,	1);
	MakeComm	(0XB22E,	"int");
	MakeComm	(0XB230,	"n");
	MakeCode	(x=0XB230);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB234,	"连接C&C服务器");
	MakeCode	(x=0XB23A);
	OpDecimal	(x,	1);
	MakeCode	(x=0XB242);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB24A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB252);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB254,	"读socket");
	MakeComm	(0XB256,	"s");
	MakeCode	(0XB256);
	MakeComm	(0XB258,	"format");
	MakeCode	(x=0XB264);
	OpStkvar	(x,	1);
	MakeComm	(0XB296,	"s");
	MakeComm	(0XB298,	"format");
	MakeComm	(0XB2A4,	"format");
	MakeCode	(x=0XB2A4);
	OpStkvar	(x,	1);
	MakeComm	(0XB2A6,	"s");
	MakeCode	(x=0XB2AE);
	OpStkvar	(x,	1);
	MakeComm	(0XB2BA,	"fd");
	MakeCode	(x=0XB2BA);
	OpStkvar	(x,	1);
	MakeCode	(0XB2C6);
	MakeRptCmt	(0XB2C8,	"R7 = -8");
	MakeComm	(0XB2CC,	"size");
	MakeCode	(x=0XB2CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB2D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB2E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB2EA);
	OpStkvar	(x,	1);
	MakeCode	(0XB302);
	MakeComm	(0XB30A,	"nbytes");
	MakeComm	(0XB30C,	"fd");
	MakeComm	(0XB30E,	"buf");
	MakeCode	(x=0XB318);
	OpStkvar	(x,	1);
	MakeComm	(0XB322,	"fd");
	MakeCode	(x=0XB328);
	OpStkvar	(x,	1);
	MakeCode	(0XB330);
	MakeCode	(x=0XB336);
	OpStkvar	(x,	1);
	MakeCode	(0XB340);
	MakeComm	(0XB344,	"fd");
	MakeCode	(x=0XB344);
	OpStkvar	(x,	1);
	MakeComm	(0XB350,	"fd");
	MakeCode	(x=0XB350);
	OpStkvar	(x,	1);
	MakeDword	(x=0XB35C);
	OpOff		(x,	0,	0XB138);
	OpOff		(x,	128,	0XB138);
	MakeDword	(x=0XB360);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XB364);
	MakeDword	(0XB368);
	MakeDword	(x=0XB36C);
	OpOff		(x,	0,	0XB180);
	OpOff		(x,	128,	0XB180);
	MakeDword	(x=0XB370);
	OpOff		(x,	0,	0XB182);
	OpOff		(x,	128,	0XB182);
	MakeDword	(0XB374);
	MakeDword	(x=0XB378);
	OpOff		(x,	0,	0XB1CE);
	OpOff		(x,	128,	0XB1CE);
	MakeDword	(0XB37C);
	MakeDword	(x=0XB380);
	OpOff		(x,	0,	0XB230);
	OpOff		(x,	128,	0XB230);
	MakeDword	(x=0XB384);
	OpOff		(x,	0,	0XB232);
	OpOff		(x,	128,	0XB232);
	MakeDword	(0XB388);
	MakeDword	(x=0XB38C);
	OpOff		(x,	0,	0XB252);
	OpOff		(x,	128,	0XB252);
	MakeDword	(x=0XB390);
	OpOff		(x,	0,	0XB250);
	OpOff		(x,	128,	0XB250);
	MakeCode	(0XB394);
	MakeComm	(0XB39A,	"buf");
	MakeCode	(x=0XB3A8);
	OpStroffEx	(x,	1,	GetStrucIdByName("stat_type"),	0);
	MakeRptCmt	(0XB3CA,	"函数返回");
	MakeCode	(0XB3CC);
	MakeCode	(x=0XB3DE);
	OpStkvar	(x,	1);
	MakeCode	(0XB40C);
	MakeCode	(x=0XB40E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB41C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB430);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB43A);
	OpStkvar	(x,	1);
	MakeCode	(0XB43E);
	MakeDword	(0XB44C);
	MakeDword	(x=0XB450);
	OpOff		(x,	0,	0XB408);
	OpOff		(x,	128,	0XB408);
	MakeDword	(0XB454);
	MakeCode	(0XB458);
	MakeCode	(x=0XB472);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB476);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB478);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB47A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB47C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB47E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB482);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB486);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB488);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB48A);
	OpStkvar	(x,	1);
	MakeCode	(0XB508);
	MakeCode	(x=0XB518);
	OpStkvar	(x,	1);
	MakeComm	(0XB51E,	"c");
	MakeCode	(x=0XB524);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB526);
	OpStkvar	(x,	1);
	MakeComm	(0XB536,	"s");
	MakeCode	(x=0XB542);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB544);
	OpStkvar	(x,	1);
	MakeCode	(0XB55C);
	MakeCode	(x=0XB562);
	OpStkvar	(x,	1);
	MakeCode	(0XB56A);
	MakeCode	(x=0XB570);
	OpStkvar	(x,	1);
	MakeCode	(0XB578);
	MakeComm	(0XB57E,	"nptr");
	MakeComm	(0XB594,	"status");
	MakeCode	(0XB594);
	MakeArray	(0XB59A,	0X2);
	MakeDword	(x=0XB59C);
	OpOff		(x,	0,	0XB46E);
	OpOff		(x,	128,	0XB46E);
	MakeDword	(0XB5A0);
	MakeDword	(0XB5A4);
	MakeCode	(0XB5A8);
	MakeName	(0XB5A8,	"subIattr");
	MakeCode	(x=0XB5B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB5B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB5C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB5C4);
	OpStkvar	(x,	1);
	MakeArray	(0XB5CE,	0X2);
	MakeDword	(x=0XB5D0);
	OpOff		(x,	0,	0XB5B4);
	OpOff		(x,	128,	0XB5B4);
	MakeDword	(x=0XB5D4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB5D8);
	OpOff		(x,	0,	0XB5C2);
	OpOff		(x,	128,	0XB5C2);
	MakeCode	(0XB5DC);
	MakeName	(0XB5DC,	"addIattr");
	MakeCode	(x=0XB5E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB5EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB5F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB5F8);
	OpStkvar	(x,	1);
	MakeArray	(0XB602,	0X2);
	MakeDword	(x=0XB604);
	OpOff		(x,	0,	0XB5E8);
	OpOff		(x,	128,	0XB5E8);
	MakeDword	(x=0XB608);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XB60C);
	OpOff		(x,	0,	0XB5F6);
	OpOff		(x,	128,	0XB5F6);
	MakeCode	(0XB610);
	MakeName	(0XB610,	"__malloc");
	MakeCode	(0XB61E);
	MakeComm	(0XB622,	"status");
	MakeCode	(0XB628);
	MakeName	(0XB628,	"__vasprintf");
	MakeCode	(x=0XB62E);
	OpStkvar	(x,	1);
	MakeComm	(0XB632,	"char **");
	MakeCode	(x=0XB634);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB63E);
	OpStkvar	(x,	1);
	MakeComm	(0XB648,	"status");
	MakeCode	(0XB648);
	MakeArray	(0XB64E,	0X2);
	MakeCode	(0XB650);
	MakeComm	(0XB65A,	"s");
	MakeCode	(0XB65E);
	MakeCode	(0XB668);
	MakeArray	(0XB67A,	0X2);
	MakeCode	(0XB67C);
	MakeCode	(0XB6B2);
	MakeCode	(0XB6B8);
	MakeArray	(0XB6BE,	0X2);
	MakeDword	(x=0XB6C0);
	OpOff		(x,	0,	0XB6A6);
	OpOff		(x,	128,	0XB6A6);
	MakeDword	(x=0XB6C4);
	OpOff		(x,	0,	0XB6AE);
	OpOff		(x,	128,	0XB6AE);
	MakeDword	(x=0XB6C8);
	OpOff		(x,	0,	0XB6B8);
	OpOff		(x,	128,	0XB6B8);
	MakeDword	(x=0XB6CC);
	OpOff		(x,	0,	0XB6BE);
	OpOff		(x,	128,	0XB6BE);
	MakeCode	(0XB6D0);
	MakeCode	(0XB6E2);
	MakeArray	(0XB6F6,	0X2);
	MakeCode	(0XB6F8);
	MakeComm	(0XB70E,	"ptr");
	MakeCode	(0XB718);
	MakeName	(0XB718,	"seterrno");
	MakeComm	(0XB722,	"fd");
	MakeCode	(0XB730);
	MakeName	(0XB730,	"__ioctl");
	MakeCode	(x=0XB734);
	OpStkvar	(x,	1);
	MakeComm	(0XB738,	"buf");
	MakeCode	(x=0XB73C);
	OpStkvar	(x,	1);
	MakeCode	(0XB770);
	MakeComm	(0XB772,	"file");
	MakeComm	(0XB786,	"request");
	MakeComm	(0XB798,	"request");
	MakeCode	(0XB798);
	MakeCode	(x=0XB79A);
	OpStkvar	(x,	1);
	MakeDword	(0XB7A4);
	MakeName	(0XB7A4,	"request");
	MakeDword	(0XB7A8);
	MakeCode	(0XB7AC);
	MakeName	(0XB7AC,	"__ioctl2");
	MakeCode	(x=0XB7B6);
	OpStkvar	(x,	1);
	MakeComm	(0XB7C8,	"request");
	MakeComm	(0XB7DE,	"request");
	MakeCode	(0XB7DE);
	MakeCode	(x=0XB7E0);
	OpStkvar	(x,	1);
	MakeArray	(0XB7EA,	0X2);
	MakeDword	(0XB7EC);
	MakeDword	(0XB7F0);
	MakeCode	(0XB7F4);
	MakeComm	(0XB800,	"size_t");
	MakeComm	(0XB80A,	"c");
	MakeComm	(0XB80C,	"n");
	MakeComm	(0XB814,	"name");
	MakeComm	(0XB828,	"n");
	MakeCode	(0XB828);
	MakeComm	(0XB82C,	"dest");
	MakeComm	(0XB83A,	"dirp");
	MakeComm	(0XB840,	"src");
	MakeComm	(0XB852,	"dirp");
	MakeCode	(0XB852);
	MakeComm	(0XB858,	"ptr");
	MakeRptCmt	(0XB868,	"函数返回");
	MakeComm	(0XB86A,	"ptr");
	MakeCode	(0XB86A);
	MakeArray	(0XB876,	0X2);
	MakeDword	(0XB878);
	MakeName	(0XB878,	"n");
	MakeDword	(0XB87C);
	MakeCode	(0XB880);
	MakeName	(0XB880,	"checkrun");
	MakeRptCmt	(0XB88A,	"保存R4-R11寄存器");
	MakeRptCmt	(0XB88C,	"GOT首地址");
	MakeRptCmt	(0XB892,	"R8 = R3");
	MakeCode	(x=0XB896);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB89A,	"R0 = R8");
	MakeRptCmt	(0XB8A0,	"第3个参数");
	MakeCode	(x=0XB8A0);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB8A2,	"感染的文件列表");
	MakeCode	(x=0XB8AA);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XB8AE,	"第2个参数");
	MakeRptCmt	(0XB8B0,	"分3次将感染的文件名复制到R3寄存器指向的内存空间");
	MakeRptCmt	(0XB8BC,	"第2个参数");
	MakeComm	(0XB8C0,	"c");
	MakeCode	(x=0XB8C0);
	OpChr		(x,	1);
	MakeComm	(0XB8C2,	"s");
	MakeRptCmt	(0XB8CC,	"指向'/'下一个字符");
	MakeComm	(0XB8D2,	"s2");
	MakeComm	(0XB8D4,	"s1");
	MakeCode	(x=0XB8F0);
	OpStkvar	(x,	1);
	MakeCode	(0XB8FA);
	MakeRptCmt	(0XB906,	"函数返回");
	MakeCode	(0XB908);
	MakeRptCmt	(0XB91A,	"fork失败");
	MakeRptCmt	(0XB920,	"以下为子进程");
	MakeCode	(x=0XB922);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB92C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB936);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB94A);
	OpStkvar	(x,	1);
	MakeComm	(0XB958,	"s");
	MakeCode	(x=0XB958);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB960);
	OpStkvar	(x,	1);
	MakeCode	(0XB972);
	MakeCode	(x=0XB978);
	OpStkvar	(x,	1);
	MakeComm	(0XB97E,	"path");
	MakeComm	(0XB980,	"argv");
	MakeComm	(0XB982,	"envp");
	MakeCode	(x=0XB982);
	OpStkvar	(x,	1);
	MakeComm	(0XB988,	"status");
	MakeCode	(x=0XB98E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9B0);
	OpStkvar	(x,	1);
	MakeComm	(0XB9BC,	"needle");
	MakeComm	(0XB9BE,	"haystack");
	MakeCode	(x=0XB9CE);
	OpStkvar	(x,	1);
	MakeComm	(0XB9D0,	"haystack");
	MakeComm	(0XB9D2,	"needle");
	MakeCode	(x=0XB9DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB9EE);
	OpStkvar	(x,	1);
	MakeCode	(0XB9F6);
	MakeCode	(0XB9FA);
	MakeComm	(0XB9FE,	"status");
	MakeCode	(0XB9FE);
	MakeCode	(0XBA04);
	MakeComm	(0XBA14,	"s");
	MakeCode	(x=0XBA16);
	OpStkvar	(x,	1);
	MakeCode	(0XBA20);
	MakeComm	(0XBA2A,	"s");
	MakeCode	(x=0XBA30);
	OpStkvar	(x,	1);
	MakeComm	(0XBA36,	"name");
	MakeCode	(x=0XBA36);
	OpStkvar	(x,	1);
	MakeComm	(0XBA38,	"type");
	MakeComm	(0XBA48,	"src");
	MakeComm	(0XBA4A,	"dest");
	MakeCode	(x=0XBA4A);
	OpStkvar	(x,	1);
	MakeArray	(0XBA56,	0X2);
	MakeDword	(x=0XBA58);
	OpOff		(x,	0,	0XB898);
	OpOff		(x,	128,	0XB898);
	MakeDword	(0XBA5C);
	MakeDword	(x=0XBA60);
	OpOff		(x,	0,	0XB8AC);
	OpOff		(x,	128,	0XB8AC);
	MakeDword	(0XBA64);
	MakeDword	(x=0XBA68);
	OpOff		(x,	0,	0XB958);
	OpOff		(x,	128,	0XB958);
	MakeDword	(0XBA6C);
	MakeDword	(0XBA70);
	MakeDword	(x=0XBA74);
	OpOff		(x,	0,	0XBA14);
	OpOff		(x,	128,	0XBA14);
	MakeDword	(0XBA78);
	MakeDword	(x=0XBA7C);
	OpOff		(x,	0,	0XBA32);
	OpOff		(x,	128,	0XBA32);
	MakeDword	(0XBA80);
	MakeCode	(0XBA84);
	MakeName	(0XBA84,	"settime");
	MakeCode	(x=0XBA88);
	OpStkvar	(x,	1);
	MakeComm	(0XBA8E,	"tz");
	MakeComm	(0XBA90,	"tv");
	MakeCode	(x=0XBA94);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBA96);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBA98);
	OpStkvar	(x,	1);
	MakeComm	(0XBAA0,	"tv");
	MakeComm	(0XBAA2,	"tz");
	MakeCode	(x=0XBAA4);
	OpStkvar	(x,	1);
	MakeArray	(0XBAAE,	0X2);
	MakeCode	(0XBAB0);
	MakeName	(0XBAB0,	"copy2frameworkdir");
	MakeCode	(x=0XBACA);
	OpStkvar	(x,	1);
	MakeComm	(0XBAD2,	"c");
	MakeComm	(0XBAD8,	"s");
	MakeCode	(x=0XBAE6);
	OpStkvar	(x,	1);
	MakeComm	(0XBAEA,	"c");
	MakeComm	(0XBAEE,	"s");
	MakeComm	(0XBAF8,	"s");
	MakeRptCmt	(0XBB06,	"让目录可写");
	MakeComm	(0XBB0A,	"timer");
	MakeComm	(0XBB1C,	"name");
	MakeComm	(0XBB1E,	"type");
	MakeRptCmt	(0XBB2C,	"复制文件");
	MakeRptCmt	(0XBB38,	"如果程序在运行，就kill掉");
	MakeRptCmt	(0XBB56,	"让目录只读");
	MakeCode	(x=0XBB5C);
	OpStkvar	(x,	1);
	MakeCode	(0XBB72);
	MakeCode	(0XBB76);
	MakeArray	(0XBB7A,	0X2);
	MakeDword	(0XBB7C);
	MakeDword	(x=0XBB80);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBB84);
	OpOff		(x,	0,	0XBAC8);
	OpOff		(x,	128,	0XBAC8);
	MakeDword	(x=0XBB88);
	OpOff		(x,	0,	0XBAD8);
	OpOff		(x,	128,	0XBAD8);
	MakeDword	(x=0XBB8C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBB90);
	OpOff		(x,	0,	0XBB00);
	OpOff		(x,	128,	0XBB00);
	MakeDword	(x=0XBB94);
	OpOff		(x,	0,	0XBB16);
	OpOff		(x,	128,	0XBB16);
	MakeDword	(x=0XBB98);
	OpOff		(x,	0,	0XBB50);
	OpOff		(x,	128,	0XBB50);
	MakeCode	(0XBB9C);
	MakeName	(0XBB9C,	"rewritefile");
	MakeRptCmt	(0XBBA0,	"要写入的文件");
	MakeRptCmt	(0XBBA2,	"R6 = 0");
	MakeRptCmt	(0XBBA4,	"/data/.bootemp");
	MakeCode	(x=0XBBAA);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBBAE,	"重新挂载系统分区为可读写");
	MakeComm	(0XBBB2,	"timer");
	MakeCode	(x=0XBBB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBBBA);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBBBC,	"设置一下时间");
	MakeRptCmt	(0XBBC0,	"要写入的文件");
	MakeRptCmt	(0XBBC2,	"去掉系统属性好删除啊");
	MakeComm	(0XBBC6,	"name");
	MakeRptCmt	(0XBBC8,	"删除");
	MakeRptCmt	(0XBBCC,	"强制刷新");
	MakeRptCmt	(0XBBDC,	"将/data/.bootemp的内容写入要感染的文件");
	MakeComm	(0XBBE2,	"file");
	MakeRptCmt	(0XBBE4,	"R1 = U644");
	MakeRptCmt	(0XBBE6,	"设置为大家都可读写");
	MakeRptCmt	(0XBBEC,	"加上系统属性");
	MakeRptCmt	(0XBBF2,	"再次设置一下时间，目的是不改变被感染文件的最后访问时间");
	MakeRptCmt	(0XBBF8,	"重新挂载系统分区为只读");
	MakeRptCmt	(0XBC00,	"/data/.bootemp");
	MakeCode	(0XBC00);
	MakeRptCmt	(0XBC02,	"被感染文件");
	MakeRptCmt	(0XBC04,	"拷贝文件并更改用户组ID");
	MakeArray	(0XBC0A,	0X2);
	MakeCode	(0XBC0C);
	MakeName	(0XBC0C,	"setprop_r0.bot");
	MakeRptCmt	(0XBC16,	"保存寄存器");
	MakeCode	(x=0XBC22);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBC42);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBC44);
	OpStkvar	(x,	1);
	MakeComm	(0XBC4C,	"type");
	MakeComm	(0XBC50,	"name");
	MakeRptCmt	(0XBC56,	"R10 = /system/build.prop");
	MakeComm	(0XBC5E,	"type");
	MakeComm	(0XBC62,	"name");
	MakeRptCmt	(0XBC6E,	"R10 = /system/default.prop");
	MakeCode	(0XBC6E);
	MakeComm	(0XBC70,	"file");
	MakeComm	(0XBC72,	"oflag");
	MakeRptCmt	(0XBC74,	"打开/system/build.prop或者/system/default.prop");
	MakeCode	(x=0XBC7C);
	OpStkvar	(x,	1);
	MakeComm	(0XBC80,	"fd");
	MakeComm	(0XBC82,	"buf");
	MakeRptCmt	(0XBC84,	"R2 = 0x80 * 4 = 0x200");
	MakeRptCmt	(0XBC86,	"读0x200字节");
	MakeCode	(x=0XBC8A);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBC90,	"没读到货");
	MakeCode	(0XBC92);
	MakeRptCmt	(0XBC94,	"r0.bot.id");
	MakeComm	(0XBC96,	"s");
	MakeCode	(x=0XBC98);
	OpStkvar	(x,	1);
	MakeComm	(0XBC9E,	"s2");
	MakeCode	(x=0XBC9E);
	OpStkvar	(x,	1);
	MakeComm	(0XBCA0,	"n");
	MakeComm	(0XBCA2,	"s1");
	MakeCode	(0XBCAE);
	MakeComm	(0XBCB0,	"oflag");
	MakeCode	(x=0XBCB6);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBCB8,	"打开/data/.bootemp文件");
	MakeCode	(x=0XBCC2);
	OpStkvar	(x,	1);
	MakeComm	(0XBCC6,	"s");
	MakeComm	(0XBCC8,	"c");
	MakeRptCmt	(0XBCCA,	"0x200");
	MakeCode	(x=0XBCD4);
	OpStkvar	(x,	1);
	MakeComm	(0XBCD8,	"s");
	MakeCode	(x=0XBCDA);
	OpStkvar	(x,	1);
	MakeComm	(0XBCE0,	"s");
	MakeComm	(0XBCE6,	"buf");
	MakeComm	(0XBCE8,	"n");
	MakeComm	(0XBCEA,	"fd");
	MakeRptCmt	(0XBCEC,	"写入r0.bot.id = Android_ID");
	MakeComm	(0XBCF2,	"s");
	MakeComm	(0XBCF4,	"c");
	MakeCode	(x=0XBCFC);
	OpStkvar	(x,	1);
	MakeComm	(0XBCFE,	"format");
	MakeCode	(x=0XBCFE);
	OpStkvar	(x,	1);
	MakeComm	(0XBD00,	"s");
	MakeCode	(x=0XBD04);
	OpStkvar	(x,	1);
	MakeComm	(0XBD0A,	"s");
	MakeComm	(0XBD10,	"buf");
	MakeComm	(0XBD12,	"n");
	MakeComm	(0XBD14,	"fd");
	MakeRptCmt	(0XBD16,	"写入r0.bot.ch = XX？");
	MakeComm	(0XBD1A,	"fd");
	MakeComm	(0XBD1C,	"buf");
	MakeComm	(0XBD1E,	"n");
	MakeCode	(x=0XBD1E);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBD20,	"写入从/system/build.prop或者/system/default.prop读的数据");
	MakeComm	(0XBD2A,	"fd");
	MakeComm	(0XBD2C,	"buf");
	MakeComm	(0XBD38,	"fd");
	MakeComm	(0XBD3A,	"buf");
	MakeComm	(0XBD3C,	"n");
	MakeRptCmt	(0XBD3E,	"循环的写入/system/build.prop或者/system/default.prop文件的内容");
	MakeRptCmt	(0XBD42,	"本质上就是拷贝prop文件的内容");
	MakeComm	(0XBD46,	"fd");
	MakeRptCmt	(0XBD48,	"关闭/system/build.prop或者/system/default.prop文件");
	MakeComm	(0XBD4C,	"fd");
	MakeRptCmt	(0XBD4E,	"关闭/data/.bootemp文件");
	MakeRptCmt	(0XBD56,	"强制刷新");
	MakeCode	(x=0XBD5A);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBD60,	"/data/.bootemp");
	MakeRptCmt	(0XBD62,	"/system/build.prop或者/system/default.prop");
	MakeRptCmt	(0XBD66,	"重新生成/system/build.prop或者/system/default.propp文件");
	MakeComm	(0XBD6A,	"name");
	MakeRptCmt	(0XBD6C,	"删除/data/.bootemp文件");
	MakeRptCmt	(0XBD7C,	"检查堆栈");
	MakeRptCmt	(0XBD8C,	"恢复寄存器");
	MakeRptCmt	(0XBD8E,	"函数返回");
	MakeComm	(0XBD90,	"fd");
	MakeCode	(0XBD90);
	MakeCode	(0XBD98);
	MakeDword	(0XBD9C);
	MakeDword	(0XBDA0);
	MakeDword	(x=0XBDA4);
	OpOff		(x,	0,	0XBC2A);
	OpOff		(x,	128,	0XBC2A);
	MakeDword	(x=0XBDA8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBDAC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBDB0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBDB4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBDB8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBDBC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XBDC0);
	MakeDword	(0XBDC4);
	MakeDword	(x=0XBDC8);
	OpOff		(x,	0,	0XBCDA);
	OpOff		(x,	128,	0XBCDA);
	MakeDword	(0XBDCC);
	MakeCode	(0XBDD0);
	MakeName	(0XBDD0,	"infectsvc");
	MakeRptCmt	(0XBDE0,	"/system/bin/svc");
	MakeComm	(0XBDEC,	"oflag");
	MakeCode	(x=0XBDF0);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBDF2,	"打开/system/bin/svc");
	MakeCode	(x=0XBDFA);
	OpStkvar	(x,	1);
	MakeComm	(0XBDFE,	"fd");
	MakeComm	(0XBE00,	"buf");
	MakeRptCmt	(0XBE04,	"读取/system/bin/svc文件内容");
	MakeRptCmt	(0XBE08,	"读取的字节数");
	MakeRptCmt	(0XBE0E,	"没读到内容就返回");
	MakeRptCmt	(0XBE10,	"读取文件内容的第一个字符");
	MakeCode	(0XBE10);
	MakeRptCmt	(0XBE12,	"第一个字符是否为'#'");
	MakeCode	(x=0XBE12);
	OpChr		(x,	1);
	MakeCode	(0XBE18);
	MakeCode	(x=0XBE1A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBE1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBE1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBE24);
	OpStkvar	(x,	1);
	MakeComm	(0XBE26,	"s");
	MakeComm	(0XBE2C,	"s2");
	MakeComm	(0XBE2E,	"n");
	MakeComm	(0XBE30,	"s1");
	MakeCode	(x=0XBE30);
	OpStkvar	(x,	1);
	MakeComm	(0XBE3C,	"oflag");
	MakeCode	(x=0XBE42);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBE44,	"/data/.bootemp文件只是用来做中转的");
	MakeCode	(x=0XBE4E);
	OpStkvar	(x,	1);
	MakeComm	(0XBE54,	"fd");
	MakeComm	(0XBE56,	"buf");
	MakeComm	(0XBE58,	"n");
	MakeCode	(x=0XBE58);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBE5A,	"在/data/.bootemp文件第一行写入/system/bin/ifconfig");
	MakeCode	(x=0XBE5E);
	OpStkvar	(x,	1);
	MakeComm	(0XBE62,	"s");
	MakeComm	(0XBE68,	"buf");
	MakeComm	(0XBE6A,	"n");
	MakeComm	(0XBE6C,	"fd");
	MakeCode	(x=0XBE72);
	OpStkvar	(x,	1);
	MakeComm	(0XBE76,	"fd");
	MakeComm	(0XBE78,	"n");
	MakeComm	(0XBE7A,	"buf");
	MakeCode	(x=0XBE7A);
	OpStkvar	(x,	1);
	MakeComm	(0XBE86,	"fd");
	MakeComm	(0XBE88,	"buf");
	MakeRptCmt	(0XBE8A,	"每次读0x100字节");
	MakeComm	(0XBE94,	"fd");
	MakeComm	(0XBE96,	"buf");
	MakeComm	(0XBE98,	"n");
	MakeRptCmt	(0XBEA0,	"循环读写文件，复制动作");
	MakeComm	(0XBEA2,	"fd");
	MakeComm	(0XBEA8,	"fd");
	MakeRptCmt	(0XBEB2,	"强制刷新");
	MakeCode	(x=0XBEB6);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBEBA,	"/system/bin/svc");
	MakeRptCmt	(0XBEC0,	"/data/.bootemp");
	MakeRptCmt	(0XBEC2,	"感染/system/bin/svc文件，实质上是在第一行添加/system/bin/ifconfig");
	MakeComm	(0XBEC6,	"name");
	MakeRptCmt	(0XBEC8,	"删除中转文件/data/.bootemp");
	MakeCode	(x=0XBED0);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBEE8,	"函数返回");
	MakeCode	(0XBEEA);
	MakeComm	(0XBEEE,	"fd");
	MakeCode	(0XBEEE);
	MakeCode	(x=0XBEF8);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBF02,	"读第2个字符");
	MakeCode	(0XBF02);
	MakeRptCmt	(0XBF04,	"第2个字符是否为'!'");
	MakeCode	(x=0XBF04);
	OpChr		(x,	1);
	MakeRptCmt	(0XBF0A,	"读取的字节数");
	MakeCode	(0XBF0A);
	MakeRptCmt	(0XBF0C,	"文件是否只有“#!”两个字节");
	MakeRptCmt	(0XBF12,	"读第3个字节");
	MakeCode	(0XBF12);
	MakeRptCmt	(0XBF14,	"第3个字节是否为换行");
	MakeCode	(0XBF22);
	MakeCode	(0XBF32);
	MakeCode	(x=0XBF38);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBF3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBF3C);
	OpStkvar	(x,	1);
	MakeCode	(0XBF40);
	MakeCode	(x=0XBF46);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBF48);
	OpStkvar	(x,	1);
	MakeCode	(x=0XBF4A);
	OpStkvar	(x,	1);
	MakeArray	(0XBF4E,	0X2);
	MakeDword	(0XBF50);
	MakeDword	(x=0XBF54);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBF58);
	OpOff		(x,	0,	0XBDEC);
	OpOff		(x,	128,	0XBDEC);
	MakeDword	(x=0XBF5C);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XBF60);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XBF64);
	MakeDword	(0XBF68);
	MakeCode	(0XBF6C);
	MakeName	(0XBF6C,	"infectsysfiles");
	MakeCode	(x=0XBF8E);
	OpStkvar	(x,	1);
	MakeComm	(0XBF92,	"name");
	MakeComm	(0XBF94,	"type");
	MakeRptCmt	(0XBF9C,	"判断/system/lib/libd1.so是否可以访问");
	MakeComm	(0XBFA4,	"type");
	MakeComm	(0XBFA6,	"name");
	MakeRptCmt	(0XBFAE,	"访问不成功，再次尝试");
	MakeRptCmt	(0XBFB0,	"感染vold与debuggerd");
	MakeCode	(0XBFB2);
	MakeComm	(0XBFB6,	"type");
	MakeComm	(0XBFB8,	"name");
	MakeRptCmt	(0XBFC0,	"如果/system/lib/libd1.so不可访问，就感染/system/bin/svc");
	MakeRptCmt	(0XBFC2,	"开始感染系统文件");
	MakeCode	(0XBFC4);
	MakeRptCmt	(0XBFCA,	"感染/system/bin/svc文件");
	MakeCode	(x=0XBFD0);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XBFD6,	"有/system/etc/init.d文件就感染它");
	MakeComm	(0XBFF0,	"dirp");
	MakeComm	(0XBFFE,	"s1");
	MakeComm	(0XC000,	"s2");
	MakeComm	(0XC00A,	"s1");
	MakeComm	(0XC00C,	"s2");
	MakeCode	(x=0XC01E);
	OpStkvar	(x,	1);
	MakeComm	(0XC022,	"s");
	MakeComm	(0XC024,	"c");
	MakeCode	(x=0XC02C);
	OpStkvar	(x,	1);
	MakeComm	(0XC02E,	"s");
	MakeComm	(0XC034,	"format");
	MakeComm	(0XC040,	"dirp");
	MakeComm	(0XC04A,	"dirp");
	MakeCode	(x=0XC050);
	OpStkvar	(x,	1);
	MakeCode	(0XC062);
	MakeCode	(x=0XC072);
	OpStkvar	(x,	1);
	MakeComm	(0XC076,	"c");
	MakeComm	(0XC07A,	"s");
	MakeComm	(0XC084,	"buf");
	MakeRptCmt	(0XC092,	"跳转去感染vold与debuggerd");
	MakeCode	(0XC094);
	MakeComm	(0XC0A2,	"type");
	MakeComm	(0XC0A4,	"name");
	MakeRptCmt	(0XC0AA,	"判断/system/lib/libd1.so是否可访问");
	MakeCode	(x=0XC0B0);
	OpStkvar	(x,	1);
	MakeComm	(0XC0B4,	"c");
	MakeComm	(0XC0B8,	"s");
	MakeComm	(0XC0C2,	"buf");
	MakeCode	(0XC0D2);
	MakeCode	(x=0XC0D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC0E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC0E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC0EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC0F0);
	OpStkvar	(x,	1);
	MakeComm	(0XC104,	"dest");
	MakeComm	(0XC106,	"src");
	MakeRptCmt	(0XC118,	"拷贝文件");
	MakeRptCmt	(0XC122,	"循环备份文件，具体的工作是将vold与debuggerd备份到/system/framework目录下");
	MakeCode	(0XC124);
	MakeRptCmt	(0XC12A,	"要感染的文件列表");
	MakeCode	(x=0XC12C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC12E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC142);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC144);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC14E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC154);
	OpStkvar	(x,	1);
	MakeCode	(0XC15A);
	MakeRptCmt	(0XC162,	"感染文件");
	MakeComm	(0XC16E,	"type");
	MakeComm	(0XC170,	"name");
	MakeComm	(0XC17A,	"c");
	MakeComm	(0XC17C,	"n");
	MakeComm	(0XC17E,	"s");
	MakeComm	(0XC184,	"file");
	MakeComm	(0XC186,	"buf");
	MakeCode	(x=0XC198);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC1A0);
	OpStkvar	(x,	1);
	MakeCode	(0XC1A8);
	MakeCode	(0XC1AC);
	MakeComm	(0XC1AE,	"c");
	MakeComm	(0XC1B0,	"n");
	MakeComm	(0XC1B4,	"s");
	MakeCode	(x=0XC1B6);
	OpStkvar	(x,	1);
	MakeComm	(0XC1BC,	"c");
	MakeComm	(0XC1BE,	"n");
	MakeComm	(0XC1C0,	"s");
	MakeComm	(0XC1DC,	"s");
	MakeCode	(x=0XC1DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC1E0);
	OpStkvar	(x,	1);
	MakeComm	(0XC1E6,	"name");
	MakeComm	(0XC1E8,	"type");
	MakeComm	(0XC1F4,	"c");
	MakeCode	(0XC1F4);
	MakeComm	(0XC1F6,	"n");
	MakeComm	(0XC1F8,	"s");
	MakeComm	(0XC1FE,	"c");
	MakeComm	(0XC200,	"n");
	MakeComm	(0XC202,	"s");
	MakeComm	(0XC216,	"s");
	MakeCode	(x=0XC21A);
	OpStkvar	(x,	1);
	MakeComm	(0XC220,	"name");
	MakeComm	(0XC222,	"type");
	MakeCode	(x=0XC22C);
	OpStkvar	(x,	1);
	MakeComm	(0XC22E,	"dest");
	MakeComm	(0XC234,	"src");
	MakeCode	(0XC244);
	MakeComm	(0XC248,	"dest");
	MakeComm	(0XC24C,	"src");
	MakeCode	(0XC274);
	MakeComm	(0XC278,	"status");
	MakeCode	(0XC27E);
	MakeComm	(0XC280,	"s");
	MakeCode	(x=0XC286);
	OpStkvar	(x,	1);
	MakeDword	(x=0XC2A0);
	OpOff		(x,	0,	0XBF82);
	OpOff		(x,	128,	0XBF82);
	MakeDword	(x=0XC2A4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XC2A8);
	MakeDword	(x=0XC2AC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XC2B0);
	MakeDword	(x=0XC2B4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2B8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2BC);
	OpOff		(x,	0,	0XBFEE);
	OpOff		(x,	128,	0XBFEE);
	MakeDword	(x=0XC2C0);
	OpOff		(x,	0,	0XBFF2);
	OpOff		(x,	128,	0XBFF2);
	MakeDword	(x=0XC2C4);
	OpOff		(x,	0,	0XBFEC);
	OpOff		(x,	128,	0XBFEC);
	MakeDword	(0XC2C8);
	MakeDword	(x=0XC2CC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2D0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2D4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2D8);
	OpOff		(x,	0,	0XC134);
	OpOff		(x,	128,	0XC134);
	MakeDword	(0XC2DC);
	MakeDword	(x=0XC2E0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2E4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2E8);
	OpOff		(x,	0,	0XC1D8);
	OpOff		(x,	128,	0XC1D8);
	MakeDword	(x=0XC2EC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC2F0);
	OpOff		(x,	0,	0XC218);
	OpOff		(x,	128,	0XC218);
	MakeDword	(x=0XC2F4);
	OpOff		(x,	0,	0XC288);
	OpOff		(x,	128,	0XC288);
	MakeCode	(0XC2F8);
	MakeComm	(0XC2FA,	"s");
	MakeCode	(x=0XC2FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC300);
	OpStkvar	(x,	1);
	MakeCode	(0XC312);
	MakeComm	(0XC31E,	"argv");
	MakeCode	(x=0XC31E);
	OpStkvar	(x,	1);
	MakeComm	(0XC322,	"envp");
	MakeComm	(0XC324,	"path");
	MakeCode	(x=0XC326);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XC328,	"执行命令");
	MakeCode	(0XC32E);
	MakeArray	(0XC332,	0X2);
	MakeDword	(x=0XC334);
	OpOff		(x,	0,	0XC302);
	OpOff		(x,	128,	0XC302);
	MakeCode	(0XC338);
	MakeName	(0XC338,	"gethardwareinfo");
	MakeCode	(0XC390);
	MakeCode	(0XC3BE);
	MakeArray	(0XC3D6,	0X2);
	MakeDword	(x=0XC3D8);
	OpOff		(x,	0,	0XC344);
	OpOff		(x,	128,	0XC344);
	MakeDword	(x=0XC3DC);
	OpOff		(x,	0,	0XC346);
	OpOff		(x,	128,	0XC346);
	MakeDword	(x=0XC3E0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC3E4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC3E8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC3EC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC3F0);
	OpOff		(x,	0,	0XC3AC);
	OpOff		(x,	128,	0XC3AC);
	MakeCode	(0XC3F4);
	MakeName	(0XC3F4,	"setprop_r0.bot.val");
	MakeComm	(0XC400,	"timer");
	MakeCode	(x=0XC402);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC406);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XC408,	"获取系统时间");
	MakeComm	(0XC410,	"s");
	MakeComm	(0XC412,	"format");
	MakeRptCmt	(0XC41E,	"获取当前时间并设置给r0.bot.val");
	MakeCode	(x=0XC422);
	OpStkvar	(x,	1);
	MakeCode	(0XC42E);
	MakeArray	(0XC432,	0X2);
	MakeDword	(x=0XC434);
	OpOff		(x,	0,	0XC400);
	OpOff		(x,	128,	0XC400);
	MakeDword	(x=0XC438);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC43C);
	OpOff		(x,	0,	0XC416);
	OpOff		(x,	128,	0XC416);
	MakeDword	(x=0XC440);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XC444);
	MakeComm	(0XC452,	"delim");
	MakeComm	(0XC458,	"src");
	MakeComm	(0XC45E,	"n");
	MakeComm	(0XC466,	"dest");
	MakeComm	(0XC46E,	"delim");
	MakeComm	(0XC472,	"s");
	MakeComm	(0XC478,	"src");
	MakeComm	(0XC47E,	"n");
	MakeComm	(0XC482,	"dest");
	MakeCode	(0XC498);
	MakeCode	(0XC4A6);
	MakeArray	(0XC4AA,	0X2);
	MakeDword	(x=0XC4AC);
	OpOff		(x,	0,	0XC44C);
	OpOff		(x,	128,	0XC44C);
	MakeDword	(x=0XC4B0);
	OpOff		(x,	0,	0XC454);
	OpOff		(x,	128,	0XC454);
	MakeDword	(x=0XC4B4);
	OpOff		(x,	0,	0XC466);
	OpOff		(x,	128,	0XC466);
	MakeDword	(x=0XC4B8);
	OpOff		(x,	0,	0XC484);
	OpOff		(x,	128,	0XC484);
	MakeDword	(x=0XC4BC);
	OpOff		(x,	0,	0XC492);
	OpOff		(x,	128,	0XC492);
	MakeDword	(x=0XC4C0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC4C4);
	OpOff		(x,	0,	0XC4A4);
	OpOff		(x,	128,	0XC4A4);
	MakeCode	(0XC4C8);
	MakeCode	(x=0XC4E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC4E8);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XC4EC,	"C&C服务器地址");
	MakeCode	(x=0XC4EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC4F0);
	OpStkvar	(x,	1);
	MakeComm	(0XC4F4,	"s");
	MakeComm	(0XC4F6,	"c");
	MakeCode	(x=0XC4F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC502);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC514);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC51C);
	OpStkvar	(x,	1);
	MakeComm	(0XC524,	"c");
	MakeComm	(0XC528,	"s");
	MakeComm	(0XC52E,	"format");
	MakeComm	(0XC532,	"s");
	MakeCode	(x=0XC546);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC548);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC54A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC54C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC554);
	OpDecimal	(x,	1);
	MakeComm	(0XC558,	"ptr");
	MakeCode	(x=0XC558);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC564);
	OpStkvar	(x,	1);
	MakeComm	(0XC566,	"seconds");
	MakeCode	(x=0XC566);
	OpDecimal	(x,	1);
	MakeComm	(0XC572,	"ptr");
	MakeCode	(x=0XC572);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC57E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC584);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XC59C,	"函数返回");
	MakeCode	(0XC59E);
	MakeArray	(0XC5A2,	0X2);
	MakeDword	(x=0XC5A4);
	OpOff		(x,	0,	0XC4DE);
	OpOff		(x,	128,	0XC4DE);
	MakeDword	(x=0XC5A8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XC5AC);
	MakeDword	(x=0XC5B0);
	OpOff		(x,	0,	0XC512);
	OpOff		(x,	128,	0XC512);
	MakeDword	(x=0XC5B4);
	OpOff		(x,	0,	0XC508);
	OpOff		(x,	128,	0XC508);
	MakeCode	(0XC5B8);
	MakeCode	(x=0XC5EC);
	OpStkvar	(x,	1);
	MakeComm	(0XC5F2,	"seconds");
	MakeComm	(0XC624,	"src");
	MakeComm	(0XC626,	"n");
	MakeComm	(0XC62C,	"dest");
	MakeCode	(0XC676);
	MakeCode	(0XC686);
	MakeComm	(0XC6B6,	"n");
	MakeComm	(0XC6BA,	"stream");
	MakeComm	(0XC6BC,	"s");
	MakeComm	(0XC6C4,	"stream");
	MakeComm	(0XC6CA,	"s");
	MakeCode	(0XC6F6);
	MakeCode	(x=0XC728);
	OpStkvar	(x,	1);
	MakeComm	(0XC72E,	"c");
	MakeComm	(0XC732,	"s");
	MakeCode	(x=0XC734);
	OpStkvar	(x,	1);
	MakeComm	(0XC73A,	"s");
	MakeComm	(0XC73C,	"c");
	MakeComm	(0XC73E,	"n");
	MakeCode	(x=0XC750);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC758);
	OpStkvar	(x,	1);
	MakeComm	(0XC75A,	"s");
	MakeCode	(x=0XC760);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC762);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC770);
	OpStkvar	(x,	1);
	MakeCode	(0XC778);
	MakeComm	(0XC77E,	"n");
	MakeComm	(0XC780,	"src");
	MakeCode	(x=0XC780);
	OpStkvar	(x,	1);
	MakeComm	(0XC782,	"dest");
	MakeCode	(x=0XC784);
	OpStkvar	(x,	1);
	MakeComm	(0XC78A,	"ptr");
	MakeCode	(x=0XC78A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC794);
	OpStkvar	(x,	1);
	MakeCode	(0XC7AC);
	MakeCode	(0XC7B2);
	MakeArray	(0XC7B6,	0X2);
	MakeDword	(0XC7B8);
	MakeDword	(x=0XC7BC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XC7C0);
	MakeDword	(x=0XC7C4);
	OpOff		(x,	0,	0XC5D4);
	OpOff		(x,	128,	0XC5D4);
	MakeDword	(x=0XC7C8);
	OpOff		(x,	0,	0XC5DE);
	OpOff		(x,	128,	0XC5DE);
	MakeDword	(0XC7CC);
	MakeDword	(0XC7D0);
	MakeDword	(x=0XC7D4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC7D8);
	OpOff		(x,	0,	0XC62C);
	OpOff		(x,	128,	0XC62C);
	MakeDword	(x=0XC7DC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC7E0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC7E4);
	OpOff		(x,	0,	0XC65C);
	OpOff		(x,	128,	0XC65C);
	MakeDword	(x=0XC7E8);
	OpOff		(x,	0,	0XC662);
	OpOff		(x,	128,	0XC662);
	MakeDword	(x=0XC7EC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC7F0);
	OpOff		(x,	0,	0XC6B0);
	OpOff		(x,	128,	0XC6B0);
	MakeDword	(x=0XC7F4);
	OpOff		(x,	0,	0XC6EC);
	OpOff		(x,	128,	0XC6EC);
	MakeDword	(x=0XC7F8);
	OpOff		(x,	0,	0XC6EE);
	OpOff		(x,	128,	0XC6EE);
	MakeDword	(x=0XC7FC);
	OpOff		(x,	0,	0XC6FE);
	OpOff		(x,	128,	0XC6FE);
	MakeDword	(x=0XC800);
	OpOff		(x,	0,	0XC726);
	OpOff		(x,	128,	0XC726);
	MakeDword	(x=0XC804);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC808);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC80C);
	OpOff		(x,	0,	0XC758);
	OpOff		(x,	128,	0XC758);
	MakeDword	(x=0XC810);
	OpOff		(x,	0,	0XC756);
	OpOff		(x,	128,	0XC756);
	MakeDword	(0XC814);
	MakeDword	(x=0XC818);
	OpOff		(x,	0,	0XC7A2);
	OpOff		(x,	128,	0XC7A2);
	MakeDword	(x=0XC81C);
	OpOff		(x,	0,	0XC7A4);
	OpOff		(x,	128,	0XC7A4);
	MakeCode	(0XC820);
	MakeName	(0XC820,	"readCCfile");
	MakeCode	(x=0XC834);
	OpStkvar	(x,	1);
	MakeComm	(0XC838,	"n");
	MakeCode	(x=0XC83C);
	OpStkvar	(x,	1);
	MakeComm	(0XC844,	"s");
	MakeComm	(0XC846,	"c");
	MakeCode	(x=0XC848);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC864);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC868);
	OpStkvar	(x,	1);
	MakeComm	(0XC870,	"s");
	MakeCode	(x=0XC872);
	OpStkvar	(x,	1);
	MakeCode	(0XC87A);
	MakeCode	(x=0XC886);
	OpStkvar	(x,	1);
	MakeComm	(0XC88A,	"s");
	MakeCode	(x=0XC892);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC894);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XC898,	"连接服务器");
	MakeComm	(0XC89C,	"ptr");
	MakeCode	(x=0XC89C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC8A8);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XC8B8,	"函数返回");
	MakeCode	(0XC8BA);
	MakeComm	(0XC8BE,	"s");
	MakeCode	(x=0XC8C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC8CA);
	OpStkvar	(x,	1);
	MakeCode	(0XC8D2);
	MakeCode	(x=0XC8D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC8DC);
	OpStkvar	(x,	1);
	MakeComm	(0XC8E4,	"s");
	MakeCode	(0XC8EC);
	MakeDword	(x=0XC8F0);
	OpOff		(x,	0,	0XC832);
	OpOff		(x,	128,	0XC832);
	MakeDword	(x=0XC8F4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC8F8);
	OpOff		(x,	0,	0XC856);
	OpOff		(x,	128,	0XC856);
	MakeDword	(x=0XC8FC);
	OpOff		(x,	0,	0XC86E);
	OpOff		(x,	128,	0XC86E);
	MakeDword	(x=0XC900);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XC904);
	OpOff		(x,	0,	0XC88C);
	OpOff		(x,	128,	0XC88C);
	MakeDword	(x=0XC908);
	OpOff		(x,	0,	0XC8CA);
	OpOff		(x,	128,	0XC8CA);
	MakeDword	(x=0XC90C);
	OpOff		(x,	0,	0XC8E2);
	OpOff		(x,	128,	0XC8E2);
	MakeCode	(0XC910);
	MakeCode	(x=0XC926);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC928);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC930);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC934);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC936);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC944);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC946);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC950);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC956);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC966);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC96C);
	OpStkvar	(x,	1);
	MakeComm	(0XC978,	"ptr");
	MakeCode	(x=0XC978);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC984);
	OpStkvar	(x,	1);
	MakeComm	(0XC986,	"seconds");
	MakeComm	(0XC992,	"ptr");
	MakeCode	(x=0XC992);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC99E);
	OpStkvar	(x,	1);
	MakeComm	(0XC9B2,	"ptr");
	MakeCode	(x=0XC9B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC9BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC9C2);
	OpStkvar	(x,	1);
	MakeComm	(0XC9D8,	"name");
	MakeCode	(x=0XC9D8);
	OpStkvar	(x,	1);
	MakeComm	(0XC9E0,	"filename");
	MakeCode	(x=0XC9E0);
	OpStkvar	(x,	1);
	MakeComm	(0XC9EC,	"size");
	MakeCode	(x=0XC9EC);
	OpStkvar	(x,	1);
	MakeComm	(0XC9EE,	"n");
	MakeComm	(0XC9F0,	"s");
	MakeComm	(0XC9F2,	"ptr");
	MakeCode	(x=0XC9F2);
	OpStkvar	(x,	1);
	MakeComm	(0XC9F8,	"stream");
	MakeComm	(0XC9FE,	"stream");
	MakeCode	(0XCA1C);
	MakeCode	(0XCA20);
	MakeCode	(0XCA26);
	MakeArray	(0XCA2A,	0X2);
	MakeDword	(x=0XCA2C);
	OpOff		(x,	0,	0XC926);
	OpOff		(x,	128,	0XC926);
	MakeDword	(x=0XCA30);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XCA34);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XCA38);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XCA3C);
	OpOff		(x,	0,	0XC9E6);
	OpOff		(x,	128,	0XC9E6);
	MakeDword	(x=0XCA40);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XCA44);
	MakeCode	(0XCA48);
	MakeName	(0XCA48,	"runamstart");
	MakeCode	(x=0XCA54);
	OpStkvar	(x,	1);
	MakeComm	(0XCA56,	"c");
	MakeComm	(0XCA5E,	"s");
	MakeCode	(x=0XCA62);
	OpStkvar	(x,	1);
	MakeComm	(0XCA74,	"s");
	MakeComm	(0XCA7E,	"command");
	MakeRptCmt	(0XCA80,	"通过am start方式启动Android程序组件");
	MakeCode	(x=0XCA86);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XCA94,	"函数返回");
	MakeCode	(0XCA96);
	MakeArray	(0XCA9A,	0X2);
	MakeDword	(0XCA9C);
	MakeDword	(x=0XCAA0);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(x=0XCAA4);
	OpOff		(x,	0,	0XCA5C);
	OpOff		(x,	128,	0XCA5C);
	MakeDword	(x=0XCAA8);
	OpOff		(x,	0,	0XCA7A);
	OpOff		(x,	128,	0XCA7A);
	MakeDword	(x=0XCAAC);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(0XCAB0);
	MakeName	(0XCAB0,	"main");
	MakeRptCmt	(0XCABC,	"R6为GOT表的基址");
	MakeRptCmt	(0XCABE,	"__stack_chk_guar");
	MakeRptCmt	(0XCAC4,	"__stack_chk_guar");
	MakeRptCmt	(0XCAD0,	"用于堆栈检查");
	MakeRptCmt	(0XCAD2,	"R4 = R1");
	MakeRptCmt	(0XCAD4,	"R7 = R2");
	MakeRptCmt	(0XCAD6,	"字符串解密，与libvadgo.so的解密代码一样");
	MakeRptCmt	(0XCADE,	"传进来的3个参数为main函数的3个参数，相当于参数完整复制");
	MakeRptCmt	(0XCAE0,	"检查自己是以什么身份运行");
	MakeRptCmt	(0XCAE4,	"检查用户有效ID");
	MakeRptCmt	(0XCAE8,	"如果不是Root权限就退出程序");
	MakeCode	(0XCAF0);
	MakeCode	(x=0XCAFA);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XCB00,	"r0.bot.run记录系统是否已经感染了该木马");
	MakeCode	(x=0XCB06);
	OpChr		(x,	1);
	MakeCode	(x=0XCB0E);
	OpChr		(x,	1);
	MakeCode	(0XCB16);
	MakeRptCmt	(0XCB22,	"感染系统文件");
	MakeComm	(0XCB36,	"dest");
	MakeRptCmt	(0XCB3A,	"复制字符串system_server");
	MakeRptCmt	(0XCB44,	"子进程");
	MakeRptCmt	(0XCB46,	"父进程退出");
	MakeRptCmt	(0XCB4A,	"子进程独立");
	MakeCode	(0XCB4A);
	MakeRptCmt	(0XCB56,	"子进程");
	MakeRptCmt	(0XCB58,	"父进程退出");
	MakeComm	(0XCB5C,	"fd");
	MakeCode	(0XCB5C);
	MakeCode	(x=0XCB64);
	OpDecimal	(x,	1);
	MakeComm	(0XCB68,	"seconds");
	MakeRptCmt	(0XCB6E,	"获取硬件信息");
	MakeCode	(x=0XCB7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB7E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB88);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB92);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB94);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBA6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBBE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBCA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBCE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBD6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCBFE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC04);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC06);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC08);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC14);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC16);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC18);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC20);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC24);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC30);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC34);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC38);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC40);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC44);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC48);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC4C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC50);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC54);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC58);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC60);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC64);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC68);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC70);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC74);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC78);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC80);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC84);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC88);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC94);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCC98);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCCA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCCA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCCA6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCCB4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCCB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCCB8);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XCCBE,	"http_proxy");
	MakeCode	(x=0XCCC0);
	OpStkvar	(x,	1);
	MakeDword	(x=0XCCC4);
	OpOff		(x,	0,	0XCAC6);
	OpOff		(x,	128,	0XCAC6);
	MakeDword	(x=0XCCC8);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XCCCC);
	MakeDword	(0XCCD0);
	MakeDword	(x=0XCCD4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XCCD8);
	MakeDword	(x=0XCCDC);
	OpOff		(x,	0,	0XCB20);
	OpOff		(x,	128,	0XCB20);
	MakeDword	(x=0XCCE0);
	OpOff		(x,	0,	0XCB32);
	OpOff		(x,	128,	0XCB32);
	MakeDword	(x=0XCCE4);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeDword	(0XCCE8);
	MakeDword	(0XCCEC);
	MakeDword	(0XCCF0);
	MakeDword	(0XCCF4);
	MakeDword	(0XCCF8);
	MakeDword	(0XCCFC);
	MakeDword	(0XCD00);
	MakeDword	(0XCD04);
	MakeDword	(0XCD08);
	MakeDword	(0XCD0C);
	MakeDword	(0XCD10);
	MakeDword	(0XCD14);
	MakeDword	(0XCD18);
	MakeDword	(0XCD1C);
	MakeDword	(0XCD20);
	MakeDword	(0XCD24);
	MakeDword	(0XCD28);
	MakeDword	(0XCD2C);
	MakeDword	(0XCD30);
	MakeDword	(0XCD34);
	MakeDword	(0XCD38);
	MakeDword	(0XCD3C);
	MakeDword	(0XCD40);
	MakeDword	(0XCD44);
	MakeDword	(0XCD48);
	MakeDword	(0XCD4C);
	MakeDword	(0XCD50);
	MakeDword	(0XCD54);
	MakeDword	(0XCD58);
	MakeDword	(0XCD5C);
	MakeDword	(0XCD60);
	MakeDword	(0XCD64);
	MakeDword	(0XCD68);
	MakeDword	(0XCD6C);
	MakeDword	(0XCD70);
	MakeDword	(0XCD74);
	MakeDword	(0XCD78);
	MakeDword	(0XCD7C);
	MakeDword	(0XCD80);
	MakeDword	(0XCD84);
	MakeDword	(0XCD88);
	MakeDword	(0XCD8C);
	MakeDword	(0XCD90);
	MakeDword	(0XCD94);
	MakeDword	(0XCD98);
	MakeDword	(0XCD9C);
	MakeDword	(0XCDA0);
	MakeDword	(0XCDA4);
	MakeDword	(0XCDA8);
	MakeDword	(0XCDAC);
	MakeDword	(0XCDB0);
	MakeDword	(0XCDB4);
	MakeDword	(0XCDB8);
	MakeDword	(0XCDBC);
	MakeDword	(0XCDC0);
	MakeDword	(0XCDC4);
	MakeDword	(0XCDC8);
	MakeDword	(0XCDCC);
	MakeDword	(0XCDD0);
	MakeDword	(0XCDD4);
	MakeDword	(0XCDD8);
	MakeDword	(x=0XCDDC);
	OpOff		(x,	0,	0XCCB0);
	OpOff		(x,	128,	0XCCB0);
	MakeDword	(x=0XCDE0);
	OpOff		(x,	0,	0XCCAE);
	OpOff		(x,	128,	0XCCAE);
	MakeDword	(0XCDE4);
	MakeDword	(x=0XCDE8);
	OpOff		(x,	0,	0XCE0E);
	OpOff		(x,	128,	0XCE0E);
	MakeCode	(0XCDEC);
	MakeRptCmt	(0XCDEE,	"设置r0.bot.val");
	MakeComm	(0XCDFE,	"seconds");
	MakeCode	(0XCDFE);
	MakeComm	(0XCE0A,	"name");
	MakeCode	(x=0XCE0C);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XCE0E,	"getenv(\"http_proxy\")");
	MakeComm	(0XCE24,	"ptr");
	MakeCode	(x=0XCE2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCE36);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCE40);
	OpStkvar	(x,	1);
	MakeComm	(0XCE4A,	"ptr");
	MakeCode	(x=0XCE4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCE56);
	OpStkvar	(x,	1);
	MakeComm	(0XCE64,	"seconds");
	MakeCode	(x=0XCE64);
	OpDecimal	(x,	1);
	MakeRptCmt	(0XCE70,	"设置r0.bot.val的值为当前时间");
	MakeRptCmt	(0XCE78,	"获取系统硬件信息");
	MakeRptCmt	(0XCE7C,	"感染系统文件");
	MakeComm	(0XCE84,	"c");
	MakeComm	(0XCE88,	"s");
	MakeCode	(x=0XCE8A);
	OpStkvar	(x,	1);
	MakeComm	(0XCE92,	"s");
	MakeCode	(x=0XCE92);
	OpStkvar	(x,	1);
	MakeComm	(0XCE94,	"c");
	MakeCode	(x=0XCE9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCEAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCEAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCEAE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCEB2);
	OpStkvar	(x,	1);
	MakeComm	(0XCEB6,	"format");
	MakeCode	(x=0XCEBC);
	OpStkvar	(x,	1);
	MakeComm	(0XCEC0,	"s");
	MakeCode	(x=0XCEC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCECA);
	OpStkvar	(x,	1);
	MakeComm	(0XCED4,	"s");
	MakeCode	(x=0XCEDA);
	OpStkvar	(x,	1);
	MakeComm	(0XCEDC,	"dest");
	MakeComm	(0XCEDE,	"n");
	MakeComm	(0XCEE0,	"src");
	MakeComm	(0XCEE6,	"src");
	MakeComm	(0XCEE8,	"dest");
	MakeCode	(x=0XCEEE);
	OpStkvar	(x,	1);
	MakeComm	(0XCEF8,	"s");
	MakeCode	(x=0XCEFE);
	OpStkvar	(x,	1);
	MakeComm	(0XCF00,	"dest");
	MakeComm	(0XCF02,	"n");
	MakeComm	(0XCF04,	"src");
	MakeComm	(0XCF0A,	"src");
	MakeComm	(0XCF0C,	"dest");
	MakeCode	(x=0XCF12);
	OpStkvar	(x,	1);
	MakeComm	(0XCF1C,	"s");
	MakeCode	(x=0XCF22);
	OpStkvar	(x,	1);
	MakeComm	(0XCF24,	"dest");
	MakeComm	(0XCF26,	"n");
	MakeComm	(0XCF28,	"src");
	MakeComm	(0XCF2E,	"src");
	MakeComm	(0XCF30,	"dest");
	MakeCode	(x=0XCF36);
	OpStkvar	(x,	1);
	MakeComm	(0XCF40,	"s");
	MakeCode	(x=0XCF46);
	OpStkvar	(x,	1);
	MakeComm	(0XCF48,	"dest");
	MakeComm	(0XCF4A,	"n");
	MakeComm	(0XCF4C,	"src");
	MakeComm	(0XCF52,	"src");
	MakeComm	(0XCF54,	"dest");
	MakeCode	(x=0XCF5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCF5C);
	OpStkvar	(x,	1);
	MakeCode	(0XCF72);
	MakeCode	(x=0XCF7A);
	OpStkvar	(x,	1);
	MakeComm	(0XCF86,	"n");
	MakeComm	(0XCF88,	"src");
	MakeCode	(x=0XCF88);
	OpStkvar	(x,	1);
	MakeComm	(0XCF8A,	"dest");
	MakeCode	(x=0XCF8A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCF8C);
	OpStkvar	(x,	1);
	MakeComm	(0XCF92,	"ptr");
	MakeCode	(x=0XCF92);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCF98);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCF9A);
	OpStkvar	(x,	1);
	MakeComm	(0XCFA8,	"delim");
	MakeComm	(0XCFAA,	"s");
	MakeCode	(x=0XCFAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCFAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCFBA);
	OpStkvar	(x,	1);
	MakeComm	(0XCFBC,	"s2");
	MakeComm	(0XCFC6,	"delim");
	MakeCode	(x=0XCFD4);
	OpStkvar	(x,	1);
	MakeComm	(0XCFD8,	"s");
	MakeComm	(0XCFDA,	"delim");
	MakeCode	(x=0XCFE8);
	OpStkvar	(x,	1);
	MakeCode	(0XCFF0);
	MakeComm	(0XD000,	"s");
	MakeComm	(0XD002,	"delim");
	MakeCode	(x=0XD002);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD00C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD016);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD022);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD024);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD026);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD02A);
	OpStkvar	(x,	1);
	MakeComm	(0XD02E,	"format");
	MakeCode	(x=0XD034);
	OpStkvar	(x,	1);
	MakeComm	(0XD036,	"s");
	MakeCode	(x=0XD03E);
	OpStkvar	(x,	1);
	MakeComm	(0XD048,	"c");
	MakeCode	(0XD048);
	MakeComm	(0XD04A,	"n");
	MakeComm	(0XD04C,	"s");
	MakeCode	(x=0XD04C);
	OpStkvar	(x,	1);
	MakeComm	(0XD052,	"timer");
	MakeCode	(x=0XD052);
	OpStkvar	(x,	1);
	MakeComm	(0XD058,	"seedval");
	MakeCode	(x=0XD058);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD062);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD064);
	OpStkvar	(x,	1);
	MakeComm	(0XD068,	"format");
	MakeComm	(0XD06C,	"s");
	MakeCode	(x=0XD06C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD072);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD074);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD07E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD080);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XD08A,	"感染系统文件");
	MakeCode	(x=0XD08E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD090);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XD09A,	"访问C&C服务器文件");
	MakeComm	(0XD09E,	"name");
	MakeCode	(x=0XD09E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD0A6);
	OpStkvar	(x,	1);
	MakeComm	(0XD0B0,	"c");
	MakeCode	(0XD0B0);
	MakeComm	(0XD0B2,	"n");
	MakeComm	(0XD0B4,	"s");
	MakeCode	(x=0XD0B4);
	OpStkvar	(x,	1);
	MakeComm	(0XD0BC,	"c");
	MakeComm	(0XD0C0,	"s");
	MakeCode	(x=0XD0C0);
	OpStkvar	(x,	1);
	MakeComm	(0XD0C6,	"timer");
	MakeCode	(x=0XD0C6);
	OpStkvar	(x,	1);
	MakeComm	(0XD0CC,	"seedval");
	MakeCode	(x=0XD0CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD0D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD0D8);
	OpStkvar	(x,	1);
	MakeComm	(0XD0DC,	"format");
	MakeComm	(0XD0E0,	"s");
	MakeCode	(x=0XD0E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD0E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD0E8);
	OpStkvar	(x,	1);
	MakeCode	(0XD0F4);
	MakeCode	(x=0XD0FA);
	OpStkvar	(x,	1);
	MakeComm	(0XD0FC,	"type");
	MakeComm	(0XD100,	"name");
	MakeCode	(x=0XD10C);
	OpStkvar	(x,	1);
	MakeComm	(0XD10E,	"format");
	MakeCode	(x=0XD110);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD112);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD118);
	OpStkvar	(x,	1);
	MakeComm	(0XD11C,	"s");
	MakeCode	(x=0XD11C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD11E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD120);
	OpStkvar	(x,	1);
	MakeComm	(0XD126,	"command");
	MakeCode	(x=0XD126);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD132);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD13C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD13E);
	OpStkvar	(x,	1);
	MakeComm	(0XD14C,	"c");
	MakeComm	(0XD150,	"s");
	MakeCode	(x=0XD150);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD156);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD158);
	OpStkvar	(x,	1);
	MakeComm	(0XD15A,	"s");
	MakeCode	(x=0XD15A);
	OpStkvar	(x,	1);
	MakeComm	(0XD15E,	"format");
	MakeComm	(0XD166,	"command");
	MakeCode	(x=0XD166);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD16E);
	OpStkvar	(x,	1);
	MakeComm	(0XD178,	"name");
	MakeCode	(x=0XD178);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD17E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD18A);
	OpStkvar	(x,	1);
	MakeCode	(0XD194);
	MakeComm	(0XD19A,	"c");
	MakeComm	(0XD1A0,	"s");
	MakeCode	(x=0XD1A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD1A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD1A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD1AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD1AC);
	OpStkvar	(x,	1);
	MakeComm	(0XD1B2,	"format");
	MakeComm	(0XD1B4,	"s");
	MakeCode	(x=0XD1B4);
	OpStkvar	(x,	1);
	MakeComm	(0XD1BA,	"command");
	MakeCode	(x=0XD1BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD1C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD1D0);
	OpStkvar	(x,	1);
	MakeComm	(0XD1DA,	"c");
	MakeCode	(0XD1DA);
	MakeComm	(0XD1DC,	"n");
	MakeComm	(0XD1DE,	"s");
	MakeCode	(x=0XD1DE);
	OpStkvar	(x,	1);
	MakeComm	(0XD1E6,	"c");
	MakeComm	(0XD1EA,	"s");
	MakeCode	(x=0XD1EA);
	OpStkvar	(x,	1);
	MakeComm	(0XD1F0,	"timer");
	MakeCode	(x=0XD1F0);
	OpStkvar	(x,	1);
	MakeComm	(0XD1F6,	"seedval");
	MakeCode	(x=0XD1F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD200);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD202);
	OpStkvar	(x,	1);
	MakeComm	(0XD206,	"format");
	MakeComm	(0XD20A,	"s");
	MakeCode	(x=0XD20A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD210);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD212);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD21E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD220);
	OpStkvar	(x,	1);
	MakeComm	(0XD222,	"s");
	MakeCode	(x=0XD222);
	OpStkvar	(x,	1);
	MakeComm	(0XD228,	"format");
	MakeCode	(x=0XD22A);
	OpStkvar	(x,	1);
	MakeComm	(0XD230,	"command");
	MakeCode	(x=0XD230);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD236);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD240);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD242);
	OpStkvar	(x,	1);
	MakeComm	(0XD250,	"c");
	MakeComm	(0XD254,	"s");
	MakeCode	(x=0XD254);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD25A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD25C);
	OpStkvar	(x,	1);
	MakeComm	(0XD262,	"s");
	MakeCode	(x=0XD262);
	OpStkvar	(x,	1);
	MakeComm	(0XD264,	"format");
	MakeComm	(0XD26A,	"command");
	MakeCode	(x=0XD26A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD270);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD272);
	OpStkvar	(x,	1);
	MakeComm	(0XD27E,	"name");
	MakeCode	(x=0XD27E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD284);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD290);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD29A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD2A0);
	OpStkvar	(x,	1);
	MakeComm	(0XD2A6,	"name");
	MakeCode	(x=0XD2A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD2AC);
	OpStkvar	(x,	1);
	MakeComm	(0XD2AE,	"filename");
	MakeCode	(x=0XD2AE);
	OpStkvar	(x,	1);
	MakeComm	(0XD2B0,	"modes");
	MakeCode	(x=0XD2BC);
	OpStkvar	(x,	1);
	MakeComm	(0XD2BE,	"s");
	MakeComm	(0XD2C0,	"size");
	MakeComm	(0XD2C2,	"n");
	MakeComm	(0XD2C4,	"ptr");
	MakeCode	(x=0XD2CA);
	OpStkvar	(x,	1);
	MakeComm	(0XD2CC,	"s");
	MakeComm	(0XD2CE,	"size");
	MakeComm	(0XD2D0,	"n");
	MakeComm	(0XD2D2,	"ptr");
	MakeCode	(x=0XD2D8);
	OpStkvar	(x,	1);
	MakeComm	(0XD2DA,	"s");
	MakeComm	(0XD2DC,	"size");
	MakeComm	(0XD2DE,	"n");
	MakeComm	(0XD2E0,	"ptr");
	MakeCode	(x=0XD2E6);
	OpStkvar	(x,	1);
	MakeComm	(0XD2E8,	"s");
	MakeComm	(0XD2EA,	"size");
	MakeComm	(0XD2EC,	"n");
	MakeComm	(0XD2EE,	"ptr");
	MakeCode	(x=0XD2F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD2F6);
	OpStkvar	(x,	1);
	MakeComm	(0XD2FA,	"format");
	MakeComm	(0XD2FC,	"stream");
	MakeCode	(x=0XD302);
	OpStkvar	(x,	1);
	MakeComm	(0XD304,	"s");
	MakeComm	(0XD306,	"size");
	MakeComm	(0XD308,	"n");
	MakeComm	(0XD30A,	"ptr");
	MakeComm	(0XD310,	"stream");
	MakeComm	(0XD316,	"stream");
	MakeCode	(x=0XD31C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD322);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD324);
	OpStkvar	(x,	1);
	MakeDword	(0XD334);
	MakeCode	(x=0XD338);
	OpStkvar	(x,	1);
	MakeComm	(0XD346,	"c");
	MakeComm	(0XD34C,	"s");
	MakeCode	(x=0XD34C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD352);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD354);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD356);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD358);
	OpStkvar	(x,	1);
	MakeComm	(0XD35E,	"format");
	MakeComm	(0XD360,	"s");
	MakeCode	(x=0XD360);
	OpStkvar	(x,	1);
	MakeComm	(0XD366,	"command");
	MakeCode	(x=0XD366);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD36C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD37C);
	OpStkvar	(x,	1);
	MakeComm	(0XD386,	"c");
	MakeComm	(0XD38A,	"s");
	MakeCode	(x=0XD38A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD392);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD394);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD396);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD39C);
	OpStkvar	(x,	1);
	MakeComm	(0XD39E,	"format");
	MakeComm	(0XD3A2,	"s");
	MakeCode	(x=0XD3A2);
	OpStkvar	(x,	1);
	MakeComm	(0XD3AA,	"command");
	MakeCode	(x=0XD3AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD3B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD3C0);
	OpStkvar	(x,	1);
	MakeCode	(0XD3D2);
	MakeCode	(x=0XD3D4);
	OpStkvar	(x,	1);
	MakeCode	(0XD3E4);
	MakeCode	(x=0XD3E8);
	OpStkvar	(x,	1);
	MakeComm	(0XD3EC,	"type");
	MakeComm	(0XD3EE,	"name");
	MakeCode	(x=0XD3F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD3FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD400);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD412);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD422);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD432);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD434);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD436);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD43C);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD43E);
	OpStkvar	(x,	1);
	MakeComm	(0XD442,	"format");
	MakeComm	(0XD444,	"s");
	MakeCode	(x=0XD444);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD446);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD448);
	OpStkvar	(x,	1);
	MakeComm	(0XD450,	"timer");
	MakeCode	(0XD450);
	MakeRptCmt	(0XD452,	"获取当前时间");
	MakeCode	(x=0XD45A);
	OpStkvar	(x,	1);
	MakeRptCmt	(0XD460,	"这个属性值保存的是病毒发作的时间");
	MakeCode	(0XD46C);
	MakeRptCmt	(0XD472,	"使用当前时间值减去保存的时间值");
	MakeRptCmt	(0XD474,	"0xe1 << 4 = 0xe10");
	MakeRptCmt	(0XD476,	"判断感染的时间间隔0xe10 = 3600秒");
	MakeComm	(0XD47E,	"status");
	MakeCode	(0XD47E);
	MakeDword	(x=0XD484);
	OpOff		(x,	0,	0XECB8);
	OpOff		(x,	128,	0XECB8);
	MakeCode	(x=0XD488);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0XD488,	"j_main");
	MakeDword	(x=0XD48C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeStr		(0XD490,	0XD499);
	MakeName	(0XD490,	"aSSS");
	MakeArray	(0XD499,	0X3);
	MakeStr		(0XD49C,	0XD4A9);
	MakeName	(0XD49C,	"aProcMounts");
	MakeArray	(0XD4A9,	0X3);
	MakeStr		(0XD4AC,	0XD4AE);
	MakeName	(0XD4AC,	"aR");
	MakeArray	(0XD4AE,	0X2);
	MakeStr		(0XD4B0,	0XD4C5);
	MakeName	(0XD4B0,	"aDevBlockMtdblo");
	MakeArray	(0XD4C5,	0X3);
	MakeStr		(0XD4C8,	0XD4D0);
	MakeName	(0XD4C8,	"aSystem");
	MakeStr		(0XD4D0,	0XD4D7);
	MakeName	(0XD4D0,	"aYaffs2");
	MakeStr		(0XD4D8,	0XD4DE);
	MakeName	(0XD4D8,	"aYaffs");
	MakeArray	(0XD4DE,	0X2);
	MakeStr		(0XD4E0,	0XD4E2);
	MakeArray	(0XD4E2,	0X2);
	MakeStr		(0XD4E4,	0XD4EA);
	MakeName	(0XD4E4,	"aShell");
	MakeArray	(0XD4EA,	0X2);
	MakeStr		(0XD4EC,	0XD4F3);
	MakeName	(0XD4EC,	"aProc");
	MakeStr		(0XD4F4,	0XD4F6);
	MakeName	(0XD4F4,	"a_");
	MakeArray	(0XD4F6,	0X2);
	MakeStr		(0XD4F8,	0XD4FB);
	MakeName	(0XD4F8,	"a__");
	MakeStr		(0XD4FC,	0XD505);
	MakeName	(0XD4FC,	"aProcS");
	MakeArray	(0XD505,	0X3);
	MakeStr		(0XD508,	0XD50F);
	MakeName	(0XD508,	"aSExe");
	MakeStr		(0XD510,	0XD516);
	MakeName	(0XD510,	"a4S");
	MakeArray	(0XD516,	0X2);
	MakeStr		(0XD518,	0XD51A);
	MakeName	(0XD518,	"aW");
	MakeArray	(0XD51A,	0X2);
	MakeStr		(0XD51C,	0XD523);
	MakeName	(0XD51C,	"aDS");
	MakeStr		(0XD524,	0XD52C);
	MakeName	(0XD524,	"aHttp");
	MakeStr		(0XD52C,	0XD534);
	MakeName	(0XD52C,	"aUnknown");
	MakeStr		(0XD534,	0XD56E);
	MakeName	(0XD534,	"aSHttp_128sD_25");
	MakeArray	(0XD56E,	0X2);
	MakeStr		(0XD570,	0XD59A);
	MakeName	(0XD570,	"aS_256sHttp1_0U");
	MakeArray	(0XD59A,	0X2);
	MakeStr		(0XD59C,	0XD5AC);
	MakeName	(0XD59C,	"aHttp1_D03d");
	MakeStr		(0XD5AC,	0XD5B3);
	MakeName	(0XD5AC,	"aDelete");
	MakeStr		(0XD5B4,	0XD5CB);
	MakeName	(0XD5B4,	"aControlOverwri");
	MakeStr		(0XD5CC,	0XD5F8);
	MakeName	(0XD5CC,	"aContentLengt_0");
	MakeStr		(0XD5F8,	0XD60F);
	MakeName	(0XD5F8,	"aContentLengt_1");
	MakeStr		(0XD610,	0XD614);
	MakeName	(0XD610,	"aPut");
	MakeStr		(0XD614,	0XD619);
	MakeName	(0XD614,	"aHead");
	MakeArray	(0XD619,	0X3);
	MakeStr		(0XD61C,	0XD62F);
	MakeName	(0XD61C,	"aContentLengthD");
	MakeStr		(0XD630,	0XD641);
	MakeName	(0XD630,	"aContentTypeS");
	MakeArray	(0XD641,	0X3);
	MakeStr		(0XD644,	0XD648);
	MakeName	(0XD644,	"aGet");
	MakeStr		(0XD648,	0XD651);
	MakeName	(0XD648,	"aLocation");
	MakeArray	(0XD651,	0X3);
	MakeStr		(0XD654,	0XD657);
	MakeName	(0XD654,	"aI");
	MakeStr		(0XD658,	0XD65B);
	MakeName	(0XD658,	"aI_0");
	MakeStr		(0XD65C,	0XD65E);
	MakeArray	(0XD65E,	0X2);
	MakeStr		(0XD660,	0XD667);
	MakeName	(0XD660,	"aSSS_0");
	MakeStr		(0XD668,	0XD670);
	MakeName	(0XD668,	"aUnknown_0");
	MakeStr		(0XD670,	0XD678);
	MakeName	(0XD670,	"aUnknown_1");
	MakeStr		(0XD678,	0XD680);
	MakeName	(0XD678,	"aUnknown_2");
	MakeStr		(0XD680,	0XD688);
	MakeName	(0XD680,	"aUnknown_3");
	MakeStr		(0XD688,	0XD690);
	MakeName	(0XD688,	"aUnknown_4");
	MakeStr		(0XD690,	0XD698);
	MakeName	(0XD690,	"aUnknown_5");
	MakeStr		(0XD698,	0XD6A0);
	MakeName	(0XD698,	"aUnknown_6");
	MakeStr		(0XD6A0,	0XD6A8);
	MakeName	(0XD6A0,	"aUnknown_7");
	MakeStr		(0XD6A8,	0XD6B0);
	MakeName	(0XD6A8,	"aUnknown_8");
	MakeStr		(0XD6B0,	0XD6B8);
	MakeName	(0XD6B0,	"aUnknown_9");
	MakeStr		(0XD6B8,	0XD6C0);
	MakeName	(0XD6B8,	"aUnknown_10");
	MakeStr		(0XD6C0,	0XD6C8);
	MakeName	(0XD6C0,	"aUnknown_11");
	MakeStr		(0XD6C8,	0XD6D0);
	MakeName	(0XD6C8,	"aUnknown_12");
	MakeByte	(0XD6D4);
	MakeArray	(0XD6D4,	0X34);
	MakeName	(0XD6D4,	"e2attr_flags_value");
	MakeStr		(0XD708,	0XD711);
	MakeName	(0XD708,	"e2attr_flags_sname");
	MakeArray	(0XD711,	0X3);
	MakeStr		(0XD714,	0XD71B);
	MakeName	(0XD714,	"aSSd");
	MakeStr		(0XD71C,	0XD723);
	MakeName	(0XD71C,	"aSS_1");
	MakeStr		(0XD74C,	0XD751);
	MakeName	(0XD74C,	"aSS_0");
	MakeArray	(0XD751,	0X3);
	MakeStr		(0XD754,	0XD75E);
	MakeName	(0XD754,	"aSCSS");
	MakeArray	(0XD75E,	0X2);
	MakeStr		(0XD760,	0XD772);
	MakeName	(0XD760,	"aSISTDSD");
	MakeArray	(0XD772,	0X2);
	MakeStr		(0XD774,	0XD78B);
	MakeName	(0XD774,	"aSISTDSDCS");
	MakeStr		(0XD78C,	0XD79E);
	MakeName	(0XD78C,	"aSTDSDCS");
	MakeArray	(0XD79E,	0X2);
	MakeStr		(0XD7A0,	0XD7AD);
	MakeName	(0XD7A0,	"aSTDSD");
	MakeArray	(0XD7AD,	0X3);
	MakeStr		(0XD7B0,	0XD7B6);
	MakeName	(0XD7B0,	"aSS_2");
	MakeArray	(0XD7B6,	0X2);
	MakeStr		(0XD7B8,	0XD7BA);
	MakeName	(0XD7B8,	"a0");
	MakeArray	(0XD7BA,	0X2);
	MakeStr		(0XD7BC,	0XD7BE);
	MakeName	(0XD7BC,	"a1");
	MakeArray	(0XD7BE,	0X2);
	MakeStr		(0XD7C0,	0XD7CB);
	MakeName	(0XD7C0,	"aHttp_proxy");
	MakeStr		(0XD7CC,	0XD7DB);
	MakeName	(0XD7CC,	"aSISCSS");
	MakeStr		(0XD7DC,	0XD7E0);
	MakeName	(0XD7DC,	"aB");
	MakeStr		(0XD7E0,	0XD7E4);
	MakeName	(0XD7E0,	"aM");
	MakeStr		(0XD7E4,	0XD7E9);
	MakeName	(0XD7E4,	"aSv");
	MakeArray	(0XD7E9,	0X3);
	MakeStr		(0XD7EC,	0XD7F0);
	MakeName	(0XD7EC,	"aO");
	MakeStr		(0XD7F0,	0XD7F3);
	MakeName	(0XD7F0,	"aOk");
	MakeStr		(0XD7F4,	0XD82E);
	MakeName	(0XD7F4,	"aXmlVersion1_0E");
	MakeArray	(0XD82E,	0X2);
	MakeStr		(0XD830,	0XD837);
	MakeName	(0XD830,	"aMap");
	MakeStr		(0XD838,	0XD869);
	MakeName	(0XD838,	"aIntNameDouble_");
	MakeArray	(0XD869,	0X3);
	MakeStr		(0XD86C,	0XD899);
	MakeName	(0XD86C,	"aBooleanNameFix");
	MakeArray	(0XD899,	0X3);
	MakeStr		(0XD89C,	0XD8C1);
	MakeName	(0XD89C,	"aStringNameHome");
	MakeArray	(0XD8C1,	0X3);
	MakeStr		(0XD8C4,	0XD8CC);
	MakeName	(0XD8C4,	"aMap_0");
	MakeStr		(0XD8CC,	0XD8D7);
	MakeName	(0XD8CC,	"aSTD_apk");
	MakeStr		(0XD8D8,	0XD8DE);
	MakeName	(0XD8D8,	"aData");
	MakeArray	(0XD8DE,	0X2);
	MakeStr		(0XD8E0,	0XD8EF);
	MakeName	(0XD8E0,	"aSFSSS");
	MakeStr		(0XD8F8,	0XD8FE);
	MakeName	(0XD8F8,	"aSS");
	MakeArray	(0XD8FE,	0X2);
	MakeStr		(0XD900,	0XD90B);
	MakeName	(0XD900,	"aSTD_bin");
	MakeDword	(x=0XEB80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEB84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEB84,	"INFECT_FEILS");
	MakeDword	(x=0XEB88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEB8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEB90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEB94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEB98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEB9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEBBC,	"SERVER_ADDR");
	MakeDword	(x=0XEBC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEBC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0XECB8);
	MakeName	(0XECB8,	"_GLOBAL_OFFSET_TABLE_");
	MakeDword	(0XECBC);
	MakeDword	(x=0XECC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XECC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECC4,	"strcpy_ptr");
	MakeDword	(x=0XECC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECC8,	"ioctl_ptr");
	MakeDword	(x=0XECCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECCC,	"connect_ptr");
	MakeDword	(x=0XECD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECD0,	"geteuid_ptr");
	MakeDword	(x=0XECD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECD4,	"memmove_ptr");
	MakeDword	(x=0XECD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECD8,	"atol_ptr");
	MakeDword	(x=0XECDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECDC,	"__errno_ptr");
	MakeDword	(x=0XECE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECE0,	"getenv_ptr");
	MakeDword	(x=0XECE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECE4,	"execve_ptr");
	MakeDword	(x=0XECE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECE8,	"fgets_ptr");
	MakeDword	(x=0XECEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECEC,	"memcpy_ptr");
	MakeDword	(x=0XECF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECF0,	"readlink_ptr");
	MakeDword	(x=0XECF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECF4,	"system_ptr");
	MakeDword	(x=0XECF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECF8,	"malloc_ptr");
	MakeDword	(x=0XECFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XECFC,	"sleep_ptr");
	MakeDword	(x=0XED00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED00,	"settimeofday_ptr");
	MakeDword	(x=0XED04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED04,	"socket_ptr");
	MakeDword	(x=0XED08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED08,	"readdir_ptr");
	MakeDword	(x=0XED0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED0C,	"fflush_ptr");
	MakeDword	(x=0XED10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED10,	"chown_ptr");
	MakeDword	(x=0XED14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED14,	"strncasecmp_ptr");
	MakeDword	(x=0XED18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED18,	"__stack_chk_fail_ptr");
	MakeDword	(x=0XED1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED1C,	"chmod_ptr");
	MakeDword	(x=0XED20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED20,	"__libc_init_ptr");
	MakeDword	(x=0XED24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED24,	"strrchr_ptr");
	MakeDword	(x=0XED28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED28,	"write_ptr");
	MakeDword	(x=0XED2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED2C,	"fprintf_ptr");
	MakeDword	(x=0XED30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED30,	"kill_ptr");
	MakeDword	(x=0XED34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED34,	"strcat_ptr");
	MakeDword	(x=0XED38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED38,	"setsockopt_ptr");
	MakeDword	(x=0XED3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED3C,	"__system_property_get_ptr");
	MakeDword	(x=0XED40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED40,	"lstat_ptr");
	MakeDword	(x=0XED44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED44,	"strstr_ptr");
	MakeDword	(x=0XED48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED48,	"read_ptr");
	MakeDword	(x=0XED4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED4C,	"strncpy_ptr");
	MakeDword	(x=0XED50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED50,	"unlink_ptr");
	MakeDword	(x=0XED54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED54,	"sync_ptr");
	MakeDword	(x=0XED58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED58,	"strcasecmp_ptr");
	MakeDword	(x=0XED5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED5C,	"strtok_ptr");
	MakeDword	(x=0XED60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED60,	"memcmp_ptr");
	MakeDword	(x=0XED64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED64,	"fork_ptr");
	MakeDword	(x=0XED68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED68,	"sscanf_ptr");
	MakeDword	(x=0XED6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED6C,	"srand48_ptr");
	MakeDword	(x=0XED70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED70,	"strdup_ptr");
	MakeDword	(x=0XED74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED74,	"gettimeofday_ptr");
	MakeDword	(x=0XED78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED78,	"fopen_ptr");
	MakeDword	(x=0XED7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED7C,	"memset_ptr");
	MakeDword	(x=0XED80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED80,	"fclose_ptr");
	MakeDword	(x=0XED84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED84,	"time_ptr");
	MakeDword	(x=0XED88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED88,	"opendir_ptr");
	MakeDword	(x=0XED8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED8C,	"mount_ptr");
	MakeDword	(x=0XED90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED90,	"strcmp_ptr");
	MakeDword	(x=0XED94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED94,	"lrand48_ptr");
	MakeDword	(x=0XED98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED98,	"gethostbyname_ptr");
	MakeDword	(x=0XED9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED9C,	"getpwnam_ptr");
	MakeDword	(x=0XEDA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDA0,	"sprintf_ptr");
	MakeDword	(x=0XEDA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDA4,	"stat_ptr");
	MakeDword	(x=0XEDA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDA8,	"fwrite_ptr");
	MakeDword	(x=0XEDAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDAC,	"access_ptr");
	MakeDword	(x=0XEDB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDB0,	"exit_ptr");
	MakeDword	(x=0XEDB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDB4,	"atoi_ptr");
	MakeDword	(x=0XEDB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDB8,	"strlen_ptr");
	MakeDword	(x=0XEDBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDBC,	"open_ptr");
	MakeDword	(x=0XEDC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDC0,	"strchr_ptr");
	MakeDword	(x=0XEDC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDC4,	"fputs_ptr");
	MakeDword	(x=0XEDC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDC8,	"setsid_ptr");
	MakeDword	(x=0XEDCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDCC,	"closedir_ptr");
	MakeDword	(x=0XEDD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDD0,	"vasprintf_ptr");
	MakeDword	(x=0XEDD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDD4,	"close_ptr");
	MakeDword	(x=0XEDD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDD8,	"free_ptr");
	MakeDword	(x=0XEDDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDDC,	"C_OKNOLOCK_ptr");
	MakeDword	(x=0XEDE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDE0,	"FILE_CMD_10_ptr");
	MakeDword	(x=0XEDE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDE4,	"C_INSTOK_ptr");
	MakeDword	(x=0XEDE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDE8,	"URL_GETTASK_ptr");
	MakeDword	(x=0XEDEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDEC,	"BROWSER_CFG_FILE_ptr");
	MakeDword	(x=0XEDF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDF0,	"PROP_ANDROIDID_ptr");
	MakeDword	(x=0XEDF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDF4,	"PROP_RUNNING_ID_ptr");
	MakeDword	(x=0XEDF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDF8,	"__stack_chk_guard_ptr");
	MakeDword	(x=0XEDFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDFC,	"SELF_EXE_ptr");
	MakeDword	(x=0XEE00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE00,	"SERVER_ADDR1_ptr");
	MakeDword	(x=0XEE04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE04,	"AM_START_ptr");
	MakeDword	(x=0XEE08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE08,	"START_APP_ptr");
	MakeDword	(x=0XEE0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE0C,	"__data_start_ptr");
	MakeDword	(x=0XEE10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE10,	"TARGET_DAEMON_2_ptr");
	MakeDword	(x=0XEE14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE14,	"PROP_RUNNING_CH_ptr");
	MakeDword	(x=0XEE18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE18,	"SYS_BIN_CP_ptr");
	MakeDword	(x=0XEE1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE1C,	"C_ARG_ptr");
	MakeDword	(x=0XEE20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE20,	"PROP_SDKVERSION_ptr");
	MakeDword	(x=0XEE24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE24,	"DEFAULT_PROP_FILE_ptr");
	MakeDword	(x=0XEE28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE28,	"PM_UNINSTALL_ptr");
	MakeDword	(x=0XEE2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE2C,	"BOOT_SVC_FILE_ptr");
	MakeDword	(x=0XEE30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE30,	"FILE_CMD_7_ptr");
	MakeDword	(x=0XEE34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE34,	"PROP_IMEI_ptr");
	MakeDword	(x=0XEE38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE38,	"TOOLBOX_ptr");
	MakeDword	(x=0XEE3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE3C,	"FILE_CMD_5_ptr");
	MakeDword	(x=0XEE40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE40,	"http_server_ptr");
	MakeDword	(x=0XEE44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE44,	"FILE_CMD_3_ptr");
	MakeDword	(x=0XEE48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE48,	"C_DOWNNET_ptr");
	MakeDword	(x=0XEE4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE4C,	"PROP_MODEL_ptr");
	MakeDword	(x=0XEE50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE50,	"__LOG_FILE_BAK_ptr");
	MakeDword	(x=0XEE54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE54,	"CURRENT_VERSION_ptr");
	MakeDword	(x=0XEE58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE58,	"PROP_BRAND_ptr");
	MakeDword	(x=0XEE5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE5C,	"MY_PROG_FILE_ptr");
	MakeDword	(x=0XEE60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE60,	"e2attr_flags_sname_ptr");
	MakeDword	(x=0XEE64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE64,	"FILE_CMD_1_ptr");
	MakeDword	(x=0XEE68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE68,	"TARGET_CMD_2_ptr");
	MakeDword	(x=0XEE6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE6C,	"SERVER_ADDR2_ptr");
	MakeDword	(x=0XEE70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE70,	"C_SYS_ptr");
	MakeDword	(x=0XEE74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE74,	"SYS_XBIN_CP_ptr");
	MakeDword	(x=0XEE78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE78,	"TARGET_DAEMON_1_ptr");
	MakeDword	(x=0XEE7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE7C,	"MY_CFG_FILE_ptr");
	MakeDword	(x=0XEE80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE80,	"C_DELOK_ptr");
	MakeDword	(x=0XEE84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE84,	"PROP_RUNNING_VAL_ptr");
	MakeDword	(x=0XEE88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE88,	"BUILD_PROP_FILE_ptr");
	MakeDword	(x=0XEE8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE8C,	"C_URLOK_ptr");
	MakeDword	(x=0XEE90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE90,	"TARGET_CMD_5_ptr");
	MakeDword	(x=0XEE94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE94,	"TARGET_CMD_4_ptr");
	MakeDword	(x=0XEE98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE98,	"http_proxy_server_ptr");
	MakeDword	(x=0XEE9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE9C,	"URL_REPORT_ptr");
	MakeDword	(x=0XEEA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEA0,	"BOOT_TEMP_FILE_ptr");
	MakeDword	(x=0XEEA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEA4,	"SYS_BIN_DIR_ptr");
	MakeDword	(x=0XEEA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEA8,	"URL_GETID_ptr");
	MakeDword	(x=0XEEAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEAC,	"http_proxy_port_ptr");
	MakeDword	(x=0XEEB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEB0,	"CHATTR_ptr");
	MakeDword	(x=0XEEB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEB4,	"BOOT_MAGIC_ptr");
	MakeDword	(x=0XEEB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEB8,	"SYS_APP_DIR_ptr");
	MakeDword	(x=0XEEBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEBC,	"FILE_CMD_8_ptr");
	MakeDword	(x=0XEEC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEC0,	"ROM_BIN_RILD_ptr");
	MakeDword	(x=0XEEC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEC4,	"ROM_BIN_PM_ptr");
	MakeDword	(x=0XEEC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEC8,	"FILE_CMD_4_ptr");
	MakeDword	(x=0XEECC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEECC,	"SYS_BIN_CAT_ptr");
	MakeDword	(x=0XEED0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEED0,	"http_port_ptr");
	MakeDword	(x=0XEED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEED4,	"TARGET_DAEMON_DIR_ptr");
	MakeDword	(x=0XEED8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEED8,	"PROP_OPERATOR_ptr");
	MakeDword	(x=0XEEDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEDC,	"TARGET_CMD_1_ptr");
	MakeDword	(x=0XEEE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEE0,	"C_RUNOK_ptr");
	MakeDword	(x=0XEEE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEE4,	"SERVER_ADDR3_ptr");
	MakeDword	(x=0XEEE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEE8,	"PROP_RUNNING_FLAG_ptr");
	MakeDword	(x=0XEEEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEEC,	"C_DOWNOK_ptr");
	MakeDword	(x=0XEEF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEF0,	"FILE_CMD_2_ptr");
	MakeDword	(x=0XEEF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEF4,	"C_STARTDOWN_ptr");
	MakeDword	(x=0XEEF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEF8,	"ROM_FRAMEWORK_SVC_ptr");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeDword	(x=0XEEFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEEFC,	"__LOG_FILE_ptr");
	MakeDword	(x=0XEF00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF00,	"PM_INSTALL_ptr");
	MakeDword	(x=0XEF04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF04,	"_tolower_tab__ptr");
	MakeDword	(x=0XEF08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF08,	"TARGET_CMD_3_ptr");
	MakeDword	(x=0XEF0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF0C,	"e2attr_flags_value_ptr");
	MakeDword	(x=0XEF10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF10,	"XBIN_DIR_ptr");
	MakeDword	(x=0XEF14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF14,	"DEFAULT_CHANNEL_ptr");
	MakeDword	(x=0XEF18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF18,	"C_DOWNSYS_ptr");
	MakeDword	(x=0XEF1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF1C,	"RUNNING_NAME_ptr");
	MakeDword	(x=0XEF20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF20,	"FILE_CMD_6_ptr");
	MakeDword	(x=0XEF24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF24,	"FILE_CMD_9_ptr");
	MakeDword	(x=0XEF28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF28,	"BOOT_INIT_DIR_ptr");
	MakeComm	(0XEF2C,	"Alternative name is '__data_start'\nCMD_SET_PROP");
	MakeRptCmt	(0XEF2C,	"Decrypted value:  /system/bin/setprop");
	MakeStr		(0XEF2C,	0XEF40);
	MakeName	(0XEF2C,	"__data_start");
	MakeRptCmt	(0XEF40,	"Decrypted value:  r0.bot.run");
	MakeStr		(0XEF40,	0XEF4B);
	MakeName	(0XEF40,	"PROP_RUNNING_FLAG");
	MakeRptCmt	(0XEF4C,	"Decrypted value:  r0.bot.val");
	MakeStr		(0XEF4C,	0XEF57);
	MakeName	(0XEF4C,	"PROP_RUNNING_VAL");
	MakeRptCmt	(0XEF58,	"Decrypted value:  r0.bot.ch");
	MakeStr		(0XEF58,	0XEF62);
	MakeName	(0XEF58,	"PROP_RUNNING_CH");
	MakeArray	(0XEF62,	0X2);
	MakeRptCmt	(0XEF64,	"Decrypted value:  r0.bot.id");
	MakeStr		(0XEF64,	0XEF6E);
	MakeName	(0XEF64,	"PROP_RUNNING_ID");
	MakeArray	(0XEF6E,	0X2);
	MakeRptCmt	(0XEF70,	"Decrypted value:  ril.imei");
	MakeStr		(0XEF70,	0XEF79);
	MakeName	(0XEF70,	"PROP_IMEI");
	MakeArray	(0XEF79,	0X3);
	MakeRptCmt	(0XEF7C,	"Decrypted value:  net.hostname");
	MakeStr		(0XEF7C,	0XEF89);
	MakeName	(0XEF7C,	"PROP_ANDROIDID");
	MakeArray	(0XEF89,	0X3);
	MakeRptCmt	(0XEF8C,	"Decrypted value:  ro.product.brand");
	MakeStr		(0XEF8C,	0XEF9D);
	MakeName	(0XEF8C,	"PROP_BRAND");
	MakeArray	(0XEF9D,	0X3);
	MakeRptCmt	(0XEFA0,	"Decrypted value:  ro.product.model");
	MakeStr		(0XEFA0,	0XEFB1);
	MakeName	(0XEFA0,	"PROP_MODEL");
	MakeArray	(0XEFB1,	0X3);
	MakeRptCmt	(0XEFB4,	"Decrypted value:  ro.build.version.sdk");
	MakeStr		(0XEFB4,	0XEFC9);
	MakeName	(0XEFB4,	"PROP_SDKVERSION");
	MakeArray	(0XEFC9,	0X3);
	MakeRptCmt	(0XEFCC,	"Decrypted value:  gsm.sim.operator.numeric");
	MakeStr		(0XEFCC,	0XEFE5);
	MakeName	(0XEFCC,	"PROP_OPERATOR");
	MakeArray	(0XEFE5,	0X3);
	MakeRptCmt	(0XEFE8,	"Decrypted value:  /system/default.prop");
	MakeStr		(0XEFE8,	0XEFFD);
	MakeName	(0XEFE8,	"DEFAULT_PROP_FILE");
	MakeArray	(0XEFFD,	0X3);
	MakeRptCmt	(0XF000,	"Decrypted value:  /system/build.prop");
	MakeStr		(0XF000,	0XF013);
	MakeName	(0XF000,	"BUILD_PROP_FILE");
	MakeRptCmt	(0XF014,	"Decrypted value:  /system/lib/libd1.so");
	MakeStr		(0XF014,	0XF029);
	MakeName	(0XF014,	"MY_PROG_FILE");
	MakeArray	(0XF029,	0X3);
	MakeRptCmt	(0XF02C,	"Decrypted value:  /system/etc/.rild_cfg");
	MakeStr		(0XF02C,	0XF042);
	MakeName	(0XF02C,	"MY_CFG_FILE");
	MakeArray	(0XF042,	0X2);
	MakeRptCmt	(0XF044,	"Decrypted value:  system_server");
	MakeStr		(0XF044,	0XF052);
	MakeName	(0XF044,	"RUNNING_NAME");
	MakeArray	(0XF052,	0X2);
	MakeRptCmt	(0XF054,	"Decrypted value:  /data/local/tmp/.rsid_log");
	MakeStr		(0XF054,	0XF06E);
	MakeName	(0XF054,	"__LOG_FILE");
	MakeArray	(0XF06E,	0X2);
	MakeRptCmt	(0XF070,	"Decrypted value:  /data/local/tmp/.rsid_log.1");
	MakeStr		(0XF070,	0XF08C);
	MakeName	(0XF070,	"__LOG_FILE_BAK");
	MakeRptCmt	(0XF08C,	"Decrypted value:  /system/bin/am start -n");
	MakeStr		(0XF08C,	0XF0A4);
	MakeName	(0XF08C,	"START_APP");
	MakeRptCmt	(0XF0A4,	"Decrypted value:  /system/bin/pm uninstall");
	MakeStr		(0XF0A4,	0XF0BD);
	MakeName	(0XF0A4,	"PM_UNINSTALL");
	MakeArray	(0XF0BD,	0X3);
	MakeRptCmt	(0XF0C0,	"Decrypted value:  /system/bin/pm install -r");
	MakeStr		(0XF0C0,	0XF0DA);
	MakeName	(0XF0C0,	"PM_INSTALL");
	MakeArray	(0XF0DA,	0X2);
	MakeRptCmt	(0XF0DC,	"Decrypted value:  /system/bin/am start -a android.intent.action.VIEW -d");
	MakeStr		(0XF0DC,	0XF112);
	MakeName	(0XF0DC,	"AM_START");
	MakeArray	(0XF112,	0X2);
	MakeRptCmt	(0XF114,	"Decrypted value:  /system/bin/cp");
	MakeStr		(0XF114,	0XF123);
	MakeName	(0XF114,	"SYS_BIN_CP");
	MakeRptCmt	(0XF124,	"Decrypted value:  /system/bin/cat");
	MakeStr		(0XF124,	0XF134);
	MakeName	(0XF124,	"SYS_BIN_CAT");
	MakeRptCmt	(0XF134,	"Decrypted value:  /system/xbin/cp");
	MakeStr		(0XF134,	0XF144);
	MakeName	(0XF134,	"SYS_XBIN_CP");
	MakeRptCmt	(0XF144,	"Decrypted value:  /system/app");
	MakeStr		(0XF144,	0XF150);
	MakeName	(0XF144,	"SYS_APP_DIR");
	MakeRptCmt	(0XF150,	"Decrypted value:  /system/bin");
	MakeStr		(0XF150,	0XF15C);
	MakeName	(0XF150,	"SYS_BIN_DIR");
	MakeRptCmt	(0XF15C,	"Decrypted value:  /data/data/com.android.browser/shared_prefs/com.android.browser_preferences.xml");
	MakeStr		(0XF15C,	0XF1AC);
	MakeName	(0XF15C,	"BROWSER_CFG_FILE");
	MakeRptCmt	(0XF1AC,	"Decrypted value:  http://ad.pandanew.com:8511/search/");
	MakeStr		(0XF1AC,	0XF1D0);
	MakeName	(0XF1AC,	"SERVER_ADDR1");
	MakeRptCmt	(0XF1D0,	"Decrypted value:  http://ad.phonego8.com:8511/search/");
	MakeStr		(0XF1D0,	0XF1F4);
	MakeName	(0XF1D0,	"SERVER_ADDR2");
	MakeRptCmt	(0XF1F4,	"Decrypted value:  http://ad.my968.com:8511/search/");
	MakeStr		(0XF1F4,	0XF215);
	MakeName	(0XF1F4,	"SERVER_ADDR3");
	MakeArray	(0XF215,	0X3);
	MakeRptCmt	(0XF218,	"Decrypted value:  s1.php");
	MakeStr		(0XF218,	0XF21F);
	MakeName	(0XF218,	"URL_GETID");
	MakeRptCmt	(0XF220,	"Decrypted value:  s2.php");
	MakeStr		(0XF220,	0XF227);
	MakeName	(0XF220,	"URL_GETTASK");
	MakeRptCmt	(0XF228,	"Decrypted value:  s3.php");
	MakeStr		(0XF228,	0XF22F);
	MakeName	(0XF228,	"URL_REPORT");
	MakeRptCmt	(0XF230,	"Decrypted value:  self");
	MakeStr		(0XF230,	0XF235);
	MakeName	(0XF230,	"DEFAULT_CHANNEL");
	MakeArray	(0XF235,	0X3);
	MakeRptCmt	(0XF238,	"Decrypted value:  &v=17");
	MakeStr		(0XF238,	0XF23E);
	MakeName	(0XF238,	"CURRENT_VERSION");
	MakeArray	(0XF23E,	0X2);
	MakeRptCmt	(0XF240,	"Decrypted value:  chattr");
	MakeStr		(0XF240,	0XF247);
	MakeName	(0XF240,	"CHATTR");
	MakeRptCmt	(0XF248,	"Decrypted value:  /system/bin/rild");
	MakeStr		(0XF248,	0XF259);
	MakeName	(0XF248,	"ROM_BIN_RILD");
	MakeArray	(0XF259,	0X3);
	MakeRptCmt	(0XF25C,	"Decrypted value:  /system/bin/pm");
	MakeStr		(0XF25C,	0XF26B);
	MakeName	(0XF25C,	"ROM_BIN_PM");
	MakeRptCmt	(0XF26C,	"Decrypted value:  /system/framework/svc.jar");
	MakeStr		(0XF26C,	0XF286);
	MakeName	(0XF26C,	"ROM_FRAMEWORK_SVC");
	MakeArray	(0XF286,	0X2);
	MakeRptCmt	(0XF288,	"Decrypted value:  /system/bin/debuggerd");
	MakeStr		(0XF288,	0XF29E);
	MakeName	(0XF288,	"TARGET_DAEMON_1");
	MakeArray	(0XF29E,	0X2);
	MakeRptCmt	(0XF2A0,	"Decrypted value:  /system/bin/vold");
	MakeStr		(0XF2A0,	0XF2B1);
	MakeName	(0XF2A0,	"TARGET_DAEMON_2");
	MakeArray	(0XF2B1,	0X3);
	MakeRptCmt	(0XF2B4,	"Decrypted value:  /system/framework");
	MakeStr		(0XF2B4,	0XF2C6);
	MakeName	(0XF2B4,	"TARGET_DAEMON_DIR");
	MakeArray	(0XF2C6,	0X2);
	MakeRptCmt	(0XF2C8,	"Decrypted value:  /system/bin/rm");
	MakeStr		(0XF2C8,	0XF2D7);
	MakeName	(0XF2C8,	"TARGET_CMD_1");
	MakeRptCmt	(0XF2D8,	"Decrypted value:  /system/bin/move");
	MakeStr		(0XF2D8,	0XF2E9);
	MakeName	(0XF2D8,	"TARGET_CMD_2");
	MakeArray	(0XF2E9,	0X3);
	MakeRptCmt	(0XF2EC,	"Decrypted value:  /system/bin/mount");
	MakeStr		(0XF2EC,	0XF2FE);
	MakeName	(0XF2EC,	"TARGET_CMD_3");
	MakeArray	(0XF2FE,	0X2);
	MakeRptCmt	(0XF300,	"Decrypted value:  /system/bin/ifconfig");
	MakeStr		(0XF300,	0XF315);
	MakeName	(0XF300,	"TARGET_CMD_4");
	MakeArray	(0XF315,	0X3);
	MakeRptCmt	(0XF318,	"Decrypted value:  /system/bin/chown");
	MakeStr		(0XF318,	0XF32A);
	MakeName	(0XF318,	"TARGET_CMD_5");
	MakeArray	(0XF32A,	0X2);
	MakeRptCmt	(0XF32C,	"Decrypted value:  /system/etc/init.d");
	MakeStr		(0XF32C,	0XF33F);
	MakeName	(0XF32C,	"BOOT_INIT_DIR");
	MakeRptCmt	(0XF340,	"Decrypted value:  /system/bin/svc");
	MakeStr		(0XF340,	0XF350);
	MakeName	(0XF340,	"BOOT_SVC_FILE");
	MakeRptCmt	(0XF350,	"Decrypted value:  /system/bin/ifconfig\n");
	MakeStr		(0XF350,	0XF366);
	MakeName	(0XF350,	"BOOT_MAGIC");
	MakeArray	(0XF366,	0X2);
	MakeRptCmt	(0XF368,	"Decrypted value:  /data/.bootemp");
	MakeStr		(0XF368,	0XF377);
	MakeName	(0XF368,	"BOOT_TEMP_FILE");
	MakeRptCmt	(0XF378,	"Decrypted value:  rm");
	MakeStr		(0XF378,	0XF37B);
	MakeName	(0XF378,	"FILE_CMD_1");
	MakeRptCmt	(0XF37C,	"Decrypted value:  move");
	MakeStr		(0XF37C,	0XF381);
	MakeName	(0XF37C,	"FILE_CMD_2");
	MakeArray	(0XF381,	0X3);
	MakeRptCmt	(0XF384,	"Decrypted value:  mount");
	MakeStr		(0XF384,	0XF38A);
	MakeName	(0XF384,	"FILE_CMD_3");
	MakeArray	(0XF38A,	0X2);
	MakeRptCmt	(0XF38C,	"Decrypted value:  ifconfig");
	MakeStr		(0XF38C,	0XF395);
	MakeName	(0XF38C,	"FILE_CMD_4");
	MakeArray	(0XF395,	0X3);
	MakeRptCmt	(0XF398,	"Decrypted value:  chown");
	MakeStr		(0XF398,	0XF39E);
	MakeName	(0XF398,	"FILE_CMD_5");
	MakeArray	(0XF39E,	0X2);
	MakeRptCmt	(0XF3A0,	"Decrypted value:  debuggerd");
	MakeStr		(0XF3A0,	0XF3AA);
	MakeName	(0XF3A0,	"FILE_CMD_6");
	MakeArray	(0XF3AA,	0X2);
	MakeRptCmt	(0XF3AC,	"Decrypted value:  vold");
	MakeStr		(0XF3AC,	0XF3B1);
	MakeName	(0XF3AC,	"FILE_CMD_7");
	MakeArray	(0XF3B1,	0X3);
	MakeRptCmt	(0XF3B4,	"Decrypted value:  libd1.so");
	MakeStr		(0XF3B4,	0XF3BD);
	MakeName	(0XF3B4,	"FILE_CMD_8");
	MakeArray	(0XF3BD,	0X3);
	MakeRptCmt	(0XF3C0,	"Decrypted value:  dhcpcd");
	MakeStr		(0XF3C0,	0XF3C7);
	MakeName	(0XF3C0,	"FILE_CMD_9");
	MakeRptCmt	(0XF3C8,	"Decrypted value:  installd");
	MakeStr		(0XF3C8,	0XF3D1);
	MakeName	(0XF3C8,	"FILE_CMD_10");
	MakeArray	(0XF3D1,	0X3);
	MakeRptCmt	(0XF3D4,	"Decrypted value:  /system/xbin");
	MakeStr		(0XF3D4,	0XF3E1);
	MakeName	(0XF3D4,	"XBIN_DIR");
	MakeArray	(0XF3E1,	0X3);
	MakeRptCmt	(0XF3E4,	"Decrypted value:  /system/bin/toolbox");
	MakeStr		(0XF3E4,	0XF3F8);
	MakeName	(0XF3E4,	"TOOLBOX");
	MakeRptCmt	(0XF3F8,	"Decrypted value:  /proc/self/exe");
	MakeStr		(0XF3F8,	0XF407);
	MakeName	(0XF3F8,	"SELF_EXE");
	MakeRptCmt	(0XF408,	"Decrypted value:  ARG");
	MakeDword	(0XF408);
	MakeName	(0XF408,	"C_ARG");
	MakeRptCmt	(0XF40C,	"Decrypted value:  SYS");
	MakeDword	(0XF40C);
	MakeName	(0XF40C,	"C_SYS");
	MakeRptCmt	(0XF410,	"Decrypted value:  StartDown");
	MakeStr		(0XF410,	0XF41A);
	MakeName	(0XF410,	"C_STARTDOWN");
	MakeArray	(0XF41A,	0X2);
	MakeRptCmt	(0XF41C,	"Decrypted value:  DownNet");
	MakeQword	(0XF41C);
	MakeName	(0XF41C,	"C_DOWNNET");
	MakeRptCmt	(0XF424,	"Decrypted value:  DownSys");
	MakeQword	(0XF424);
	MakeName	(0XF424,	"C_DOWNSYS");
	MakeRptCmt	(0XF42C,	"Decrypted value:  DownOk");
	MakeStr		(0XF42C,	0XF433);
	MakeName	(0XF42C,	"C_DOWNOK");
	MakeRptCmt	(0XF434,	"Decrypted value:  OKNOLOCK");
	MakeStr		(0XF434,	0XF43D);
	MakeName	(0XF434,	"C_OKNOLOCK");
	MakeArray	(0XF43D,	0X3);
	MakeRptCmt	(0XF440,	"Decrypted value:  INSTOK");
	MakeStr		(0XF440,	0XF447);
	MakeName	(0XF440,	"C_INSTOK");
	MakeRptCmt	(0XF448,	"Decrypted value:  RUNOK");
	MakeStr		(0XF448,	0XF44E);
	MakeName	(0XF448,	"C_RUNOK");
	MakeArray	(0XF44E,	0X2);
	MakeRptCmt	(0XF450,	"Decrypted value:  DELOK");
	MakeStr		(0XF450,	0XF456);
	MakeName	(0XF450,	"C_DELOK");
	MakeArray	(0XF456,	0X2);
	MakeRptCmt	(0XF458,	"Decrypted value:  URLOK");
	MakeStr		(0XF458,	0XF45E);
	MakeName	(0XF458,	"C_URLOK");
	MakeArray	(0XF45E,	0X2);
	MakeDword	(x=0XF460);
	OpDecimal	(x,	0);
	MakeName	(0XF460,	"http_port");
	MakeDword	(x=0XF464);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0XF568);
	MakeName	(0XF568,	"http_server");
	MakeDword	(0XF56C);
	MakeName	(0XF56C,	"http_proxy_server");
	MakeDword	(0XF570);
	MakeName	(0XF570,	"http_proxy_port");
	MakeCode	(0XFE3C);
	MakeName	(0XFE3C,	"__imp_strcpy");
	MakeCode	(0XFE40);
	MakeName	(0XFE40,	"__imp_ioctl");
	MakeCode	(0XFE44);
	MakeName	(0XFE44,	"__imp_connect");
	MakeCode	(0XFE48);
	MakeName	(0XFE48,	"__imp_geteuid");
	MakeCode	(0XFE4C);
	MakeName	(0XFE4C,	"__imp_memmove");
	MakeName	(0XFE50,	"__stack_chk_guard");
	MakeCode	(0XFE54);
	MakeName	(0XFE54,	"__aeabi_unwind_cpp_pr0");
	MakeCode	(0XFE58);
	MakeName	(0XFE58,	"__imp_atol");
	MakeCode	(0XFE5C);
	MakeName	(0XFE5C,	"__imp___errno");
	MakeCode	(0XFE60);
	MakeName	(0XFE60,	"__imp_getenv");
	MakeCode	(0XFE64);
	MakeName	(0XFE64,	"__imp_execve");
	MakeCode	(0XFE68);
	MakeName	(0XFE68,	"__imp_fgets");
	MakeCode	(0XFE6C);
	MakeName	(0XFE6C,	"__imp_memcpy");
	MakeCode	(0XFE70);
	MakeName	(0XFE70,	"__imp_readlink");
	MakeCode	(0XFE74);
	MakeName	(0XFE74,	"__imp_system");
	MakeCode	(0XFE78);
	MakeName	(0XFE78,	"__imp_malloc");
	MakeCode	(0XFE7C);
	MakeName	(0XFE7C,	"__imp_sleep");
	MakeCode	(0XFE80);
	MakeName	(0XFE80,	"__imp_settimeofday");
	MakeCode	(0XFE84);
	MakeName	(0XFE84,	"__imp_socket");
	MakeCode	(0XFE88);
	MakeName	(0XFE88,	"__imp_readdir");
	MakeCode	(0XFE8C);
	MakeName	(0XFE8C,	"__imp_fflush");
	MakeCode	(0XFE90);
	MakeName	(0XFE90,	"__imp_chown");
	MakeCode	(0XFE94);
	MakeName	(0XFE94,	"__imp_strncasecmp");
	MakeCode	(0XFE98);
	MakeName	(0XFE98,	"__imp___stack_chk_fail");
	MakeCode	(0XFE9C);
	MakeName	(0XFE9C,	"__imp_chmod");
	MakeCode	(0XFEA0);
	MakeName	(0XFEA0,	"__imp___libc_init");
	MakeCode	(0XFEA4);
	MakeName	(0XFEA4,	"__imp_strrchr");
	MakeCode	(0XFEA8);
	MakeName	(0XFEA8,	"__imp_write");
	MakeCode	(0XFEAC);
	MakeName	(0XFEAC,	"__imp_fprintf");
	MakeCode	(0XFEB0);
	MakeName	(0XFEB0,	"__imp_kill");
	MakeCode	(0XFEB4);
	MakeName	(0XFEB4,	"__imp_strcat");
	MakeCode	(0XFEB8);
	MakeName	(0XFEB8,	"__imp_setsockopt");
	MakeCode	(0XFEBC);
	MakeName	(0XFEBC,	"__imp___system_property_get");
	MakeCode	(0XFEC0);
	MakeName	(0XFEC0,	"__imp_lstat");
	MakeCode	(0XFEC4);
	MakeName	(0XFEC4,	"__imp_strstr");
	MakeCode	(0XFEC8);
	MakeName	(0XFEC8,	"__imp_read");
	MakeCode	(0XFECC);
	MakeName	(0XFECC,	"__imp_strncpy");
	MakeCode	(0XFED0);
	MakeName	(0XFED0,	"__imp_unlink");
	MakeCode	(0XFED4);
	MakeName	(0XFED4,	"__imp_sync");
	MakeCode	(0XFED8);
	MakeName	(0XFED8,	"__imp_strcasecmp");
	MakeCode	(0XFEDC);
	MakeName	(0XFEDC,	"__imp_strtok");
	MakeCode	(0XFEE0);
	MakeName	(0XFEE0,	"__imp_memcmp");
	MakeCode	(0XFEE4);
	MakeName	(0XFEE4,	"__imp_fork");
	MakeCode	(0XFEE8);
	MakeName	(0XFEE8,	"__imp_sscanf");
	MakeCode	(0XFEEC);
	MakeName	(0XFEEC,	"__imp_srand48");
	MakeCode	(0XFEF0);
	MakeName	(0XFEF0,	"__imp_strdup");
	MakeCode	(0XFEF4);
	MakeName	(0XFEF4,	"__imp_gettimeofday");
	MakeCode	(0XFEF8);
	MakeName	(0XFEF8,	"__imp_fopen");
	MakeCode	(0XFEFC);
	MakeName	(0XFEFC,	"__imp_memset");
	MakeCode	(0XFF00);
	MakeName	(0XFF00,	"__imp_fclose");
	MakeCode	(0XFF04);
	MakeName	(0XFF04,	"__imp_time");
	MakeCode	(0XFF08);
	MakeName	(0XFF08,	"__imp_opendir");
	MakeCode	(0XFF0C);
	MakeName	(0XFF0C,	"__imp_mount");
	MakeCode	(0XFF10);
	MakeName	(0XFF10,	"__imp_strcmp");
	MakeCode	(0XFF14);
	MakeName	(0XFF14,	"__imp_lrand48");
	MakeCode	(0XFF18);
	MakeName	(0XFF18,	"__imp_gethostbyname");
	MakeCode	(0XFF1C);
	MakeName	(0XFF1C,	"__imp_getpwnam");
	MakeCode	(0XFF20);
	MakeName	(0XFF20,	"__imp_sprintf");
	MakeCode	(0XFF24);
	MakeName	(0XFF24,	"fputc");
	MakeCode	(0XFF28);
	MakeName	(0XFF28,	"__imp_stat");
	MakeCode	(0XFF2C);
	MakeName	(0XFF2C,	"__imp_fwrite");
	MakeCode	(0XFF30);
	MakeName	(0XFF30,	"__imp_access");
	MakeCode	(0XFF34);
	MakeName	(0XFF34,	"__imp_exit");
	MakeRptCmt	(0XFF38,	"Decrypted value:  ");
	MakeName	(0XFF38,	"_tolower_tab_");
	MakeCode	(0XFF3C);
	MakeName	(0XFF3C,	"__imp_atoi");
	MakeCode	(0XFF40);
	MakeName	(0XFF40,	"__imp_strlen");
	MakeCode	(0XFF44);
	MakeName	(0XFF44,	"__imp_open");
	MakeCode	(0XFF48);
	MakeName	(0XFF48,	"__aeabi_unwind_cpp_pr1");
	MakeCode	(0XFF4C);
	MakeName	(0XFF4C,	"__imp_strchr");
	MakeCode	(0XFF50);
	MakeName	(0XFF50,	"__imp_fputs");
	MakeCode	(0XFF54);
	MakeName	(0XFF54,	"__imp_setsid");
	MakeCode	(0XFF58);
	MakeName	(0XFF58,	"__imp_closedir");
	MakeCode	(0XFF5C);
	MakeName	(0XFF5C,	"__imp_vasprintf");
	MakeCode	(0XFF60);
	MakeName	(0XFF60,	"__imp_close");
	MakeCode	(0XFF64);
	MakeName	(0XFF64,	"__imp_free");
	MakeDword	(0X100DC);
	MakeName	(0X100DC,	"__exidx_end");
	MakeDword	(0X100E0);
	MakeName	(0X100E0,	"_bss_end__");
	MakeDword	(0X100E4);
	MakeName	(0X100E4,	"__bss_start__");
	MakeDword	(0X100E8);
	MakeName	(0X100E8,	"__exidx_start");
	MakeDword	(0X100EC);
	MakeName	(0X100EC,	"__bss_end__");
	MakeDword	(0X100F0);
	MakeName	(0X100F0,	"__bss_start");
	MakeDword	(0X100F4);
	MakeName	(0X100F4,	"__end__");
	MakeDword	(0X100F8);
	MakeName	(0X100F8,	"_edata");
	MakeDword	(0X100FC);
	MakeName	(0X100FC,	"_end");
}

static Functions_0(void) {

	MakeFunction    (0X9C20,0X9C2C);
	SetFunctionFlags(0X9C20,0xc0);
	SetType(0X9C20, "char *strcpy(char *dest, const char *src);");
	MakeFunction    (0X9C2C,0X9C38);
	SetFunctionFlags(0X9C2C,0xc0);
	SetType(0X9C2C, "int ioctl(int fd, unsigned __int32 request, ...);");
	MakeFunction    (0X9C38,0X9C44);
	SetFunctionFlags(0X9C38,0xc0);
	SetType(0X9C38, "int connect(int fd, const struct sockaddr *addr, socklen_t len);");
	MakeFunction    (0X9C44,0X9C50);
	SetFunctionFlags(0X9C44,0xc0);
	SetType(0X9C44, "__uid_t geteuid(void);");
	MakeFunction    (0X9C50,0X9C5C);
	SetFunctionFlags(0X9C50,0xc0);
	SetType(0X9C50, "void *memmove(void *dest, const void *src, size_t n);");
	MakeFunction    (0X9C5C,0X9C68);
	SetFunctionFlags(0X9C5C,0xc0);
	SetType(0X9C5C, "__int32 atol(const char *nptr);");
	MakeFunction    (0X9C68,0X9C74);
	SetFunctionFlags(0X9C68,0xc0);
	MakeFunction    (0X9C74,0X9C80);
	SetFunctionFlags(0X9C74,0xc0);
	SetType(0X9C74, "char *getenv(const char *name);");
	MakeFunction    (0X9C80,0X9C8C);
	SetFunctionFlags(0X9C80,0xc0);
	SetType(0X9C80, "int execve(const char *path, char *const *argv, char *const *envp);");
	MakeFunction    (0X9C8C,0X9C98);
	SetFunctionFlags(0X9C8C,0xc0);
	SetType(0X9C8C, "char *fgets(char *s, int n, FILE *stream);");
	MakeFunction    (0X9C98,0X9CA4);
	SetFunctionFlags(0X9C98,0xc0);
	SetType(0X9C98, "void *memcpy(void *dest, const void *src, size_t n);");
	MakeFunction    (0X9CA4,0X9CB0);
	SetFunctionFlags(0X9CA4,0xc0);
	SetType(0X9CA4, "ssize_t readlink(const char *path, char *buf, size_t len);");
	MakeFunction    (0X9CB0,0X9CBC);
	SetFunctionFlags(0X9CB0,0xc0);
	SetType(0X9CB0, "int system(const char *command);");
	MakeFunction    (0X9CBC,0X9CC8);
	SetFunctionFlags(0X9CBC,0xc0);
	SetType(0X9CBC, "void *malloc(size_t size);");
	MakeFunction    (0X9CC8,0X9CD4);
	SetFunctionFlags(0X9CC8,0xc0);
	SetType(0X9CC8, "unsigned int sleep(unsigned int seconds);");
	MakeFunction    (0X9CD4,0X9CE0);
	SetFunctionFlags(0X9CD4,0xc0);
	SetType(0X9CD4, "int settimeofday(const struct timeval *tv, const struct timezone *tz);");
	MakeFunction    (0X9CE0,0X9CEC);
	SetFunctionFlags(0X9CE0,0xc0);
	SetType(0X9CE0, "int socket(int domain, int type, int protocol);");
	MakeFunction    (0X9CEC,0X9CF8);
	SetFunctionFlags(0X9CEC,0xc0);
	SetType(0X9CEC, "struct dirent *readdir(DIR *dirp);");
	MakeFunction    (0X9CF8,0X9D04);
	SetFunctionFlags(0X9CF8,0xc0);
	SetType(0X9CF8, "int fflush(FILE *stream);");
	MakeFunction    (0X9D04,0X9D10);
	SetFunctionFlags(0X9D04,0xc0);
	SetType(0X9D04, "int chown(const char *file, __uid_t owner, __gid_t group);");
	MakeFunction    (0X9D10,0X9D1C);
	SetFunctionFlags(0X9D10,0xc0);
	SetType(0X9D10, "int strncasecmp(const char *s1, const char *s2, size_t n);");
	MakeFunction    (0X9D1C,0X9D28);
	SetFunctionFlags(0X9D1C,0xc1);
	MakeFunction    (0X9D28,0X9D34);
	SetFunctionFlags(0X9D28,0xc0);
	SetType(0X9D28, "int chmod(const char *file, __mode_t mode);");
	MakeFunction    (0X9D34,0X9D40);
	SetFunctionFlags(0X9D34,0xc0);
	MakeFunction    (0X9D40,0X9D4C);
	SetFunctionFlags(0X9D40,0xc0);
	SetType(0X9D40, "char *strrchr(const char *s, int c);");
	MakeFunction    (0X9D4C,0X9D58);
	SetFunctionFlags(0X9D4C,0xc0);
	SetType(0X9D4C, "ssize_t write(int fd, const void *buf, size_t n);");
	MakeFunction    (0X9D58,0X9D64);
	SetFunctionFlags(0X9D58,0xc0);
	SetType(0X9D58, "int fprintf(FILE *stream, const char *format, ...);");
	MakeFunction    (0X9D64,0X9D70);
	SetFunctionFlags(0X9D64,0xc0);
	SetType(0X9D64, "int kill(__pid_t pid, int sig);");
	MakeFunction    (0X9D70,0X9D7C);
	SetFunctionFlags(0X9D70,0xc0);
	SetType(0X9D70, "char *strcat(char *dest, const char *src);");
	MakeFunction    (0X9D7C,0X9D88);
	SetFunctionFlags(0X9D7C,0xc0);
	SetType(0X9D7C, "int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen);");
	MakeFunction    (0X9D88,0X9D94);
	SetFunctionFlags(0X9D88,0xc0);
	MakeFunction    (0X9D94,0X9DA0);
	SetFunctionFlags(0X9D94,0xc0);
	SetType(0X9D94, "int lstat(const char *file, struct stat *buf);");
	MakeFunction    (0X9DA0,0X9DAC);
	SetFunctionFlags(0X9DA0,0xc0);
	SetType(0X9DA0, "char *strstr(const char *haystack, const char *needle);");
	MakeFunction    (0X9DAC,0X9DB8);
	SetFunctionFlags(0X9DAC,0xc0);
	SetType(0X9DAC, "ssize_t read(int fd, void *buf, size_t nbytes);");
	MakeFunction    (0X9DB8,0X9DC4);
	SetFunctionFlags(0X9DB8,0xc0);
	SetType(0X9DB8, "char *strncpy(char *dest, const char *src, size_t n);");
	MakeFunction    (0X9DC4,0X9DD0);
	SetFunctionFlags(0X9DC4,0xc0);
	SetType(0X9DC4, "int unlink(const char *name);");
	MakeFunction    (0X9DD0,0X9DDC);
	SetFunctionFlags(0X9DD0,0xc0);
	SetType(0X9DD0, "void sync(void);");
	MakeFunction    (0X9DDC,0X9DE8);
	SetFunctionFlags(0X9DDC,0xc0);
	SetType(0X9DDC, "int strcasecmp(const char *s1, const char *s2);");
	MakeFunction    (0X9DE8,0X9DF4);
	SetFunctionFlags(0X9DE8,0xc0);
	SetType(0X9DE8, "char *strtok(char *s, const char *delim);");
	MakeFunction    (0X9DF4,0X9E00);
	SetFunctionFlags(0X9DF4,0xc0);
	SetType(0X9DF4, "int memcmp(const void *s1, const void *s2, size_t n);");
	MakeFunction    (0X9E00,0X9E0C);
	SetFunctionFlags(0X9E00,0xc0);
	SetType(0X9E00, "__pid_t fork(void);");
	MakeFunction    (0X9E0C,0X9E18);
	SetFunctionFlags(0X9E0C,0xc0);
	SetType(0X9E0C, "int sscanf(const char *s, const char *format, ...);");
	MakeFunction    (0X9E18,0X9E24);
	SetFunctionFlags(0X9E18,0xc0);
	SetType(0X9E18, "void srand48(__int32 seedval);");
	MakeFunction    (0X9E24,0X9E30);
	SetFunctionFlags(0X9E24,0xc0);
	SetType(0X9E24, "char *strdup(const char *s);");
	MakeFunction    (0X9E30,0X9E3C);
	SetFunctionFlags(0X9E30,0xc0);
	SetType(0X9E30, "int gettimeofday(struct timeval *tv, __timezone_ptr_t tz);");
	MakeFunction    (0X9E3C,0X9E48);
	SetFunctionFlags(0X9E3C,0xc0);
	SetType(0X9E3C, "FILE *fopen(const char *filename, const char *modes);");
	MakeFunction    (0X9E48,0X9E54);
	SetFunctionFlags(0X9E48,0xc0);
	SetType(0X9E48, "void *memset(void *s, int c, size_t n);");
	MakeFunction    (0X9E54,0X9E60);
	SetFunctionFlags(0X9E54,0xc0);
	SetType(0X9E54, "int fclose(FILE *stream);");
	MakeFunction    (0X9E60,0X9E6C);
	SetFunctionFlags(0X9E60,0xc0);
	SetType(0X9E60, "time_t time(time_t *timer);");
	MakeFunction    (0X9E6C,0X9E78);
	SetFunctionFlags(0X9E6C,0xc0);
	SetType(0X9E6C, "DIR *opendir(const char *name);");
	MakeFunction    (0X9E78,0X9E84);
	SetFunctionFlags(0X9E78,0xc0);
	SetType(0X9E78, "int mount(const char *special_file, const char *dir, const char *fstype, unsigned __int32 rwflag, const void *data);");
	MakeFunction    (0X9E84,0X9E90);
	SetFunctionFlags(0X9E84,0xc0);
	SetType(0X9E84, "int strcmp(const char *s1, const char *s2);");
	MakeFunction    (0X9E90,0X9E9C);
	SetFunctionFlags(0X9E90,0xc0);
	SetType(0X9E90, "__int32 lrand48(void);");
	MakeFunction    (0X9E9C,0X9EA8);
	SetFunctionFlags(0X9E9C,0xc0);
	SetType(0X9E9C, "struct hostent *gethostbyname(const char *name);");
	MakeFunction    (0X9EA8,0X9EB4);
	SetFunctionFlags(0X9EA8,0xc0);
	SetType(0X9EA8, "struct passwd *getpwnam(const char *name);");
	MakeFunction    (0X9EB4,0X9EC0);
	SetFunctionFlags(0X9EB4,0xc0);
	SetType(0X9EB4, "int sprintf(char *s, const char *format, ...);");
	MakeFunction    (0X9EC0,0X9ECC);
	SetFunctionFlags(0X9EC0,0xc0);
	SetType(0X9EC0, "int stat(const char *file, struct stat *buf);");
	MakeFunction    (0X9ECC,0X9ED8);
	SetFunctionFlags(0X9ECC,0xc0);
	SetType(0X9ECC, "size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);");
	MakeFunction    (0X9ED8,0X9EE4);
	SetFunctionFlags(0X9ED8,0xc0);
	SetType(0X9ED8, "int access(const char *name, int type);");
	MakeFunction    (0X9EE4,0X9EF0);
	SetFunctionFlags(0X9EE4,0xc1);
	SetType(0X9EE4, "void exit(int status);");
	MakeFunction    (0X9EF0,0X9EFC);
	SetFunctionFlags(0X9EF0,0xc0);
	SetType(0X9EF0, "int atoi(const char *nptr);");
	MakeFunction    (0X9EFC,0X9F08);
	SetFunctionFlags(0X9EFC,0xc0);
	SetType(0X9EFC, "size_t strlen(const char *s);");
	MakeFunction    (0X9F08,0X9F14);
	SetFunctionFlags(0X9F08,0xc0);
	SetType(0X9F08, "int open(const char *file, int oflag, ...);");
	MakeFunction    (0X9F14,0X9F20);
	SetFunctionFlags(0X9F14,0xc0);
	SetType(0X9F14, "char *strchr(const char *s, int c);");
	MakeFunction    (0X9F20,0X9F2C);
	SetFunctionFlags(0X9F20,0xc0);
	SetType(0X9F20, "int fputs(const char *s, FILE *stream);");
	MakeFunction    (0X9F2C,0X9F38);
	SetFunctionFlags(0X9F2C,0xc0);
	SetType(0X9F2C, "__pid_t setsid(void);");
	MakeFunction    (0X9F38,0X9F44);
	SetFunctionFlags(0X9F38,0xc0);
	SetType(0X9F38, "int closedir(DIR *dirp);");
	MakeFunction    (0X9F44,0X9F50);
	SetFunctionFlags(0X9F44,0xc0);
	SetType(0X9F44, "int vasprintf(char **, const char *, va_list);");
	MakeFunction    (0X9F50,0X9F5C);
	SetFunctionFlags(0X9F50,0xc0);
	SetType(0X9F50, "int close(int fd);");
	MakeFunction    (0X9F5C,0X9F68);
	SetFunctionFlags(0X9F5C,0xc0);
	SetType(0X9F5C, "void free(void *ptr);");
	MakeFunction    (0X9F70,0X9F84);
	SetFunctionFlags(0X9F70,0);
	MakeFunction    (0X9F84,0X9F88);
	SetFunctionFlags(0X9F84,0x81);
	MakeFunction    (0X9FA0,0XA73A);
	SetFunctionFlags(0X9FA0,0);
	MakeFrame(0X9FA0, 0X4, 0, 0);
	MakeNameEx(0X9FB0, "decrypt1", SN_LOCAL);
	MakeNameEx(0X9FC6, "decrypt2", SN_LOCAL);
	MakeNameEx(0X9FDC, "decrypt3", SN_LOCAL);
	MakeNameEx(0X9FF2, "decrypt4", SN_LOCAL);
	MakeNameEx(0XA008, "decrypt5", SN_LOCAL);
	MakeNameEx(0XA01E, "decrypt6", SN_LOCAL);
	MakeNameEx(0XA034, "decrypt7", SN_LOCAL);
	MakeNameEx(0XA04A, "decrypt8", SN_LOCAL);
	MakeNameEx(0XA060, "decrypt9", SN_LOCAL);
	MakeNameEx(0XA076, "decrypt10", SN_LOCAL);
	MakeNameEx(0XA08C, "decrypt11", SN_LOCAL);
	MakeNameEx(0XA0A2, "decrypt12", SN_LOCAL);
	MakeNameEx(0XA0B8, "decrypt13", SN_LOCAL);
	MakeNameEx(0XA0CE, "decrypt14", SN_LOCAL);
	MakeNameEx(0XA0E4, "decrypt15", SN_LOCAL);
	MakeNameEx(0XA0FA, "decrypt16", SN_LOCAL);
	MakeNameEx(0XA110, "decrypt17", SN_LOCAL);
	MakeNameEx(0XA126, "decrypt18", SN_LOCAL);
	MakeNameEx(0XA13C, "decrypt19", SN_LOCAL);
	MakeNameEx(0XA152, "decrypt20", SN_LOCAL);
	MakeNameEx(0XA168, "decrypt21", SN_LOCAL);
	MakeNameEx(0XA17E, "decrypt22", SN_LOCAL);
	MakeNameEx(0XA194, "decrypt23", SN_LOCAL);
	MakeNameEx(0XA1AA, "decrypt24", SN_LOCAL);
	MakeNameEx(0XA1C0, "decrypt25", SN_LOCAL);
	MakeNameEx(0XA1D6, "decrypt26", SN_LOCAL);
	MakeNameEx(0XA1EC, "decrypt27", SN_LOCAL);
	MakeNameEx(0XA202, "decrypt28", SN_LOCAL);
	MakeNameEx(0XA218, "decrypt29", SN_LOCAL);
	MakeNameEx(0XA22E, "decrypt30", SN_LOCAL);
	MakeNameEx(0XA244, "decrypt31", SN_LOCAL);
	MakeNameEx(0XA2E0, "decrypt32", SN_LOCAL);
	MakeNameEx(0XA2F6, "decrypt33", SN_LOCAL);
	MakeNameEx(0XA30C, "decrypt34", SN_LOCAL);
	MakeNameEx(0XA322, "decrypt35", SN_LOCAL);
	MakeNameEx(0XA338, "decrypt36", SN_LOCAL);
	MakeNameEx(0XA34E, "decrypt37", SN_LOCAL);
	MakeNameEx(0XA364, "decrypt38", SN_LOCAL);
	MakeNameEx(0XA37A, "decrypt39", SN_LOCAL);
	MakeNameEx(0XA390, "decrypt40", SN_LOCAL);
	MakeNameEx(0XA3A6, "decrypt41", SN_LOCAL);
	MakeNameEx(0XA3BC, "decrypt42", SN_LOCAL);
	MakeNameEx(0XA3D2, "decrypt43", SN_LOCAL);
	MakeNameEx(0XA3E8, "decrypt44", SN_LOCAL);
	MakeNameEx(0XA3FE, "decrypt45", SN_LOCAL);
	MakeNameEx(0XA414, "decrypt46", SN_LOCAL);
	MakeNameEx(0XA42A, "decrypt47", SN_LOCAL);
	MakeNameEx(0XA440, "decrypt48", SN_LOCAL);
	MakeNameEx(0XA456, "decrypt49", SN_LOCAL);
	MakeNameEx(0XA46C, "decrypt50", SN_LOCAL);
	MakeNameEx(0XA482, "decrypt51", SN_LOCAL);
	MakeNameEx(0XA498, "decrypt52", SN_LOCAL);
	MakeNameEx(0XA4AE, "decrypt53", SN_LOCAL);
	MakeNameEx(0XA4C4, "decrypt54", SN_LOCAL);
	MakeNameEx(0XA4DA, "decrypt55", SN_LOCAL);
	MakeNameEx(0XA4F0, "decrypt56", SN_LOCAL);
	MakeNameEx(0XA506, "decrypt57", SN_LOCAL);
	MakeNameEx(0XA51C, "decrypt58", SN_LOCAL);
	MakeNameEx(0XA532, "decrypt59", SN_LOCAL);
	MakeNameEx(0XA548, "decrypt60", SN_LOCAL);
	MakeNameEx(0XA55E, "decrypt61", SN_LOCAL);
	MakeNameEx(0XA574, "decrypt62", SN_LOCAL);
	MakeNameEx(0XA58A, "decrypt63", SN_LOCAL);
	MakeNameEx(0XA624, "decrypt64", SN_LOCAL);
	MakeNameEx(0XA63A, "decrypt65", SN_LOCAL);
	MakeNameEx(0XA650, "decrypt66", SN_LOCAL);
	MakeNameEx(0XA666, "decrypt67", SN_LOCAL);
	MakeNameEx(0XA67C, "decrypt68", SN_LOCAL);
	MakeNameEx(0XA692, "decrypt69", SN_LOCAL);
	MakeNameEx(0XA6A8, "decrypt70", SN_LOCAL);
	MakeNameEx(0XA6BE, "decrypt71", SN_LOCAL);
	MakeNameEx(0XA6D4, "decrypt72", SN_LOCAL);
	MakeNameEx(0XA6EA, "decrypt73", SN_LOCAL);
	MakeNameEx(0XA700, "decrypt74", SN_LOCAL);
	MakeNameEx(0XA716, "decrypt75", SN_LOCAL);
	MakeNameEx(0XA72C, "decrypt76", SN_LOCAL);
	MakeFunction    (0XA76C,0XA7CC);
	SetFunctionFlags(0XA76C,0);
	MakeFrame(0XA76C, 0X80, 0, 0);
	MakeNameEx(0XA7A8, "checkstack", SN_LOCAL);
	MakeNameEx(0XA7C8, "checkstackfail", SN_LOCAL);
	MakeFunction    (0XA7D4,0XA810);
	SetFunctionFlags(0XA7D4,0);
	MakeFrame(0XA7D4, 0X120, 0, 0);
	MakeLocal(0XA7D4, 0XA810, "[bp-0X114]", "s");
	MakeFunction    (0XA820,0XA908);
	SetFunctionFlags(0XA820,0);
	MakeFrame(0XA820, 0X240, 0, 0);
	MakeLocal(0XA820, 0XA908, "[bp-0X240]", "data");
	MakeLocal(0XA820, 0XA908, "[bp-0X234]", "rwflag");
	MakeLocal(0XA820, 0XA908, "[bp-0X22C]", "s");
	MakeFunction    (0XA934,0XA9CC);
	SetFunctionFlags(0XA934,0);
	MakeFrame(0XA934, 0X1028, 0, 0);
	MakeLocal(0XA934, 0XA9CC, "[bp-0X1024]", "buf");
	MakeNameEx(0XA9A4, "checkstackandret", SN_LOCAL);
	MakeNameEx(0XA9C8, "checkstackfail", SN_LOCAL);
	MakeFunction    (0XA9E4,0XAA16);
	SetFunctionFlags(0XA9E4,0);
	MakeFrame(0XA9E4, 0X10, 0, 0);
	MakeFunction    (0XAA20,0XAA38);
	SetFunctionFlags(0XAA20,0);
	MakeFrame(0XAA20, 0X70, 0, 0);
	MakeFunction    (0XAA38,0XAA7A);
	SetFunctionFlags(0XAA38,0);
	MakeFrame(0XAA38, 0X78, 0, 0);
	MakeNameEx(0XAA5A, "goreturn", SN_LOCAL);
	MakeFunction    (0XAA8C,0XAABC);
	SetFunctionFlags(0XAA8C,0);
	MakeFrame(0XAA8C, 0X70, 0, 0);
	MakeFunction    (0XAAC4,0XABE8);
	SetFunctionFlags(0XAAC4,0);
	MakeFrame(0XAAC4, 0X640, 0, 0);
	MakeLocal(0XAAC4, 0XABE8, "[bp-0X63C]", "path");
	MakeLocal(0XAAC4, 0XABE8, "[bp-0X638]", "s2");
	MakeLocal(0XAAC4, 0XABE8, "[bp-0X634]", "s1");
	MakeNameEx(0XAB0E, "gocontinue", SN_LOCAL);
	MakeNameEx(0XABBC, "goclosedir", SN_LOCAL);
	MakeNameEx(0XABC2, "checkstackandret", SN_LOCAL);
	MakeFunction    (0XAC14,0XAC40);
	SetFunctionFlags(0XAC14,0);
	MakeFrame(0XAC14, 0X10, 0, 0);
	MakeFunction    (0XAC50,0XAD90);
	SetFunctionFlags(0XAC50,0);
	MakeFrame(0XAC50, 0X138, 0, 0);
	MakeLocal(0XAC50, 0XAD90, "[bp-0X138]", "src");
	MakeLocal(0XAC50, 0XAD90, "[bp-0X12C]", "s");
	MakeNameEx(0XAC7C, "gocheckstack", SN_LOCAL);
	MakeNameEx(0XAC8A, "return", SN_LOCAL);
	MakeNameEx(0XACE8, "closeandret", SN_LOCAL);
	MakeNameEx(0XAD84, "stackcheckfail", SN_LOCAL);
	MakeNameEx(0XAD88, "goclose", SN_LOCAL);
	MakeFunction    (0XADBC,0XAEB0);
	SetFunctionFlags(0XADBC,0);
	MakeFrame(0XADBC, 0X20, 0, 0);
	MakeNameEx(0XAE46, "strdups", SN_LOCAL);
	MakeNameEx(0XAE50, "return", SN_LOCAL);
	MakeNameEx(0XAE62, "returnfail12", SN_LOCAL);
	MakeNameEx(0XAE70, "godups", SN_LOCAL);
	MakeFunction    (0XAEC8,0XAEFE);
	SetFunctionFlags(0XAEC8,0);
	MakeFrame(0XAEC8, 0X18, 0, 0);
	MakeFunction    (0XAF04,0XB0EA);
	SetFunctionFlags(0XAF04,0);
	SetType(0XAF04, "int __cdecl connectCCServer(int, size_t n, int);");
	MakeFrame(0XAF04, 0X260, 0, 0);
	MakeLocal(0XAF04, 0XB0EA, "[bp-0X260]", "optlen");
	MakeLocal(0XAF04, 0XB0EA, "[bp-0X24C]", "buf");
	MakeLocal(0XAF04, 0XB0EA, "[bp-0X244]", "addr");
	MakeLocal(0XAF04, 0XB0EA, "[bp-0X23C]", "s");
	MakeLocal(0XAF04, 0XB0EA, "[bp-0X38]", "dest");
	MakeLocal(0XAF04, 0XB0EA, "[bp+0X4]", "n");
	MakeNameEx(0XAF6A, "callgethostbyname", SN_LOCAL);
	MakeNameEx(0XAF76, "connectfuncreturn", SN_LOCAL);
	MakeNameEx(0XAF9A, "hasproxy", SN_LOCAL);
	MakeNameEx(0XAFA6, "goConnect", SN_LOCAL);
	MakeNameEx(0XB03A, "senddata", SN_LOCAL);
	MakeNameEx(0XB056, "closesocket", SN_LOCAL);
	MakeNameEx(0XB060, "setreturnfail3", SN_LOCAL);
	MakeNameEx(0XB068, "setreturnfail2", SN_LOCAL);
	MakeNameEx(0XB06E, "noproxy", SN_LOCAL);
	MakeNameEx(0XB0AE, "goreadsocket", SN_LOCAL);
	MakeNameEx(0XB0D4, "goclosesocket", SN_LOCAL);
	MakeNameEx(0XB0E6, "gostackcheckfail", SN_LOCAL);
	MakeFunction    (0XB120,0XB35C);
	SetFunctionFlags(0XB120,0);
	MakeFrame(0XB120, 0X458, 0, 0);
	MakeLocal(0XB120, 0XB35C, "[bp-0X43C]", "format");
	MakeLocal(0XB120, 0XB35C, "[bp-0X438]", "n");
	MakeLocal(0XB120, 0XB35C, "[bp-0X434]", "size");
	MakeLocal(0XB120, 0XB35C, "[bp-0X430]", "fd");
	MakeLocal(0XB120, 0XB35C, "[bp-0X42C]", "s");
	MakeNameEx(0XB1A2, "goreturn", SN_LOCAL);
	MakeNameEx(0XB1B6, "return", SN_LOCAL);
	MakeNameEx(0XB1C6, "go302", SN_LOCAL);
	MakeNameEx(0XB23E, "go200", SN_LOCAL);
	MakeNameEx(0XB264, "goreadsocket", SN_LOCAL);
	MakeNameEx(0XB2BA, "closeandret", SN_LOCAL);
	MakeNameEx(0XB2C6, "returnfail17", SN_LOCAL);
	MakeNameEx(0XB340, "checkstackfail", SN_LOCAL);
	MakeFunction    (0XB394,0XB44C);
	SetFunctionFlags(0XB394,0);
	MakeFrame(0XB394, 0X80, 0, 0);
	MakeNameEx(0XB3C8, "return", SN_LOCAL);
	MakeFunction    (0XB458,0XB59A);
	SetFunctionFlags(0XB458,0);
	MakeFrame(0XB458, 0X50, 0, 0);
	MakeFunction    (0XB5A8,0XB5CE);
	SetFunctionFlags(0XB5A8,0);
	MakeFrame(0XB5A8, 0X18, 0, 0);
	MakeFunction    (0XB5DC,0XB602);
	SetFunctionFlags(0XB5DC,0);
	MakeFrame(0XB5DC, 0X18, 0, 0);
	MakeFunction    (0XB610,0XB628);
	SetFunctionFlags(0XB610,0);
	SetType(0XB610, "void *_malloc(size_t);");
	MakeFrame(0XB610, 0X8, 0, 0);
	MakeFunction    (0XB628,0XB64E);
	SetFunctionFlags(0XB628,0);
	MakeFrame(0XB628, 0X20, 0, 0);
	MakeLocal(0XB628, 0XB64E, "[bp-0X10]", "varg_r0");
	MakeLocal(0XB628, 0XB64E, "[bp-0XC]", "varg_r1");
	MakeLocal(0XB628, 0XB64E, "[bp-0X8]", "varg_r2");
	MakeLocal(0XB628, 0XB64E, "[bp-0X4]", "varg_r3");
	MakeFunction    (0XB650,0XB67A);
	SetFunctionFlags(0XB650,0);
	MakeFrame(0XB650, 0X10, 0, 0);
	MakeFunction    (0XB67C,0XB6BE);
	SetFunctionFlags(0XB67C,0);
	MakeFrame(0XB67C, 0X10, 0, 0);
	MakeFunction    (0XB6D0,0XB6F6);
	SetFunctionFlags(0XB6D0,0);
	MakeFrame(0XB6D0, 0X8, 0, 0);
	MakeFunction    (0XB6F8,0XB718);
	SetFunctionFlags(0XB6F8,0);
	MakeFrame(0XB6F8, 0X10, 0, 0);
	MakeFunction    (0XB718,0XB730);
	SetFunctionFlags(0XB718,0);
	MakeFrame(0XB718, 0X10, 0, 0);
	MakeFunction    (0XB730,0XB7A4);
	SetFunctionFlags(0XB730,0);
	MakeFrame(0XB730, 0X80, 0, 0);
	MakeLocal(0XB730, 0XB7A4, "[bp-0X78]", "buf");
	MakeFunction    (0XB7AC,0XB7EA);
	SetFunctionFlags(0XB7AC,0);
	MakeFrame(0XB7AC, 0X18, 0, 0);
	MakeFunction    (0XB7F4,0XB876);
	SetFunctionFlags(0XB7F4,0);
	MakeFrame(0XB7F4, 0X20, 0, 0);
	MakeFunction    (0XB880,0XBA56);
	SetFunctionFlags(0XB880,0x10);
	MakeFrame(0XB880, 0X20, 336, 0);
	MakeLocal(0XB880, 0XBA56, "[bp-0X18]", "envp");
	MakeLocal(0XB880, 0XBA56, "[bp-0XC]", "dest");
	MakeNameEx(0XB8FA, "return", SN_LOCAL);
	MakeNameEx(0XB9FA, "checkstackfail", SN_LOCAL);
	MakeNameEx(0XB9FE, "goexit", SN_LOCAL);
	MakeFunction    (0XBA84,0XBAAE);
	SetFunctionFlags(0XBA84,0);
	MakeFrame(0XBA84, 0X20, 0, 0);
	MakeLocal(0XBA84, 0XBAAE, "[bp-0X18]", "tv");
	MakeFunction    (0XBAB0,0XBB7A);
	SetFunctionFlags(0XBAB0,0);
	MakeFrame(0XBAB0, 0X228, 0, 0);
	MakeLocal(0XBAB0, 0XBB7A, "[bp-0X224]", "s");
	MakeFunction    (0XBB9C,0XBC0A);
	SetFunctionFlags(0XBB9C,0);
	MakeFrame(0XBB9C, 0X18, 0, 0);
	MakeFunction    (0XBC0C,0XBD9C);
	SetFunctionFlags(0XBC0C,0);
	MakeFrame(0XBC0C, 0X448, 0, 0);
	MakeLocal(0XBC0C, 0XBD9C, "[bp-0X440]", "s2");
	MakeLocal(0XBC0C, 0XBD9C, "[bp-0X43C]", "n");
	MakeLocal(0XBC0C, 0XBD9C, "[bp-0X438]", "format");
	MakeLocal(0XBC0C, 0XBD9C, "[bp-0X42C]", "s");
	MakeLocal(0XBC0C, 0XBD9C, "[bp-0X22C]", "buf");
	MakeNameEx(0XBD28, "copyprup", SN_LOCAL);
	MakeNameEx(0XBD70, "return", SN_LOCAL);
	MakeNameEx(0XBD90, "closeandreturn", SN_LOCAL);
	MakeNameEx(0XBD98, "stackcheckfail", SN_LOCAL);
	MakeFunction    (0XBDD0,0XBF4E);
	SetFunctionFlags(0XBDD0,0);
	MakeFrame(0XBDD0, 0X248, 0, 0);
	MakeLocal(0XBDD0, 0XBF4E, "[bp-0X240]", "s1");
	MakeLocal(0XBDD0, 0XBF4E, "[bp-0X234]", "n");
	MakeLocal(0XBDD0, 0XBF4E, "[bp-0X22C]", "buf");
	MakeNameEx(0XBE20, "writeifconfig", SN_LOCAL);
	MakeNameEx(0XBED8, "return", SN_LOCAL);
	MakeNameEx(0XBEEA, "stackcheckfail", SN_LOCAL);
	MakeNameEx(0XBEEE, "goreturn", SN_LOCAL);
	MakeNameEx(0XBF02, "readbit2", SN_LOCAL);
	MakeNameEx(0XBF12, "readbit3", SN_LOCAL);
	MakeNameEx(0XBF40, "gowriteifconfig", SN_LOCAL);
	MakeFunction    (0XBF6C,0XC332);
	SetFunctionFlags(0XBF6C,0);
	MakeFrame(0XBF6C, 0X538, 0, 0);
	MakeLocal(0XBF6C, 0XC332, "[bp-0X4C0]", "argv");
	MakeLocal(0XBF6C, 0XC332, "[bp-0X4AC]", "s");
	MakeNameEx(0XBFA0, "goinfectvold", SN_LOCAL);
	MakeNameEx(0XC0B0, "startinfectvold", SN_LOCAL);
	MakeNameEx(0XC0D2, "infectvold", SN_LOCAL);
	MakeNameEx(0XC124, "startinfect", SN_LOCAL);
	MakeNameEx(0XC15A, "gorewritefile", SN_LOCAL);
	MakeNameEx(0XC32E, "stackcheckfail", SN_LOCAL);
	MakeFunction    (0XC338,0XC3D6);
	SetFunctionFlags(0XC338,0);
	MakeFrame(0XC338, 0X10, 0, 0);
	MakeFunction    (0XC3F4,0XC432);
	SetFunctionFlags(0XC3F4,0);
	MakeFrame(0XC3F4, 0X58, 0, 0);
	MakeFunction    (0XC444,0XC4AA);
	SetFunctionFlags(0XC444,0);
	MakeFrame(0XC444, 0X18, 0, 0);
	MakeFunction    (0XC4C8,0XC5A2);
	SetFunctionFlags(0XC4C8,0);
	MakeFrame(0XC4C8, 0X288, 0, 0);
	MakeLocal(0XC4C8, 0XC5A2, "[bp-0X278]", "ptr");
	MakeLocal(0XC4C8, 0XC5A2, "[bp-0X274]", "s");
	MakeNameEx(0XC59E, "stackcheckfail", SN_LOCAL);
	MakeFunction    (0XC5B8,0XC7B6);
	SetFunctionFlags(0XC5B8,0);
	MakeFrame(0XC5B8, 0X438, 0, 0);
	MakeLocal(0XC5B8, 0XC7B6, "[bp-0X42C]", "ptr");
	MakeLocal(0XC5B8, 0XC7B6, "[bp-0X424]", "s");
	MakeFunction    (0XC820,0XC8F0);
	SetFunctionFlags(0XC820,0);
	MakeFrame(0XC820, 0X140, 0, 0);
	MakeLocal(0XC820, 0XC8F0, "[bp-0X12C]", "ptr");
	MakeLocal(0XC820, 0XC8F0, "[bp-0X124]", "s");
	MakeNameEx(0XC8A6, "return", SN_LOCAL);
	MakeNameEx(0XC8EC, "stackcheckfail", SN_LOCAL);
	MakeFunction    (0XC910,0XCA2A);
	SetFunctionFlags(0XC910,0);
	MakeFrame(0XC910, 0X90, 0, 0);
	MakeLocal(0XC910, 0XCA2A, "[bp-0X84]", "filename");
	MakeLocal(0XC910, 0XCA2A, "[bp-0X80]", "ptr");
	MakeLocal(0XC910, 0XCA2A, "[bp-0X7C]", "size");
	MakeFunction    (0XCA48,0XCA9A);
	SetFunctionFlags(0XCA48,0);
	MakeFrame(0XCA48, 0X218, 0, 0);
	MakeLocal(0XCA48, 0XCA9A, "[bp-0X214]", "s");
	MakeNameEx(0XCA84, "return", SN_LOCAL);
	MakeNameEx(0XCA96, "stackcheckfail", SN_LOCAL);
	MakeFunction    (0XCAB0,0XD484);
	SetFunctionFlags(0XCAB0,0x1);
	MakeFrame(0XCAB0, 0X4F8, 0, 0);
	MakeLocal(0XCAB0, 0XD484, "[bp-0X4C0]", "s");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X494]", "dest");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X490]", "command");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X488]", "name");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X480]", "filename");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X478]", "timer");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X464]", "delim");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X3BC]", "seedval");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X3B8]", "src");
	MakeLocal(0XCAB0, 0XD484, "[bp-0X3B0]", "ptr");
	MakeNameEx(0XCAF0, "RootWork", SN_LOCAL);
	MakeNameEx(0XCB16, "setprop_r0.bot.run", SN_LOCAL);
	MakeNameEx(0XCF72, "AM_START", SN_LOCAL);
	MakeNameEx(0XD450, "getprop_r0.bot.val", SN_LOCAL);
	MakeNameEx(0XD47E, "die", SN_LOCAL);
	MakeFunction    (0XD488,0XD48C);
	SetFunctionFlags(0XD488,0x81);
	MakeFunction    (0XFE3C,0XFE40);
	SetFunctionFlags(0XFE3C,0);
	SetType(0XFE3C, "char *strcpy(char *dest, const char *src);");
	MakeFunction    (0XFE40,0XFE44);
	SetFunctionFlags(0XFE40,0);
	SetType(0XFE40, "int ioctl(int fd, unsigned __int32 request, ...);");
	MakeFunction    (0XFE44,0XFE48);
	SetFunctionFlags(0XFE44,0);
	SetType(0XFE44, "int connect(int fd, const struct sockaddr *addr, socklen_t len);");
	MakeFunction    (0XFE48,0XFE4C);
	SetFunctionFlags(0XFE48,0);
	SetType(0XFE48, "__uid_t geteuid(void);");
	MakeFunction    (0XFE4C,0XFE50);
	SetFunctionFlags(0XFE4C,0);
	SetType(0XFE4C, "void *memmove(void *dest, const void *src, size_t n);");
	MakeFunction    (0XFE54,0XFE58);
	SetFunctionFlags(0XFE54,0);
	MakeFunction    (0XFE58,0XFE5C);
	SetFunctionFlags(0XFE58,0);
	SetType(0XFE58, "__int32 atol(const char *nptr);");
	MakeFunction    (0XFE5C,0XFE60);
	SetFunctionFlags(0XFE5C,0);
	MakeFunction    (0XFE60,0XFE64);
	SetFunctionFlags(0XFE60,0);
	SetType(0XFE60, "char *getenv(const char *name);");
	MakeFunction    (0XFE64,0XFE68);
	SetFunctionFlags(0XFE64,0);
	SetType(0XFE64, "int execve(const char *path, char *const *argv, char *const *envp);");
	MakeFunction    (0XFE68,0XFE6C);
	SetFunctionFlags(0XFE68,0);
	SetType(0XFE68, "char *fgets(char *s, int n, FILE *stream);");
	MakeFunction    (0XFE6C,0XFE70);
	SetFunctionFlags(0XFE6C,0);
	SetType(0XFE6C, "void *memcpy(void *dest, const void *src, size_t n);");
	MakeFunction    (0XFE70,0XFE74);
	SetFunctionFlags(0XFE70,0);
	SetType(0XFE70, "ssize_t readlink(const char *path, char *buf, size_t len);");
	MakeFunction    (0XFE74,0XFE78);
	SetFunctionFlags(0XFE74,0);
	SetType(0XFE74, "int system(const char *command);");
	MakeFunction    (0XFE78,0XFE7C);
	SetFunctionFlags(0XFE78,0);
	SetType(0XFE78, "void *malloc(size_t size);");
	MakeFunction    (0XFE7C,0XFE80);
	SetFunctionFlags(0XFE7C,0);
	SetType(0XFE7C, "unsigned int sleep(unsigned int seconds);");
	MakeFunction    (0XFE80,0XFE84);
	SetFunctionFlags(0XFE80,0);
	SetType(0XFE80, "int settimeofday(const struct timeval *tv, const struct timezone *tz);");
	MakeFunction    (0XFE84,0XFE88);
	SetFunctionFlags(0XFE84,0);
	SetType(0XFE84, "int socket(int domain, int type, int protocol);");
	MakeFunction    (0XFE88,0XFE8C);
	SetFunctionFlags(0XFE88,0);
	SetType(0XFE88, "struct dirent *readdir(DIR *dirp);");
	MakeFunction    (0XFE8C,0XFE90);
	SetFunctionFlags(0XFE8C,0);
	SetType(0XFE8C, "int fflush(FILE *stream);");
	MakeFunction    (0XFE90,0XFE94);
	SetFunctionFlags(0XFE90,0);
	SetType(0XFE90, "int chown(const char *file, __uid_t owner, __gid_t group);");
	MakeFunction    (0XFE94,0XFE98);
	SetFunctionFlags(0XFE94,0);
	SetType(0XFE94, "int strncasecmp(const char *s1, const char *s2, size_t n);");
	MakeFunction    (0XFE98,0XFE9C);
	SetFunctionFlags(0XFE98,0x1);
	MakeFunction    (0XFE9C,0XFEA0);
	SetFunctionFlags(0XFE9C,0);
	SetType(0XFE9C, "int chmod(const char *file, __mode_t mode);");
	MakeFunction    (0XFEA0,0XFEA4);
	SetFunctionFlags(0XFEA0,0);
	MakeFunction    (0XFEA4,0XFEA8);
	SetFunctionFlags(0XFEA4,0);
	SetType(0XFEA4, "char *strrchr(const char *s, int c);");
	MakeFunction    (0XFEA8,0XFEAC);
	SetFunctionFlags(0XFEA8,0);
	SetType(0XFEA8, "ssize_t write(int fd, const void *buf, size_t n);");
	MakeFunction    (0XFEAC,0XFEB0);
	SetFunctionFlags(0XFEAC,0);
	SetType(0XFEAC, "int fprintf(FILE *stream, const char *format, ...);");
	MakeFunction    (0XFEB0,0XFEB4);
	SetFunctionFlags(0XFEB0,0);
	SetType(0XFEB0, "int kill(__pid_t pid, int sig);");
	MakeFunction    (0XFEB4,0XFEB8);
	SetFunctionFlags(0XFEB4,0);
	SetType(0XFEB4, "char *strcat(char *dest, const char *src);");
	MakeFunction    (0XFEB8,0XFEBC);
	SetFunctionFlags(0XFEB8,0);
	SetType(0XFEB8, "int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen);");
	MakeFunction    (0XFEBC,0XFEC0);
	SetFunctionFlags(0XFEBC,0);
	MakeFunction    (0XFEC0,0XFEC4);
	SetFunctionFlags(0XFEC0,0);
	SetType(0XFEC0, "int lstat(const char *file, struct stat *buf);");
	MakeFunction    (0XFEC4,0XFEC8);
	SetFunctionFlags(0XFEC4,0);
	SetType(0XFEC4, "char *strstr(const char *haystack, const char *needle);");
	MakeFunction    (0XFEC8,0XFECC);
	SetFunctionFlags(0XFEC8,0);
	SetType(0XFEC8, "ssize_t read(int fd, void *buf, size_t nbytes);");
	MakeFunction    (0XFECC,0XFED0);
	SetFunctionFlags(0XFECC,0);
	SetType(0XFECC, "char *strncpy(char *dest, const char *src, size_t n);");
	MakeFunction    (0XFED0,0XFED4);
	SetFunctionFlags(0XFED0,0);
	SetType(0XFED0, "int unlink(const char *name);");
	MakeFunction    (0XFED4,0XFED8);
	SetFunctionFlags(0XFED4,0);
	SetType(0XFED4, "void sync(void);");
	MakeFunction    (0XFED8,0XFEDC);
	SetFunctionFlags(0XFED8,0);
	SetType(0XFED8, "int strcasecmp(const char *s1, const char *s2);");
	MakeFunction    (0XFEDC,0XFEE0);
	SetFunctionFlags(0XFEDC,0);
	SetType(0XFEDC, "char *strtok(char *s, const char *delim);");
	MakeFunction    (0XFEE0,0XFEE4);
	SetFunctionFlags(0XFEE0,0);
	SetType(0XFEE0, "int memcmp(const void *s1, const void *s2, size_t n);");
	MakeFunction    (0XFEE4,0XFEE8);
	SetFunctionFlags(0XFEE4,0);
	SetType(0XFEE4, "__pid_t fork(void);");
	MakeFunction    (0XFEE8,0XFEEC);
	SetFunctionFlags(0XFEE8,0);
	SetType(0XFEE8, "int sscanf(const char *s, const char *format, ...);");
	MakeFunction    (0XFEEC,0XFEF0);
	SetFunctionFlags(0XFEEC,0);
	SetType(0XFEEC, "void srand48(__int32 seedval);");
	MakeFunction    (0XFEF0,0XFEF4);
	SetFunctionFlags(0XFEF0,0);
	SetType(0XFEF0, "char *strdup(const char *s);");
	MakeFunction    (0XFEF4,0XFEF8);
	SetFunctionFlags(0XFEF4,0);
	SetType(0XFEF4, "int gettimeofday(struct timeval *tv, __timezone_ptr_t tz);");
	MakeFunction    (0XFEF8,0XFEFC);
	SetFunctionFlags(0XFEF8,0);
	SetType(0XFEF8, "FILE *fopen(const char *filename, const char *modes);");
	MakeFunction    (0XFEFC,0XFF00);
	SetFunctionFlags(0XFEFC,0);
	SetType(0XFEFC, "void *memset(void *s, int c, size_t n);");
	MakeFunction    (0XFF00,0XFF04);
	SetFunctionFlags(0XFF00,0);
	SetType(0XFF00, "int fclose(FILE *stream);");
	MakeFunction    (0XFF04,0XFF08);
	SetFunctionFlags(0XFF04,0);
	SetType(0XFF04, "time_t time(time_t *timer);");
	MakeFunction    (0XFF08,0XFF0C);
	SetFunctionFlags(0XFF08,0);
	SetType(0XFF08, "DIR *opendir(const char *name);");
	MakeFunction    (0XFF0C,0XFF10);
	SetFunctionFlags(0XFF0C,0);
	SetType(0XFF0C, "int mount(const char *special_file, const char *dir, const char *fstype, unsigned __int32 rwflag, const void *data);");
	MakeFunction    (0XFF10,0XFF14);
	SetFunctionFlags(0XFF10,0);
	SetType(0XFF10, "int strcmp(const char *s1, const char *s2);");
	MakeFunction    (0XFF14,0XFF18);
	SetFunctionFlags(0XFF14,0);
	SetType(0XFF14, "__int32 lrand48(void);");
	MakeFunction    (0XFF18,0XFF1C);
	SetFunctionFlags(0XFF18,0);
	SetType(0XFF18, "struct hostent *gethostbyname(const char *name);");
	MakeFunction    (0XFF1C,0XFF20);
	SetFunctionFlags(0XFF1C,0);
	SetType(0XFF1C, "struct passwd *getpwnam(const char *name);");
	MakeFunction    (0XFF20,0XFF24);
	SetFunctionFlags(0XFF20,0);
	SetType(0XFF20, "int sprintf(char *s, const char *format, ...);");
	MakeFunction    (0XFF24,0XFF28);
	SetFunctionFlags(0XFF24,0);
	SetType(0XFF24, "int fputc(int c, FILE *stream);");
	MakeFunction    (0XFF28,0XFF2C);
	SetFunctionFlags(0XFF28,0);
	SetType(0XFF28, "int stat(const char *file, struct stat *buf);");
	MakeFunction    (0XFF2C,0XFF30);
	SetFunctionFlags(0XFF2C,0);
	SetType(0XFF2C, "size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);");
	MakeFunction    (0XFF30,0XFF34);
	SetFunctionFlags(0XFF30,0);
	SetType(0XFF30, "int access(const char *name, int type);");
	MakeFunction    (0XFF34,0XFF38);
	SetFunctionFlags(0XFF34,0x1);
	SetType(0XFF34, "void exit(int status);");
	MakeFunction    (0XFF3C,0XFF40);
	SetFunctionFlags(0XFF3C,0);
	SetType(0XFF3C, "int atoi(const char *nptr);");
	MakeFunction    (0XFF40,0XFF44);
	SetFunctionFlags(0XFF40,0);
	SetType(0XFF40, "size_t strlen(const char *s);");
	MakeFunction    (0XFF44,0XFF48);
	SetFunctionFlags(0XFF44,0);
	SetType(0XFF44, "int open(const char *file, int oflag, ...);");
	MakeFunction    (0XFF48,0XFF4C);
	SetFunctionFlags(0XFF48,0);
	MakeFunction    (0XFF4C,0XFF50);
	SetFunctionFlags(0XFF4C,0);
	SetType(0XFF4C, "char *strchr(const char *s, int c);");
	MakeFunction    (0XFF50,0XFF54);
	SetFunctionFlags(0XFF50,0);
	SetType(0XFF50, "int fputs(const char *s, FILE *stream);");
	MakeFunction    (0XFF54,0XFF58);
	SetFunctionFlags(0XFF54,0);
	SetType(0XFF54, "__pid_t setsid(void);");
	MakeFunction    (0XFF58,0XFF5C);
	SetFunctionFlags(0XFF58,0);
	SetType(0XFF58, "int closedir(DIR *dirp);");
	MakeFunction    (0XFF5C,0XFF60);
	SetFunctionFlags(0XFF5C,0);
	SetType(0XFF5C, "int vasprintf(char **, const char *, va_list);");
	MakeFunction    (0XFF60,0XFF64);
	SetFunctionFlags(0XFF60,0);
	SetType(0XFF60, "int close(int fd);");
	MakeFunction    (0XFF64,0XFF68);
	SetFunctionFlags(0XFF64,0);
	SetType(0XFF64, "void free(void *ptr);");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0X9C0C,"T",0,3);
	SetRegEx(0X9C0C,"DS",0XB,3);
	SetRegEx(0X9C20,"T",0,3);
	SetRegEx(0X9C2C,"T",0,3);
	SetRegEx(0X9C38,"T",0,3);
	SetRegEx(0X9C44,"T",0,3);
	SetRegEx(0X9C50,"T",0,3);
	SetRegEx(0X9C5C,"T",0,3);
	SetRegEx(0X9C68,"T",0,3);
	SetRegEx(0X9C74,"T",0,3);
	SetRegEx(0X9C80,"T",0,3);
	SetRegEx(0X9C8C,"T",0,3);
	SetRegEx(0X9C98,"T",0,3);
	SetRegEx(0X9CA4,"T",0,3);
	SetRegEx(0X9CB0,"T",0,3);
	SetRegEx(0X9CBC,"T",0,3);
	SetRegEx(0X9CC8,"T",0,3);
	SetRegEx(0X9CD4,"T",0,3);
	SetRegEx(0X9CE0,"T",0,3);
	SetRegEx(0X9CEC,"T",0,3);
	SetRegEx(0X9CF8,"T",0,3);
	SetRegEx(0X9D04,"T",0,3);
	SetRegEx(0X9D10,"T",0,3);
	SetRegEx(0X9D1C,"T",0,3);
	SetRegEx(0X9D28,"T",0,3);
	SetRegEx(0X9D34,"T",0,3);
	SetRegEx(0X9D40,"T",0,3);
	SetRegEx(0X9D4C,"T",0,3);
	SetRegEx(0X9D58,"T",0,3);
	SetRegEx(0X9D64,"T",0,3);
	SetRegEx(0X9D70,"T",0,3);
	SetRegEx(0X9D7C,"T",0,3);
	SetRegEx(0X9D88,"T",0,3);
	SetRegEx(0X9D94,"T",0,3);
	SetRegEx(0X9DA0,"T",0,3);
	SetRegEx(0X9DAC,"T",0,3);
	SetRegEx(0X9DB8,"T",0,3);
	SetRegEx(0X9DC4,"T",0,3);
	SetRegEx(0X9DD0,"T",0,3);
	SetRegEx(0X9DDC,"T",0,3);
	SetRegEx(0X9DE8,"T",0,3);
	SetRegEx(0X9DF4,"T",0,3);
	SetRegEx(0X9E00,"T",0,3);
	SetRegEx(0X9E0C,"T",0,3);
	SetRegEx(0X9E18,"T",0,3);
	SetRegEx(0X9E24,"T",0,3);
	SetRegEx(0X9E30,"T",0,3);
	SetRegEx(0X9E3C,"T",0,3);
	SetRegEx(0X9E48,"T",0,3);
	SetRegEx(0X9E54,"T",0,3);
	SetRegEx(0X9E60,"T",0,3);
	SetRegEx(0X9E6C,"T",0,3);
	SetRegEx(0X9E78,"T",0,3);
	SetRegEx(0X9E84,"T",0,3);
	SetRegEx(0X9E90,"T",0,3);
	SetRegEx(0X9E9C,"T",0,3);
	SetRegEx(0X9EA8,"T",0,3);
	SetRegEx(0X9EB4,"T",0,3);
	SetRegEx(0X9EC0,"T",0,3);
	SetRegEx(0X9ECC,"T",0,3);
	SetRegEx(0X9ED8,"T",0,3);
	SetRegEx(0X9EE4,"T",0,3);
	SetRegEx(0X9EF0,"T",0,3);
	SetRegEx(0X9EFC,"T",0,3);
	SetRegEx(0X9F08,"T",0,3);
	SetRegEx(0X9F14,"T",0,3);
	SetRegEx(0X9F20,"T",0,3);
	SetRegEx(0X9F2C,"T",0,3);
	SetRegEx(0X9F38,"T",0,3);
	SetRegEx(0X9F44,"T",0,3);
	SetRegEx(0X9F50,"T",0,3);
	SetRegEx(0X9F5C,"T",0,3);
	SetRegEx(0X9F70,"T",0,3);
	SetRegEx(0X9F70,"DS",0XB,3);
	SetRegEx(0X9FA0,"T",0X1,3);
	SetRegEx(0X9FB0,"T",0X1,3);
	SetRegEx(0X9FBC,"T",0X1,3);
	SetRegEx(0X9FC6,"T",0X1,3);
	SetRegEx(0X9FD2,"T",0X1,3);
	SetRegEx(0X9FDC,"T",0X1,3);
	SetRegEx(0X9FE8,"T",0X1,3);
	SetRegEx(0X9FF2,"T",0X1,3);
	SetRegEx(0X9FFE,"T",0X1,3);
	SetRegEx(0XA008,"T",0X1,3);
	SetRegEx(0XA014,"T",0X1,3);
	SetRegEx(0XA01E,"T",0X1,3);
	SetRegEx(0XA02A,"T",0X1,3);
	SetRegEx(0XA034,"T",0X1,3);
	SetRegEx(0XA040,"T",0X1,3);
	SetRegEx(0XA04A,"T",0X1,3);
	SetRegEx(0XA056,"T",0X1,3);
	SetRegEx(0XA060,"T",0X1,3);
	SetRegEx(0XA06C,"T",0X1,3);
	SetRegEx(0XA076,"T",0X1,3);
	SetRegEx(0XA082,"T",0X1,3);
	SetRegEx(0XA08C,"T",0X1,3);
	SetRegEx(0XA098,"T",0X1,3);
	SetRegEx(0XA0A2,"T",0X1,3);
	SetRegEx(0XA0AE,"T",0X1,3);
	SetRegEx(0XA0B8,"T",0X1,3);
	SetRegEx(0XA0C4,"T",0X1,3);
	SetRegEx(0XA0CE,"T",0X1,3);
	SetRegEx(0XA0DA,"T",0X1,3);
	SetRegEx(0XA0E4,"T",0X1,3);
	SetRegEx(0XA0F0,"T",0X1,3);
	SetRegEx(0XA0FA,"T",0X1,3);
	SetRegEx(0XA106,"T",0X1,3);
	SetRegEx(0XA110,"T",0X1,3);
	SetRegEx(0XA11C,"T",0X1,3);
	SetRegEx(0XA126,"T",0X1,3);
	SetRegEx(0XA132,"T",0X1,3);
	SetRegEx(0XA13C,"T",0X1,3);
	SetRegEx(0XA148,"T",0X1,3);
	SetRegEx(0XA152,"T",0X1,3);
	SetRegEx(0XA15E,"T",0X1,3);
	SetRegEx(0XA168,"T",0X1,3);
	SetRegEx(0XA174,"T",0X1,3);
	SetRegEx(0XA17E,"T",0X1,3);
	SetRegEx(0XA18A,"T",0X1,3);
	SetRegEx(0XA194,"T",0X1,3);
	SetRegEx(0XA1A0,"T",0X1,3);
	SetRegEx(0XA1AA,"T",0X1,3);
	SetRegEx(0XA1B6,"T",0X1,3);
	SetRegEx(0XA1C0,"T",0X1,3);
	SetRegEx(0XA1CC,"T",0X1,3);
	SetRegEx(0XA1D6,"T",0X1,3);
	SetRegEx(0XA1E2,"T",0X1,3);
	SetRegEx(0XA1EC,"T",0X1,3);
	SetRegEx(0XA1F8,"T",0X1,3);
	SetRegEx(0XA202,"T",0X1,3);
	SetRegEx(0XA20E,"T",0X1,3);
	SetRegEx(0XA218,"T",0X1,3);
	SetRegEx(0XA224,"T",0X1,3);
	SetRegEx(0XA22E,"T",0X1,3);
	SetRegEx(0XA23A,"T",0X1,3);
	SetRegEx(0XA244,"T",0X1,3);
	SetRegEx(0XA250,"T",0X1,3);
	SetRegEx(0XA2E0,"T",0X1,3);
	SetRegEx(0XA2EC,"T",0X1,3);
	SetRegEx(0XA2F6,"T",0X1,3);
	SetRegEx(0XA302,"T",0X1,3);
	SetRegEx(0XA30C,"T",0X1,3);
	SetRegEx(0XA318,"T",0X1,3);
	SetRegEx(0XA322,"T",0X1,3);
	SetRegEx(0XA32E,"T",0X1,3);
	SetRegEx(0XA338,"T",0X1,3);
	SetRegEx(0XA344,"T",0X1,3);
	SetRegEx(0XA34E,"T",0X1,3);
	SetRegEx(0XA35A,"T",0X1,3);
	SetRegEx(0XA364,"T",0X1,3);
	SetRegEx(0XA370,"T",0X1,3);
	SetRegEx(0XA37A,"T",0X1,3);
	SetRegEx(0XA386,"T",0X1,3);
	SetRegEx(0XA390,"T",0X1,3);
	SetRegEx(0XA39C,"T",0X1,3);
	SetRegEx(0XA3A6,"T",0X1,3);
	SetRegEx(0XA3B2,"T",0X1,3);
	SetRegEx(0XA3BC,"T",0X1,3);
	SetRegEx(0XA3C8,"T",0X1,3);
	SetRegEx(0XA3D2,"T",0X1,3);
	SetRegEx(0XA3DE,"T",0X1,3);
	SetRegEx(0XA3E8,"T",0X1,3);
	SetRegEx(0XA3F4,"T",0X1,3);
	SetRegEx(0XA3FE,"T",0X1,3);
	SetRegEx(0XA40A,"T",0X1,3);
	SetRegEx(0XA414,"T",0X1,3);
	SetRegEx(0XA420,"T",0X1,3);
	SetRegEx(0XA42A,"T",0X1,3);
	SetRegEx(0XA436,"T",0X1,3);
	SetRegEx(0XA440,"T",0X1,3);
	SetRegEx(0XA44C,"T",0X1,3);
	SetRegEx(0XA456,"T",0X1,3);
	SetRegEx(0XA462,"T",0X1,3);
	SetRegEx(0XA46C,"T",0X1,3);
	SetRegEx(0XA478,"T",0X1,3);
	SetRegEx(0XA482,"T",0X1,3);
	SetRegEx(0XA48E,"T",0X1,3);
	SetRegEx(0XA498,"T",0X1,3);
	SetRegEx(0XA4A4,"T",0X1,3);
	SetRegEx(0XA4AE,"T",0X1,3);
	SetRegEx(0XA4BA,"T",0X1,3);
	SetRegEx(0XA4C4,"T",0X1,3);
	SetRegEx(0XA4D0,"T",0X1,3);
	SetRegEx(0XA4DA,"T",0X1,3);
	SetRegEx(0XA4E6,"T",0X1,3);
	SetRegEx(0XA4F0,"T",0X1,3);
	SetRegEx(0XA4FC,"T",0X1,3);
	SetRegEx(0XA506,"T",0X1,3);
	SetRegEx(0XA512,"T",0X1,3);
	SetRegEx(0XA51C,"T",0X1,3);
	SetRegEx(0XA528,"T",0X1,3);
	SetRegEx(0XA532,"T",0X1,3);
	SetRegEx(0XA53E,"T",0X1,3);
	SetRegEx(0XA548,"T",0X1,3);
	SetRegEx(0XA554,"T",0X1,3);
	SetRegEx(0XA55E,"T",0X1,3);
	SetRegEx(0XA56A,"T",0X1,3);
	SetRegEx(0XA574,"T",0X1,3);
	SetRegEx(0XA580,"T",0X1,3);
	SetRegEx(0XA58A,"T",0X1,3);
	SetRegEx(0XA596,"T",0X1,3);
	SetRegEx(0XA624,"T",0X1,3);
	SetRegEx(0XA630,"T",0X1,3);
	SetRegEx(0XA63A,"T",0X1,3);
	SetRegEx(0XA646,"T",0X1,3);
	SetRegEx(0XA650,"T",0X1,3);
	SetRegEx(0XA65C,"T",0X1,3);
	SetRegEx(0XA666,"T",0X1,3);
	SetRegEx(0XA672,"T",0X1,3);
	SetRegEx(0XA67C,"T",0X1,3);
	SetRegEx(0XA688,"T",0X1,3);
	SetRegEx(0XA692,"T",0X1,3);
	SetRegEx(0XA69E,"T",0X1,3);
	SetRegEx(0XA6A8,"T",0X1,3);
	SetRegEx(0XA6B4,"T",0X1,3);
	SetRegEx(0XA6BE,"T",0X1,3);
	SetRegEx(0XA6CA,"T",0X1,3);
	SetRegEx(0XA6D4,"T",0X1,3);
	SetRegEx(0XA6E0,"T",0X1,3);
	SetRegEx(0XA6EA,"T",0X1,3);
	SetRegEx(0XA6F6,"T",0X1,3);
	SetRegEx(0XA700,"T",0X1,3);
	SetRegEx(0XA70C,"T",0X1,3);
	SetRegEx(0XA716,"T",0X1,3);
	SetRegEx(0XA722,"T",0X1,3);
	SetRegEx(0XA72C,"T",0X1,3);
	SetRegEx(0XA738,"T",0X1,3);
	SetRegEx(0XA76C,"T",0X1,3);
	SetRegEx(0XA794,"T",0X1,3);
	SetRegEx(0XA7A8,"T",0X1,3);
	SetRegEx(0XA7BE,"T",0X1,3);
	SetRegEx(0XA7C4,"T",0X1,3);
	SetRegEx(0XA7C8,"T",0X1,3);
	SetRegEx(0XA7D4,"T",0X1,3);
	SetRegEx(0XA80C,"T",0X1,3);
	SetRegEx(0XA820,"T",0X1,3);
	SetRegEx(0XA86A,"T",0X1,3);
	SetRegEx(0XA8B0,"T",0X1,3);
	SetRegEx(0XA8B6,"T",0X1,3);
	SetRegEx(0XA8D6,"T",0X1,3);
	SetRegEx(0XA904,"T",0X1,3);
	SetRegEx(0XA934,"T",0X1,3);
	SetRegEx(0XA972,"T",0X1,3);
	SetRegEx(0XA990,"T",0X1,3);
	SetRegEx(0XA9A4,"T",0X1,3);
	SetRegEx(0XA9C0,"T",0X1,3);
	SetRegEx(0XA9C8,"T",0X1,3);
	SetRegEx(0XA9E4,"T",0X1,3);
	SetRegEx(0XA9FA,"T",0X1,3);
	SetRegEx(0XAA20,"T",0X1,3);
	SetRegEx(0XAA32,"T",0X1,3);
	SetRegEx(0XAA38,"T",0X1,3);
	SetRegEx(0XAA5A,"T",0X1,3);
	SetRegEx(0XAA60,"T",0X1,3);
	SetRegEx(0XAA8C,"T",0X1,3);
	SetRegEx(0XAAB8,"T",0X1,3);
	SetRegEx(0XAAC4,"T",0X1,3);
	SetRegEx(0XAB0E,"T",0X1,3);
	SetRegEx(0XABBC,"T",0X1,3);
	SetRegEx(0XABC2,"T",0X1,3);
	SetRegEx(0XABE4,"T",0X1,3);
	SetRegEx(0XAC14,"T",0X1,3);
	SetRegEx(0XAC3E,"T",0X1,3);
	SetRegEx(0XAC50,"T",0X1,3);
	SetRegEx(0XAC7A,"T",0X1,3);
	SetRegEx(0XAC7C,"T",0X1,3);
	SetRegEx(0XAC8A,"T",0X1,3);
	SetRegEx(0XAC98,"T",0X1,3);
	SetRegEx(0XACE6,"T",0X1,3);
	SetRegEx(0XACE8,"T",0X1,3);
	SetRegEx(0XACFE,"T",0X1,3);
	SetRegEx(0XAD48,"T",0X1,3);
	SetRegEx(0XAD50,"T",0X1,3);
	SetRegEx(0XAD6E,"T",0X1,3);
	SetRegEx(0XAD80,"T",0X1,3);
	SetRegEx(0XAD84,"T",0X1,3);
	SetRegEx(0XAD88,"T",0X1,3);
	SetRegEx(0XADBC,"T",0X1,3);
	SetRegEx(0XADEC,"T",0X1,3);
	SetRegEx(0XADFA,"T",0X1,3);
	SetRegEx(0XAE1E,"T",0X1,3);
	SetRegEx(0XAE28,"T",0X1,3);
	SetRegEx(0XAE46,"T",0X1,3);
	SetRegEx(0XAE50,"T",0X1,3);
	SetRegEx(0XAE5A,"T",0X1,3);
	SetRegEx(0XAE62,"T",0X1,3);
	SetRegEx(0XAE68,"T",0X1,3);
	SetRegEx(0XAE6A,"T",0X1,3);
	SetRegEx(0XAE70,"T",0X1,3);
	SetRegEx(0XAE7E,"T",0X1,3);
	SetRegEx(0XAE82,"T",0X1,3);
	SetRegEx(0XAE9A,"T",0X1,3);
	SetRegEx(0XAEA8,"T",0X1,3);
	SetRegEx(0XAEC8,"T",0X1,3);
	SetRegEx(0XAED2,"T",0X1,3);
	SetRegEx(0XAEEE,"T",0X1,3);
	SetRegEx(0XAEF2,"T",0X1,3);
	SetRegEx(0XAEFA,"T",0X1,3);
	SetRegEx(0XAF04,"T",0X1,3);
	SetRegEx(0XAF44,"T",0X1,3);
	SetRegEx(0XAF50,"T",0X1,3);
	SetRegEx(0XAF5A,"T",0X1,3);
	SetRegEx(0XAF6A,"T",0X1,3);
	SetRegEx(0XAF76,"T",0X1,3);
	SetRegEx(0XAF82,"T",0X1,3);
	SetRegEx(0XAF94,"T",0X1,3);
	SetRegEx(0XAF9A,"T",0X1,3);
	SetRegEx(0XAFA0,"T",0X1,3);
	SetRegEx(0XAFA6,"T",0X1,3);
	SetRegEx(0XB008,"T",0X1,3);
	SetRegEx(0XB03A,"T",0X1,3);
	SetRegEx(0XB056,"T",0X1,3);
	SetRegEx(0XB060,"T",0X1,3);
	SetRegEx(0XB068,"T",0X1,3);
	SetRegEx(0XB06E,"T",0X1,3);
	SetRegEx(0XB08C,"T",0X1,3);
	SetRegEx(0XB0AE,"T",0X1,3);
	SetRegEx(0XB0D4,"T",0X1,3);
	SetRegEx(0XB0DC,"T",0X1,3);
	SetRegEx(0XB0E6,"T",0X1,3);
	SetRegEx(0XB120,"T",0X1,3);
	SetRegEx(0XB152,"T",0X1,3);
	SetRegEx(0XB166,"T",0X1,3);
	SetRegEx(0XB16E,"T",0X1,3);
	SetRegEx(0XB198,"T",0X1,3);
	SetRegEx(0XB1A2,"T",0X1,3);
	SetRegEx(0XB1B6,"T",0X1,3);
	SetRegEx(0XB1C6,"T",0X1,3);
	SetRegEx(0XB1CC,"T",0X1,3);
	SetRegEx(0XB23E,"T",0X1,3);
	SetRegEx(0XB256,"T",0X1,3);
	SetRegEx(0XB264,"T",0X1,3);
	SetRegEx(0XB270,"T",0X1,3);
	SetRegEx(0XB280,"T",0X1,3);
	SetRegEx(0XB2A4,"T",0X1,3);
	SetRegEx(0XB2BA,"T",0X1,3);
	SetRegEx(0XB2C6,"T",0X1,3);
	SetRegEx(0XB2CC,"T",0X1,3);
	SetRegEx(0XB2DA,"T",0X1,3);
	SetRegEx(0XB302,"T",0X1,3);
	SetRegEx(0XB30A,"T",0X1,3);
	SetRegEx(0XB322,"T",0X1,3);
	SetRegEx(0XB330,"T",0X1,3);
	SetRegEx(0XB336,"T",0X1,3);
	SetRegEx(0XB340,"T",0X1,3);
	SetRegEx(0XB344,"T",0X1,3);
	SetRegEx(0XB350,"T",0X1,3);
	SetRegEx(0XB394,"T",0X1,3);
	SetRegEx(0XB3C8,"T",0X1,3);
	SetRegEx(0XB3CC,"T",0X1,3);
	SetRegEx(0XB3D2,"T",0X1,3);
	SetRegEx(0XB3D8,"T",0X1,3);
	SetRegEx(0XB3E0,"T",0X1,3);
	SetRegEx(0XB3E8,"T",0X1,3);
	SetRegEx(0XB40C,"T",0X1,3);
	SetRegEx(0XB43E,"T",0X1,3);
	SetRegEx(0XB458,"T",0X1,3);
	SetRegEx(0XB48C,"T",0X1,3);
	SetRegEx(0XB498,"T",0X1,3);
	SetRegEx(0XB4B2,"T",0X1,3);
	SetRegEx(0XB4CE,"T",0X1,3);
	SetRegEx(0XB4DA,"T",0X1,3);
	SetRegEx(0XB4EC,"T",0X1,3);
	SetRegEx(0XB508,"T",0X1,3);
	SetRegEx(0XB51E,"T",0X1,3);
	SetRegEx(0XB536,"T",0X1,3);
	SetRegEx(0XB550,"T",0X1,3);
	SetRegEx(0XB55C,"T",0X1,3);
	SetRegEx(0XB56A,"T",0X1,3);
	SetRegEx(0XB578,"T",0X1,3);
	SetRegEx(0XB594,"T",0X1,3);
	SetRegEx(0XB5A8,"T",0X1,3);
	SetRegEx(0XB5DC,"T",0X1,3);
	SetRegEx(0XB610,"T",0X1,3);
	SetRegEx(0XB61C,"T",0X1,3);
	SetRegEx(0XB61E,"T",0X1,3);
	SetRegEx(0XB628,"T",0X1,3);
	SetRegEx(0XB648,"T",0X1,3);
	SetRegEx(0XB650,"T",0X1,3);
	SetRegEx(0XB65A,"T",0X1,3);
	SetRegEx(0XB65E,"T",0X1,3);
	SetRegEx(0XB668,"T",0X1,3);
	SetRegEx(0XB67C,"T",0X1,3);
	SetRegEx(0XB686,"T",0X1,3);
	SetRegEx(0XB694,"T",0X1,3);
	SetRegEx(0XB69C,"T",0X1,3);
	SetRegEx(0XB6A4,"T",0X1,3);
	SetRegEx(0XB6B2,"T",0X1,3);
	SetRegEx(0XB6B8,"T",0X1,3);
	SetRegEx(0XB6D0,"T",0X1,3);
	SetRegEx(0XB6DC,"T",0X1,3);
	SetRegEx(0XB6E0,"T",0X1,3);
	SetRegEx(0XB6E2,"T",0X1,3);
	SetRegEx(0XB6F2,"T",0X1,3);
	SetRegEx(0XB6F8,"T",0X1,3);
	SetRegEx(0XB714,"T",0X1,3);
	SetRegEx(0XB718,"T",0X1,3);
	SetRegEx(0XB730,"T",0X1,3);
	SetRegEx(0XB76A,"T",0X1,3);
	SetRegEx(0XB770,"T",0X1,3);
	SetRegEx(0XB790,"T",0X1,3);
	SetRegEx(0XB798,"T",0X1,3);
	SetRegEx(0XB7AC,"T",0X1,3);
	SetRegEx(0XB7D2,"T",0X1,3);
	SetRegEx(0XB7D8,"T",0X1,3);
	SetRegEx(0XB7DE,"T",0X1,3);
	SetRegEx(0XB7F4,"T",0X1,3);
	SetRegEx(0XB828,"T",0X1,3);
	SetRegEx(0XB82C,"T",0X1,3);
	SetRegEx(0XB83A,"T",0X1,3);
	SetRegEx(0XB852,"T",0X1,3);
	SetRegEx(0XB860,"T",0X1,3);
	SetRegEx(0XB86A,"T",0X1,3);
	SetRegEx(0XB880,"T",0X1,3);
	SetRegEx(0XB8CE,"T",0X1,3);
	SetRegEx(0XB8D0,"T",0X1,3);
	SetRegEx(0XB8E8,"T",0X1,3);
	SetRegEx(0XB8EA,"T",0X1,3);
	SetRegEx(0XB8FA,"T",0X1,3);
	SetRegEx(0XB908,"T",0X1,3);
	SetRegEx(0XB914,"T",0X1,3);
	SetRegEx(0XB960,"T",0X1,3);
	SetRegEx(0XB972,"T",0X1,3);
	SetRegEx(0XB978,"T",0X1,3);
	SetRegEx(0XB98E,"T",0X1,3);
	SetRegEx(0XB9B6,"T",0X1,3);
	SetRegEx(0XB9BC,"T",0X1,3);
	SetRegEx(0XB9F6,"T",0X1,3);
	SetRegEx(0XB9FA,"T",0X1,3);
	SetRegEx(0XB9FE,"T",0X1,3);
	SetRegEx(0XBA04,"T",0X1,3);
	SetRegEx(0XBA20,"T",0X1,3);
	SetRegEx(0XBA84,"T",0X1,3);
	SetRegEx(0XBAB0,"T",0X1,3);
	SetRegEx(0XBAE6,"T",0X1,3);
	SetRegEx(0XBB30,"T",0X1,3);
	SetRegEx(0XBB72,"T",0X1,3);
	SetRegEx(0XBB76,"T",0X1,3);
	SetRegEx(0XBB9C,"T",0X1,3);
	SetRegEx(0XBBEA,"T",0X1,3);
	SetRegEx(0XBC00,"T",0X1,3);
	SetRegEx(0XBC0C,"T",0X1,3);
	SetRegEx(0XBC6E,"T",0X1,3);
	SetRegEx(0XBC70,"T",0X1,3);
	SetRegEx(0XBC92,"T",0X1,3);
	SetRegEx(0XBCAE,"T",0X1,3);
	SetRegEx(0XBD28,"T",0X1,3);
	SetRegEx(0XBD46,"T",0X1,3);
	SetRegEx(0XBD70,"T",0X1,3);
	SetRegEx(0XBD90,"T",0X1,3);
	SetRegEx(0XBD98,"T",0X1,3);
	SetRegEx(0XBDD0,"T",0X1,3);
	SetRegEx(0XBE10,"T",0X1,3);
	SetRegEx(0XBE18,"T",0X1,3);
	SetRegEx(0XBE20,"T",0X1,3);
	SetRegEx(0XBE5E,"T",0X1,3);
	SetRegEx(0XBE84,"T",0X1,3);
	SetRegEx(0XBEA2,"T",0X1,3);
	SetRegEx(0XBECC,"T",0X1,3);
	SetRegEx(0XBED8,"T",0X1,3);
	SetRegEx(0XBEEA,"T",0X1,3);
	SetRegEx(0XBEEE,"T",0X1,3);
	SetRegEx(0XBF02,"T",0X1,3);
	SetRegEx(0XBF0A,"T",0X1,3);
	SetRegEx(0XBF12,"T",0X1,3);
	SetRegEx(0XBF22,"T",0X1,3);
	SetRegEx(0XBF2C,"T",0X1,3);
	SetRegEx(0XBF32,"T",0X1,3);
	SetRegEx(0XBF40,"T",0X1,3);
	SetRegEx(0XBF6C,"T",0X1,3);
	SetRegEx(0XBFA0,"T",0X1,3);
	SetRegEx(0XBFB2,"T",0X1,3);
	SetRegEx(0XBFC4,"T",0X1,3);
	SetRegEx(0XBFF0,"T",0X1,3);
	SetRegEx(0XBFFA,"T",0X1,3);
	SetRegEx(0XC04A,"T",0X1,3);
	SetRegEx(0XC050,"T",0X1,3);
	SetRegEx(0XC062,"T",0X1,3);
	SetRegEx(0XC072,"T",0X1,3);
	SetRegEx(0XC094,"T",0X1,3);
	SetRegEx(0XC0B0,"T",0X1,3);
	SetRegEx(0XC0D2,"T",0X1,3);
	SetRegEx(0XC0FA,"T",0X1,3);
	SetRegEx(0XC11C,"T",0X1,3);
	SetRegEx(0XC124,"T",0X1,3);
	SetRegEx(0XC15A,"T",0X1,3);
	SetRegEx(0XC166,"T",0X1,3);
	SetRegEx(0XC16C,"T",0X1,3);
	SetRegEx(0XC1A8,"T",0X1,3);
	SetRegEx(0XC1AC,"T",0X1,3);
	SetRegEx(0XC1F4,"T",0X1,3);
	SetRegEx(0XC22C,"T",0X1,3);
	SetRegEx(0XC23E,"T",0X1,3);
	SetRegEx(0XC244,"T",0X1,3);
	SetRegEx(0XC256,"T",0X1,3);
	SetRegEx(0XC274,"T",0X1,3);
	SetRegEx(0XC278,"T",0X1,3);
	SetRegEx(0XC27E,"T",0X1,3);
	SetRegEx(0XC2F8,"T",0X1,3);
	SetRegEx(0XC312,"T",0X1,3);
	SetRegEx(0XC31E,"T",0X1,3);
	SetRegEx(0XC32E,"T",0X1,3);
	SetRegEx(0XC338,"T",0X1,3);
	SetRegEx(0XC390,"T",0X1,3);
	SetRegEx(0XC398,"T",0X1,3);
	SetRegEx(0XC3A6,"T",0X1,3);
	SetRegEx(0XC3BE,"T",0X1,3);
	SetRegEx(0XC3C6,"T",0X1,3);
	SetRegEx(0XC3D4,"T",0X1,3);
	SetRegEx(0XC3F4,"T",0X1,3);
	SetRegEx(0XC42E,"T",0X1,3);
	SetRegEx(0XC444,"T",0X1,3);
	SetRegEx(0XC496,"T",0X1,3);
	SetRegEx(0XC498,"T",0X1,3);
	SetRegEx(0XC4A6,"T",0X1,3);
	SetRegEx(0XC4C8,"T",0X1,3);
	SetRegEx(0XC522,"T",0X1,3);
	SetRegEx(0XC558,"T",0X1,3);
	SetRegEx(0XC566,"T",0X1,3);
	SetRegEx(0XC572,"T",0X1,3);
	SetRegEx(0XC57E,"T",0X1,3);
	SetRegEx(0XC59E,"T",0X1,3);
	SetRegEx(0XC5B8,"T",0X1,3);
	SetRegEx(0XC5F2,"T",0X1,3);
	SetRegEx(0XC60C,"T",0X1,3);
	SetRegEx(0XC622,"T",0X1,3);
	SetRegEx(0XC652,"T",0X1,3);
	SetRegEx(0XC65C,"T",0X1,3);
	SetRegEx(0XC666,"T",0X1,3);
	SetRegEx(0XC676,"T",0X1,3);
	SetRegEx(0XC686,"T",0X1,3);
	SetRegEx(0XC69C,"T",0X1,3);
	SetRegEx(0XC6DA,"T",0X1,3);
	SetRegEx(0XC6F6,"T",0X1,3);
	SetRegEx(0XC728,"T",0X1,3);
	SetRegEx(0XC770,"T",0X1,3);
	SetRegEx(0XC778,"T",0X1,3);
	SetRegEx(0XC780,"T",0X1,3);
	SetRegEx(0XC7AC,"T",0X1,3);
	SetRegEx(0XC7B2,"T",0X1,3);
	SetRegEx(0XC820,"T",0X1,3);
	SetRegEx(0XC87A,"T",0X1,3);
	SetRegEx(0XC892,"T",0X1,3);
	SetRegEx(0XC8A6,"T",0X1,3);
	SetRegEx(0XC8BA,"T",0X1,3);
	SetRegEx(0XC8D2,"T",0X1,3);
	SetRegEx(0XC8EC,"T",0X1,3);
	SetRegEx(0XC910,"T",0X1,3);
	SetRegEx(0XC95A,"T",0X1,3);
	SetRegEx(0XC978,"T",0X1,3);
	SetRegEx(0XC986,"T",0X1,3);
	SetRegEx(0XC992,"T",0X1,3);
	SetRegEx(0XC9A0,"T",0X1,3);
	SetRegEx(0XC9A8,"T",0X1,3);
	SetRegEx(0XC9BE,"T",0X1,3);
	SetRegEx(0XC9D8,"T",0X1,3);
	SetRegEx(0XCA1C,"T",0X1,3);
	SetRegEx(0XCA20,"T",0X1,3);
	SetRegEx(0XCA26,"T",0X1,3);
	SetRegEx(0XCA48,"T",0X1,3);
	SetRegEx(0XCA84,"T",0X1,3);
	SetRegEx(0XCA96,"T",0X1,3);
	SetRegEx(0XCAB0,"T",0X1,3);
	SetRegEx(0XCAF0,"T",0X1,3);
	SetRegEx(0XCB0E,"T",0X1,3);
	SetRegEx(0XCB16,"T",0X1,3);
	SetRegEx(0XCB4A,"T",0X1,3);
	SetRegEx(0XCB5C,"T",0X1,3);
	SetRegEx(0XCDEC,"T",0X1,3);
	SetRegEx(0XCDF6,"T",0X1,3);
	SetRegEx(0XCDFE,"T",0X1,3);
	SetRegEx(0XCE06,"T",0X1,3);
	SetRegEx(0XCE2E,"T",0X1,3);
	SetRegEx(0XCE4A,"T",0X1,3);
	SetRegEx(0XCE58,"T",0X1,3);
	SetRegEx(0XCE78,"T",0X1,3);
	SetRegEx(0XCEAA,"T",0X1,3);
	SetRegEx(0XCECA,"T",0X1,3);
	SetRegEx(0XCEEE,"T",0X1,3);
	SetRegEx(0XCF12,"T",0X1,3);
	SetRegEx(0XCF36,"T",0X1,3);
	SetRegEx(0XCF5A,"T",0X1,3);
	SetRegEx(0XCF68,"T",0X1,3);
	SetRegEx(0XCF72,"T",0X1,3);
	SetRegEx(0XCF7A,"T",0X1,3);
	SetRegEx(0XCF88,"T",0X1,3);
	SetRegEx(0XCFB6,"T",0X1,3);
	SetRegEx(0XCFBA,"T",0X1,3);
	SetRegEx(0XCFF0,"T",0X1,3);
	SetRegEx(0XD000,"T",0X1,3);
	SetRegEx(0XD022,"T",0X1,3);
	SetRegEx(0XD048,"T",0X1,3);
	SetRegEx(0XD0B0,"T",0X1,3);
	SetRegEx(0XD0F4,"T",0X1,3);
	SetRegEx(0XD10C,"T",0X1,3);
	SetRegEx(0XD110,"T",0X1,3);
	SetRegEx(0XD126,"T",0X1,3);
	SetRegEx(0XD13C,"T",0X1,3);
	SetRegEx(0XD194,"T",0X1,3);
	SetRegEx(0XD1DA,"T",0X1,3);
	SetRegEx(0XD21E,"T",0X1,3);
	SetRegEx(0XD240,"T",0X1,3);
	SetRegEx(0XD29A,"T",0X1,3);
	SetRegEx(0XD2BC,"T",0X1,3);
	SetRegEx(0XD3C0,"T",0X1,3);
	SetRegEx(0XD3D2,"T",0X1,3);
	SetRegEx(0XD3D4,"T",0X1,3);
	SetRegEx(0XD3E4,"T",0X1,3);
	SetRegEx(0XD3E8,"T",0X1,3);
	SetRegEx(0XD3FE,"T",0X1,3);
	SetRegEx(0XD412,"T",0X1,3);
	SetRegEx(0XD422,"T",0X1,3);
	SetRegEx(0XD432,"T",0X1,3);
	SetRegEx(0XD450,"T",0X1,3);
	SetRegEx(0XD46C,"T",0X1,3);
	SetRegEx(0XD47E,"T",0X1,3);
	SetRegEx(0XD488,"T",0,3);
	SetRegEx(0XD490,"T",0,3);
	SetRegEx(0XD490,"DS",0XB,3);
	SetRegEx(0XD90C,"T",0,3);
	SetRegEx(0XD90C,"DS",0XB,3);
	SetRegEx(0XEB60,"T",0,3);
	SetRegEx(0XEB60,"DS",0XB,3);
	SetRegEx(0XEB68,"T",0,3);
	SetRegEx(0XEB68,"DS",0XB,3);
	SetRegEx(0XEB70,"T",0,3);
	SetRegEx(0XEB70,"DS",0XB,3);
	SetRegEx(0XEB78,"T",0,3);
	SetRegEx(0XEB78,"DS",0XB,3);
	SetRegEx(0XEB80,"T",0,3);
	SetRegEx(0XEB80,"DS",0XB,3);
	SetRegEx(0XECB8,"T",0,3);
	SetRegEx(0XECB8,"DS",0XB,3);
	SetRegEx(0XEF2C,"T",0,3);
	SetRegEx(0XEF2C,"DS",0XB,3);
	SetRegEx(0XF468,"T",0,3);
	SetRegEx(0XF468,"DS",0XB,3);
	SetRegEx(0XFE3C,"T",0,3);
	SetRegEx(0XFE3C,"DS",0XD,3);
	SetRegEx(0XFE40,"T",0,3);
	SetRegEx(0XFE44,"T",0,3);
	SetRegEx(0XFE48,"T",0,3);
	SetRegEx(0XFE4C,"T",0,3);
	SetRegEx(0XFE58,"T",0,3);
	SetRegEx(0XFE5C,"T",0,3);
	SetRegEx(0XFE60,"T",0,3);
	SetRegEx(0XFE64,"T",0,3);
	SetRegEx(0XFE68,"T",0,3);
	SetRegEx(0XFE6C,"T",0,3);
	SetRegEx(0XFE70,"T",0,3);
	SetRegEx(0XFE74,"T",0,3);
	SetRegEx(0XFE78,"T",0,3);
	SetRegEx(0XFE7C,"T",0,3);
	SetRegEx(0XFE80,"T",0,3);
	SetRegEx(0XFE84,"T",0,3);
	SetRegEx(0XFE88,"T",0,3);
	SetRegEx(0XFE8C,"T",0,3);
	SetRegEx(0XFE90,"T",0,3);
	SetRegEx(0XFE94,"T",0,3);
	SetRegEx(0XFE98,"T",0,3);
	SetRegEx(0XFE9C,"T",0,3);
	SetRegEx(0XFEA0,"T",0,3);
	SetRegEx(0XFEA4,"T",0,3);
	SetRegEx(0XFEA8,"T",0,3);
	SetRegEx(0XFEAC,"T",0,3);
	SetRegEx(0XFEB0,"T",0,3);
	SetRegEx(0XFEB4,"T",0,3);
	SetRegEx(0XFEB8,"T",0,3);
	SetRegEx(0XFEBC,"T",0,3);
	SetRegEx(0XFEC0,"T",0,3);
	SetRegEx(0XFEC4,"T",0,3);
	SetRegEx(0XFEC8,"T",0,3);
	SetRegEx(0XFECC,"T",0,3);
	SetRegEx(0XFED0,"T",0,3);
	SetRegEx(0XFED4,"T",0,3);
	SetRegEx(0XFED8,"T",0,3);
	SetRegEx(0XFEDC,"T",0,3);
	SetRegEx(0XFEE0,"T",0,3);
	SetRegEx(0XFEE4,"T",0,3);
	SetRegEx(0XFEE8,"T",0,3);
	SetRegEx(0XFEEC,"T",0,3);
	SetRegEx(0XFEF0,"T",0,3);
	SetRegEx(0XFEF4,"T",0,3);
	SetRegEx(0XFEF8,"T",0,3);
	SetRegEx(0XFEFC,"T",0,3);
	SetRegEx(0XFF00,"T",0,3);
	SetRegEx(0XFF04,"T",0,3);
	SetRegEx(0XFF08,"T",0,3);
	SetRegEx(0XFF0C,"T",0,3);
	SetRegEx(0XFF10,"T",0,3);
	SetRegEx(0XFF14,"T",0,3);
	SetRegEx(0XFF18,"T",0,3);
	SetRegEx(0XFF1C,"T",0,3);
	SetRegEx(0XFF20,"T",0,3);
	SetRegEx(0XFF28,"T",0,3);
	SetRegEx(0XFF2C,"T",0,3);
	SetRegEx(0XFF30,"T",0,3);
	SetRegEx(0XFF34,"T",0,3);
	SetRegEx(0XFF3C,"T",0,3);
	SetRegEx(0XFF40,"T",0,3);
	SetRegEx(0XFF44,"T",0,3);
	SetRegEx(0XFF4C,"T",0,3);
	SetRegEx(0XFF50,"T",0,3);
	SetRegEx(0XFF54,"T",0,3);
	SetRegEx(0XFF58,"T",0,3);
	SetRegEx(0XFF5C,"T",0,3);
	SetRegEx(0XFF60,"T",0,3);
	SetRegEx(0XFF64,"T",0,3);
	SetRegEx(0X100DC,"T",0,3);
	SetRegEx(0X100DC,"DS",0XE,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
